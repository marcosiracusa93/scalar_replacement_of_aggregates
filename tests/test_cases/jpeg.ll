; ModuleID = 'jpeg/jpeg.c'
source_filename = "jpeg/jpeg.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

@hana_jpg = constant [5207 x i8] c}\01\02\03\00\04\11\05\12!1A\06\13Qa\07\22q\142\81\91\A1\08#B\B1\C1\15R\D1\F0$3br\82\09\0A\16\17\18\19\1A%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E1\E2\E3\E4\E5\E6\E7\E8\E9\EA\F1\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\C4\00\1F\01\00\03\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\FF\C4\00\B5\11\00\02\01\02\04\04\03\04\07\05\04\04\00\01\02w\00\01\02\03\11\04\05!1\06\12AQ\07aq\13\222\81\08\14B\91\A1\B1\C1\09#3R\F0\15br\D1\0A\16$4\E1%\F1\17\18\19\1A&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\82\83\84\85\86\87\88\89\8A\92\93\94\95\96\97\98\99\9A\A2\A3\A4\A5\A6\A7\A8\A9\AA\B2\B3\B4\B5\B6\B7\B8\B9\BA\C2\C3\C4\C5\C6\C7\C8\C9\CA\D2\D3\D4\D5\D6\D7\D8\D9\DA\E2\E3\E4\E5\E6\E7\E8\E9\EA\F2\F3\F4\F5\F6\F7\F8\F9\FA\FF\DA\00\0C\03\01\00\02\11\03\11\00?\00\F5\AF\00Z\EA\17\B3\AF\8A<O1\F1\A4z\9B\CF\A9\E9\BE\22\B0g\16zlV\F1*[\DA\AC\0CI,\C7\CC&@\19d,x\E3\0B\C0\E8\BA7\ED;\A3M\E3M;[\F1\7F\855M\06\D2\D6\E2\F6;\B8D\F0\DDXKr\04\883\90V(\90<\98,U\BEQ\EC\BF*x3\F6\8B\F1\0F\C2_\88m\A4E\AC\EAg\C2\D1\DE,q\DA\C3u\98#\B6\91\8C\8C!\8D\B7\04C\BF  \00\02p:W\B0\F8\17\F6\C6\F0\C0\F1a\F1G\88\FC1,\1A\BF\8E\AE#\B6\BA\D5\12\FF\00\CB\B6\D2t\F5\8E;h\A4r\DC\C8\04\B0\B3HY@\0A\C4\8E\A5\1F\B7\0D\8E\A5\CF\19)k6\9B\BE\9A5\B7\9E\BD\FE\F3\17$\D2\E8}\0B\A9j\16\1E5\F8\18&\F1N\81\A4x\96MF\DA;\E9-t\EBi\EF\EDu\0ByD[\AF\E3\8Au\8EH\90\0D\D3\18\93,\81AR\E1\81?(\F8\93\F6a\F0\AB\93\A6\E8\CF\ACK\7Fs1k;\AB\0By/t\BB\A8\E5]\E9\11\5C\97\B7u\1F.r\C1\80\1DI\C0\FA\AB\C5\9E\0A\BA\D7\BE\C9\1B\F8\AA\D6\EEAcu5\BE\95gk\1D\C5\94\93\88\D53\05\C7\DD\B7<C\22\92\E1\882/(^\BC'\E1\87\C5O\8C\B0|G\82\D3\C4cV\9FE\B4i-f\D2\ACm\12[\95s\84\86m\EB\F2\ACFV`\1D\9F\0EU\8F@q\EA\CA\18Z\8B\92\B2Ml\B4\F4\D2\FD\1D\FF\00\22\BC\D9\F3O\C2\CDC\C7\1F\03\BE%\E9^+\83E}(C\A8\BF\87\EFn\AE\AD\9F\EC\F1\C9$\8A\B2\C5\B9\86\03\AA\ECoP;W\D6\1F\B5d+`\9AE\97\88\FC\09\A0\9B]P\C5\A8\B6\A5\16\9E\0C\DFhRCB\D2\E0a\F2\01 \9EGn\E3c\E1o\C3/\09|E\B6\F1/\8A|u>\BFn\D6~6\D7\E6\B8\85T\BA1i\96#\94\19\8D\DC(d%y\04\B1\07\1C\8E\B7\C3\FE(]Am>\0A|J\B5\D4\B5\D3\A9\D9\DF\ED\D4.\ED\A11j\91\C5\B5D\DEd` fY\10\02\83vv\93\8E\B5\E7R\C0\CA\AE\0EXjS\B7:\DE\D7\B5\FA|\CC\B5\94O\84<I\06\B3\ACG}\AB\5C\DA\AC\96\9206\A8\17\E4\B7\80\1C\02=s\EC;\F1\C5i|!\F8\07\E2\AF\8E\1A\F3\BE\9D\AC\DB\DA\C3\A4_Z\A6\A1n\087\11\D9I\9F\DFD\87\87;\94\A6\DE\C4\E7\9C`\FD\11\F1\13\E0\9F\82</\E1\F7\F0W\87m\AE\13Y\F0\ED\BCz\C5\AD\C5\C9\95\EE\1BO\09\FB\D5\B8\91\9B\CB~Y\86\11r\18\02\00\C1\AF\09\F8}\E1o\88V\9E;\8F\E2\0F\C2-@K<\12\AD\AC\D0)>K\DC\05\12$\05A\07k\0EA\CF^\87\9C\0F\03\0F\95\D5\C1b\A1N\B2RMtv\FC\EC\F4\EA\EC4\EF-t\B1\CE\FCm\F8\0B\F1\13\E1\7F\89\B5K{\AB5\B9\D2\22\BC[}>\EAX\D6)o\22\C2\95m\99\E0\E0\95=\06S#\AE+\99\F1w\81g\9B[\82\E6\C3M\91U\EC\95\B7\05\C0F\F9\BA\FE\95\EC?\17>>\F8\EB\E2\B7\8Auo\02\F8\DBQ\B7\D1om\8A\DB\C3k\0C*\B1\F9\E8\A0\EDgpd\CE}\FF\00\A8\A6|.\B6\F1\CE\B1\E1{\CB\1F\16\E8\B33\08d\FB-\D2[\B3)t\18 \B0\18\EF\EB^fsVP\C5?\AB\A7\EE\E8\D3\F3\FC\D7\99\A2i\E8\D9\F3v\9Bm\A8h\B7\D1\DDj\9AD\B3$3n\90\94;[\19\F5\EA+\AA\7F\11\F8vWi\17E\DA\1C\96\03j\F0\0F\E3Qj\BA7\8C[u\F5\D5\B5\CB\DA),\E2<\10\07Q\909\EE?\ADr\0F\1D\E1v)m1RN8#\8A\BAx\87k\E8_;\A7\A2G\AF\FC$\F8u\17\8En\AFo\F5\DD[K\83O\B3\B8\D2\AC^9\E4Xo$\8A\E2\EE\18D\D6\CA\E3\1B\11X\A3\15c\B0\B4}\B1\9FL\F8\A1\FB?M\F0\EF\C1V\97\FA\C6\89\F6\BD\13S\B3?\D8\BA\EA\98\18:\CD\03M\F6y\C0a\221\C6\E5#1\B9s\80K(\AE+\E1\BF\C4\8D[\E0g\ED\10\FE\13\F0\D6\A6\97^\16\83V\1Ar?\88\A5\FB'\D9,\AE\1E0\F2y\B20[`\AA\CC\CC\DC#\A2|\C3\A1\1FP|F\F1\EE\81\E3Mc\E2.\91\E1\BDoC\D4\FC\05\A0\F8j56\F1_\DB\CDay\AF\DD\C3!\86KI\1C\C8\B1\A5\BC,\F3J\B1\15_\B50\0F\B5\D0M_K\83\8E\1ExX\CA\1A\BB>\8B\AAo\CE\EB_\91\CE\E1k\A7\B8\BF\095_\88^)\B0\F0\96\A1\F1\93Z}WL\F1N\995\C8\B1\93X[x\E3\D3\E1\B6\1E]\E1Y\08Y\1C\80\B1\BA\E1T,\8D\B9\C3\90k\85\F1?\83\FC-\E1O\07\FC]\D5\FE\19\FCn\BB\D4|)\A4[\A3\C9\A5A\A5\BD\F4\F1\86\8D\02\B4\170L\825\F3\83\C4fua\09\8C\97iO\CD^%\E0\FF\00\DA\03\E2\87\84\ED\CC\9An\AF\0CI\E1\BD\1E\FF\00\C3\16\8B=\A2\C8#\B5\BC\1B\C6\C0\C5p\C2eP\C5\9B\05B\8CeJ\BF\D8\BF\00a\F8j\9E\11\F0\D6\9D\E2M\1F\C3\1An\B3\A6\DAG\A4\A0\B3\D7\AD\22\96{P\88\D0\A4r\CF,r,\B2\0F \14$o\957+H\85V-\B0S\86c\15\DA\1B\B6\9D\F5[][\C9\EF\AA\DCw\BA\B9\F3\AF\EC\CD\F1sT\D3<K\E2\AF\0C\CD\E1\0D\0A\FEC\E1\8DOS\B6\D6g\D2\FC\EB\BB\1B\B7\B21\ED\92l\11$w\12\98\D5\84\D8\05\C0\C3\1C\98d\F5\EF\8B\1F\17\BC-\A5x\A7\C0\9E,\BC\D2u?\0DxN\E8\8D[I\F1n\9Fl\D2KglaI\A1\D3\84 \B4N\A1'A6\E4\95\C8VU\89>\FAu\DF\13~\1Bh_\0B~\1D\CD\AB|\1A\9FH\16\F0\DE\DD\E8\FE'h\A4\82\E2}R\01 .\CF\1C_\BB\17Q\F9\9B7H\81\A3B\A2?/\E4e\E1\AC\BE x\93J\FD\9D\FC!\E1\7F\08xr\E2\0DN\E6K\9B\09u\B9F\FB;k\BBY\96\D7\CE]\E1\97sG\22\C2a\0A\A5\9F-\B7j\C8\E1a\E7W\0D(Q\A5S\9B\DD\BE\9EM-\15\FEW\D0\13\E5\F7d\B5G\B4\BF\8A\BE\1C|a\F0\A6\A6\DAn\A3\E1?\17\E2\C2V\D2\EDm#\B8\D2\B5\18o\17\CE\8E\7F1&gh\C4\CCG\96\EE\9BJ\C8\BB\81\18\91\BEx\F8Q\1E\B1\F03\C4\F1\F8\A2?\0E\1F\15\E8\9E<\10\BE\92\D1\C5-\B4k\229`\E8\85I\F9\06\EC\B9\00aA\CA\F7\E0\BCY\E3}O\C4>\1F\F0P\F8h\B6\B6z\A4\FAy\B7\D45Km>\0B\09,.-\94[\0BQ,gv\C5\8D\0Ch2Y\91W\92\0E\17\D9\FE\16\FC\5C\D4\FE%i>\09\F0?\C6\AF\14Xi\16\BA\AD\DD\ED\C4\17-\1A\C1>\BB$\8D$\96\CA\E5\00UY\DAH\F0\AA#YT\C2\18\16h\98c\88\CCiT\94SO\9A\FA?7m5\EC\9B\BA{|\8B\94Z\D5\1E[\F1\BF\C0\E3\C6?\1Dc\F1W\8C\FC=\ABj\1E\10\B5E\B8\9BJ\D3\9A+{\D8\92M\A2I\96h\F1\E6\95%\18\82A#\1E\A0\1F\A3\93[\D0?g=6\D2\185\1Dt\F8V\DDc\B7\BBcz\935\BD\C3\8D\F0\0C\9C\B6F\C6\DC1\B4\EF\03<\F1\F2\8F\C5}\7F\C6\BF\0E<c\AFx k\8E\9A\CC\16\E8/\05\CCj\EFw\1C\CB\E6\B8\CA\91\1A`0\04.9\C0\18\0A\B4\DB\9D\1F\C5\91\FC\1A\B7\D7\AE~\D6\BA\1F\89m\A32\DD\5C\93<l\D1\B9u\D8\D9&&\0C\A4\15\EB\80x\CA\A8<\F5\F3\08\C2SS\83rW\BF[.\97k\A6\DA\8D-9\91\8B\FBE\EB\7F\08d\D6f\F1\0F\C1\8DFE\8FW\BB72Z\012Gj\C7\E6\90\04\93;T\B9a\B0p\0E\ECq\8A\E2\AD\F5M-\E0\8D\E7K3+ .A\1F{\1C\FE\B5\CD\D8\E8v\FA\CC\1A\84\CF+F\22\965\0EO\0A\A5\B0\C4\8F\A63]:\F8#\C1\B1\01\19\F1\CD\BEPm\E0\8Cq_5\88\9D\1CD\DC\9A\E5\F2_\D3\1Cj$\BD\E4hx\8BD\F0\EC\DA\FE\BD\AF\DB\C7}v\FA\143\D9j6\80,r\C1; \84]\C6\1CbH\C5\C3\10\F1\FC\AD\1C\8F\B86\D9\03/\A7\FF\00\C33\FCg\F0\B7\84-\B4\81\AFF<\0B\AF\DB\DBk\17\D70D\B761}\A6(Q\AE\15#o2\E3t-\1Cp\BE\E8\C7\EFH\DC\8C\ECOU\F0\9B\C0^$\F8\EF\E3s\E2?\8A\DE\0F\D2\BCg\E1\D1\A7Z\E9W\DA\9F\9Fqc\A9\D8\8Bv\91b\B9\83\0Cf\95\D1\DAHK0\C9\8A\DD\17\92\BE[}W\A9\DD|=\D0t%\F1&\9Fq\AC}\8F\E1\D6\B5\A9Y\BD\B6\96\A2\CE\0Bx\84\9B/\8D\EA\A1+9B\AF\BB\04\0C\DC\B1\95v;\13\F4X\5C\05\E3*\94\FD\E8\B7\A5\9D\B4OU\D9\AD\F6\ECe\0Fy\DD\BB\1F\9D\BA\97\86\F4\AF\0F\FCo\D6\FC1m\E2KX\B4m3V.\D7\9A\B5\A1x\A6\8E9\BE\D1\E6\CBn\84\99#\DF\13n\0A\C3\F7{\B3\91\95<\FF\00\85\BCY\E1/\05x\F6\DF\C5.\FAu\C5\AD\B6\A3\1E\A7x4\DD\AB\05\B4\B0\DC\BB\C5\1D\BC2\A3\06\0A\C69U$\12!\87pq\94ll|r\F8\BBs\E3/\8A\1A\CC\B6\B7\16\17\F6\10\EA\DA\8C\B6\8Dnd\B8\B7\9DRi\13z\97fa\14\D1nc\FC;]I\1DZ\BE\BF\F8\11c\F0[\E2\AF\82\FC\03\A7^[j:\B7\88\FC*~\CBk\ACjJ\B6\BA\B5\94+\14\A0\B43\08\1A)\92\22\1B\CAG2\15\F2\B2K\BCjB\C0a\AF^q\A3-\22\EE\BE\FB=/}?\22i\DF\E18?\89\DF\B5\E7\88\AD|\14\9F\0F\BC\15\E0\AF\B0x\A3]\BF\9A\F7Q\83T\B33,\FAu\D8\DDmv\AD\03\A4\91\5C#\14\81\D6BWq&0\CAvG\B3\F0\83\F6\BE\D1\87\81c\B4\F1v\AB\A7\F8~\EBF6\16\B3XY\E9A\AD\F5%x\A5\8E\E2\F3P\88!\CC\B1Lb\90\C7\A7\B47\13\CA\E4\BAl;\E0\D1\F8E\1F\C6\FB\F7\F8\EB\F0\DA\F7\E1\F7\855\9F\12\DCj\0F4\96v,[M\92{\BD8%\893\19U\E4\B6\95 (\9F0e\F2\E52\FE\F0\92\BE5\E1\BF\D9\E7\C5\B7\82o\05\E8\B0iz\D6\A5v\91I\7Fk\7Ff\22kK=\CC\B2^\88\E4\1Ed\8B\1C\8A\B1\AE\C0\AD\BEdwX\95\B1]\15\E1\8B\A7(\FDV\F2[[kk\FDm\F9\1A7\AD\CB\BE?\93\C2^ \9F\5C\F0-\B6\B1u\AEi\B7\9Fek\8F\14\DD\DB\C9\0D\D2\DE\86P\B0\A5\B9(c\91mb\86\09\8B\87\91v\CF\08'1\AC\1E{\A1\F8\FF\00O\D0\BE%Z]x\F3P\BB\F1F\A4\B3Ci,\AA\D0%\8Ai\EC\88\B2C$1)\8Cl\8DB\18\D0++\AB.U\94\14\E8\BE\12\E9\16\13\F8\8B\C3\BA\A6\BD}w\F1\17[\D6$m\17J\D1,\EE%\B4\B7\96\F2e\8E\D2\07\B8\D5.\15E\ACB\08`+\B0K#\83\82\109a\EB\7F\0F\BFf\0F\01k\DAF\9F\E3\0Dg\C7\11\F8v\DAk\FB\AB}b\DE=z\D9\ACmZ{\B9\A0\B7\F2\DEEK\88\97\CFkr\AB1\DE\EB!G\D9*\18_\9AXj\D9\8E!\D4\82IG\A3v\DD\F5z\E9\F7\BB\5Cm\CDI4p\9F\B4L\D6\DF\1A4K\7F\1D\F8\1Et\D5-4=:\DBQ\BB\8AV\8A\19\ED\1Eg\9A'\B5D\00O*,P\A4\8E\8F&\E8\FC\E8\88/\92\AA\9F\06\FF\00i\EF\86\F3\E9\93\FC!\F8\89\E1\8BX\BC?\AC\A2[L\EDq\04V\B0\CAT\01(\8A\0Bx\8Ce\9D\E4b\E6F#\E5\0B\B7\15\85\F0W\C0z\CD\FF\00\C4\AB\9DM\F5K[\BD\17N\BC\D44\D5\8FV\BD{\08\B5;t\9C\C2TO\83$\8C@$\AB#,`\B0(w\15\AF\A0\FE*|\19\F06\A1\E2O\16x\97\C2\16\DAe\96\8F\A5h\10jW\1A\B4\D6\90\B6\9Fr&3\AB\B5\AC\FB\85\BF\96\BES,\9F\BD\01\1D\19I\DB\90j\8F\B6\C5M\D4\83I\FC-=S\B7Eu\B7M\CB\A74\9D\E4\AE|i\A2\D9h>\1F\F1\C6\A3\E1\9DKN\B9\BC\F0\A4\B7\93\C0\93\99\95\84\A03\18\D0H\BC6U}\89\EB\C5t\D2\F8\AB\C1\91J\F1\DA|9\F0B\C0\8CV%\97Q\888@x\0C3\D7\18\CDrwShv\DAe\AD\87\87\B5\18o\D2=jb\F7\A2\DDbF\90\A32\C4\02I\222\8C*\EFV \EF?\DD9\E6W\E0\ACZ\8A\8DA$\D5Qn\87\9C\15lr\00np\0Ey\1C\D7\CB\D5\A3\05^q\C4>F\9FGu\BF\935\E5\E4v\86\D6Ok\EEwZ\7F\EDC\E2\CF\0E\FD\A2\FB\C2z\80\D3u;9\A3\B3[x\96H\A1\D44\FF\00:96\F9\8A\DEnL\B0\A7\98\85\D7zH\FB\B7|\CB_[x\EB\E2\B6\BB\FBA\FC9\F1\F7\86$6>\1E\D3\A7\D2\B4\F5\86;m\5C\BD\E24\862\C8b$3\C4\B3G*\17\09\1Al\94\A9F\12\B9\87\F3W\C5\96\D0\E9\1E(\D5\EC\F4\E0\F1Ei\AB\5C\C1\0F\CE\CC\CA\91\CA\E1\06\E2I8\00rNx\AFG\F1W\8E<K\A3|(\F8i\E2\CD>\F6\14\D5\A7]G}\D3\D9\C3#\16\8E\F2\E1Q\F0\E8@u\120\0E\06\E1\C6\0F\CA\B8\FA\DC\1C\1E\1E\94\A9\D3\D9kn\8F\A3[7gs\99F\D7G\0E\F7\EF\A7\B2\88l\A0\86\E2\13\22;\A4\8CX\1F\99J\19\14\ED`F\FF\00\BB\F2\B2\B7\19\19\07\DC\B4\9F\8A_\19\FC#\E1\8F\0Cj\B3i\D7v\9A5\95\C4phS\CB\A0\BC\16\F2\DB\B2\CF\89\8C\B1*4\DB\D5\AEB\E6BY\BC\D2\8A[\CCj\F1\ED*\CA\DBV\F07\89|A\A9\C6n\B5/\ED\0B47R\B1i\08\9AW2\FC\C4\E7,FI\EB\C9\F55\FA\F1\FB.x3\C2\9F\13\7Fd\AF\87:'\8E\F4\0B=_O\F8\85\15\FE\99\E2;ic\0B\1D\F46R\5C\C3h\DBS\02)\A2\8E\DE\DDRx\F6\CA<\88\8E\FC\C6\A4pP\9DE7\1AN\DD\1F\E0\D7\AE\B6*\14\D4\93g\8B|3\F8\BB\F0?\C4\BF\B3\DE\8D\1F\8F<O\06\90\DA\95\EE\FF\00\14\E9\BAN\9Ds\15\C6\9B\22j)\9B\D9\EEm\22O.<\CB\04\D2\CB\88\F7<\FBQ\BC\C2\AE\9BZ\BF\8D>5k>?\F1>\B7\F0\E7\C4Z4zM\96\9Bm\E2\1B\0DRG{\8D?\C4\17\82&h\AD\C4\F7\12\C7o\1C/\14R,\D7^c\15\F3\90\0Cob<\07\F6\8F\F0\AE\8D\F0C^\F1\85\9F\C2\A8\EE\FC;\0D\B7\C2\FD*(\D6\DA\FAv\F95\0DS\EC\97\AA\DB\DD\B7\89afR\1B8c\BCa\C0j\FAO\E05\85\BE\8D\E0-%4\FF\005!\B7\D3|oa\15\BC\93<\B0,\1An\BFg\05\92\F9NJf8\DEA\BB\1B\98\BB\B3\96f$\FB8:\8E\A5G*\9B\AB'n\BA\FF\00\C1\B9J-\FB\B7\D8\F9\CBE\D6\FE#|$\F1\B7\8B~(|=\F8qi7\87d\B0\D5\AF\F4m*\EBQ\8AX\F4\DD\08$\91\A3\C3\E5\B1w\8E\19dYf\B6\8F'm\BBE!\1EZ\C8\BC\B7\EC\E7\F1\C3\C4\B6\9E9O\16\FCK\8EMkE\D5dkKa-\9D\B4p\C7*\5C[L\D3\C4\1B\08\B2\A9\B5\85\9As\CA<0\B1\93x\DD_\A1\BA\BF\86\B4+O\8CV\DA\AD\BE\9B\12\5C\E9\DE\0D\D4-m\9B\92\AB\14wZd\88\85O\CA\C1]\98\8D\C0\E3s\0E\84\8A\F8\03\FE\0A\0Fikc\FBTj\90X\C0\96\C9\A8Yi3\5C\88F\CF2G\0F\0B\B1\C7s\1C1\A9=N\DFRI\BCm9e\EB\DA\D2w\8A\96\CF\D3\CA\DD\CC\B9\A4\9D\AEV\F1/\C4-/[\F0\DD\F7\89\A5\BC6\DE\22\D5$}CR\98\EE\9E\DFMiT\ECX\D5\DBj\DDJ\C0\05n\91\A8\DF!\DD\B1Y>\1D|~\F8\A1\A3\F8\07\C3~\1F\F0\D4^\1A\B7\F0\7F\84o\AE\BE\DD\1D\FC\B6\B6\F6\BA\A4W\1B\D9\AC$\86w\DFu\0E\C9n\01\11$\B27\DA0\E1\D9\93w\85\F8\8FR\D44-Z\DA\1D\1E\FA\E2\CE8\D4\00\B0\C8Ts\C9'\D4\9C\9C\93\C9\EFW\EE/&\D7t=kR\D4\84oua0H%\8E%\84\80f*wl\03\7F\03\F8\B3\DC\F5&\BER8\BA\91\93\C4\C5\D9\CF{i\BE\BF\99\973VH\B5\E2\1B\9F\09=\ED\CD\8F\86t\D3\A5\E8\E6\F1\EE\ED\AC-\E73-\B9n\06\E7 \09%U\C2\B1\8Cye\95\CAnR\09\F5\1B\1F\DA?\C4\96VV\F6v\FF\00\0D\B4\C6\8A\08\92$;\E3\5C\AA\80\07\1B\B8\E0t\AE7\E2/\86t\1D\1FA\B4\9BL\D3\22\B7p\96\E8Y3\96\049\CBs\F3\1C\A8\E4\E4\F5\E7\93^\CD\E1\8F\02xZ\F3\C3zM\DD\CE\9A\EF4\F60I#}\A6Q\B9\9A5$\E06:\9A\F01R\85G\CD5}^\F7\FD\19\DDJ\B5X\D4\92R?\FF\D9", align 16
@hana_bmp = constant [3 x [5310 x i8]] [[5310 x i8] c"\BC\D1\BE\99\8Fg\95\C0\AC\9D\BD\C0\A4\C3\BC\B5\C1\A7\BC\D2\B1\8E%\0A\1F('4 \1D\22\0E\0A\12\0E\1A\07l\B5\BE\B5\7F[cI$\0B$B]ZA3 $#&58#\19\19 1)6 \1F\1F\22\18\19&+ \0B\09\0D\14\19\17\11\10\12\1E\19!-$\1D\A6\C1eZ\AA\81\92\D5\A9X\91\C7\CF\A5\89q\C9\9B\8B\D1\BF\C9\ABg3\1D\11\09\1D+!$\18\0E\18\18\04l\B9\B4\BA\BC\B7\C3\C0l0KgUE1.7,*23)\1E\12\0E\1E006\22(&$\1F\1C47-\0F\0E\10\17\15\0F\0B\11\19\1F\1A,I\22'\91\84.\B5\CD\D1\BB\AA\8C84\8Ez\B0\C6S\9A\D7\C8\D1\B8\A4\C4\AE\807YL\1C&/.#\1B'\1F\10:t\89\A9\B8\B4\AF\A6xI[aT $>:()0- \14\0F\10\0C\1B\18$(\10\22\18\16!=A7\12\15\16\1D\13\12\0F\15\1C!\1D0K$&o\0F>\E2\CF\BB\CD\BC=\02\0D\1F\09i\8C1\18\BF\D1\C6\BA\B8\93uY:\8A\B3\87>43\17\14\22\1C\1A\0A*p\97\9D\8Bzq6OT`.\13 5:(('&\15\15\11\17\06ne\0E\12\07\0F\1B\07\1B@F?\16\1E &\16\08\0A\12\14\1A\1B+:,(\8B\8C\81\9Cq\B1\D7\AEoe$\0E\14\8BbjQ%a\DF\C8\D9\95\99\94\83F\92\B2\AC\83P\0D\11+\10\12\14\18b\82\A3\90UGQNXD\1D'8;1()'\14\0B?P\01Y\B3\BA`\00%\0F\15\14\1B@LI\1D\1F!+\22\0D\0C\13\10\10\0E\1C&<2\B3\C4\D9\847y\D5\B4\B1\B7\AEf\A1\B6\8C\93\C5\CE\A4\D6\D9\AF(\8D\AE\B7{Daw{~1\15'\11\17\1C\0E{\95\C2\C1_KIF?;207:*06 $\0CU\9Fn}\B1\BB\89\196:7\12\13;ML\22\1E 0/\22\12\0D\0D\0C\05\0C\1249\88\86\AF\D6\86\A1\BE\8D\B1\BD\8D\A4\CB\B3\B9\90I\8D\CE\94\B5\C0qE\95\B0\8DtS.epO\1F\19(\1E\1A\0Cb\A2\C3\D7z7A=D@.DACP8$,/\1B7\B1\C8\AF\A9\B2\9Cr~k=.2<NL.*0;:-\19\14\16\1A\13\13\0F8:)r\C4\C3\D0\C5\BA\B0\AE\CCy\88\D0\CD\C9V\0C\BE\B4\B1\94\B2\DD\91a\92\88\99\A9\8A\93\BF\A79/\A8|!\056\BD\B4\C5\BC\88D6?2NSJPZ:,<-,\12\80\C2\B0\C9\CB\C4\AF\8Ek=,=JVS>@GH??7941'$\18=9\13K\C2\A5\A8\BA\C4\BB\CB\CFVA\82\C0\D6\B8\90\AE\B4\D1\93Llt\9B\9A\BB\AC\B3\B4\BB\C7\CC96\A5\7F/ZC\BD\B3\AA\D6\C3\9Fg( @aB55CM./'\0A5z\97\CA\D5\D6\BC\A1\91j<:N]aefVUG927664+(\15\16q\0B.Bh\8C\A4\A7\B1\D2Gsi\BE\A3\B5\BB\B8\8E\B1k\CF\80qy\9C\99\8F\A1\9A\A5\B6\B67-t*4x^}\B4\BB\BA\C7\BF\BAN\00+`vR\13LLG7\1D\09\08;o\A8\BD\CD\BB\A6\8Ao2)7L^kte\5CH32/'+%\1D(\19\1BdD3.8Q\5C\98\B0\CAG\8E\CF\C4\C5\90\B5\B5ixO@\B3pfa@?3^\B4\A4\93%D\A9^da\8A\01D\B2\B5\AD\A6\B6\A33w\A5\BB\BBA'ORG\0F\0E\0A\0C@\90\B9\B0tF<)'\19\17+?VnndK1\1B \1B\12\15$%\1D ]>\22\1FG>f\AF\90j:\C9\AA\BF\BD\A7n\AA\AE\86yT\A1xU>@+\09N\BA\B9\AA\14d\B4\9F\B0\AC\BDdj\A9\AA\99\B4\BD\BB\BF\96g\8A\9B}1M=>H\17\12\15\1B'RP55GT:!\04\12#?exkF'\1C\1D\19\1C\18 !\22\1Fb; \11\22\1CEy\1A.L\ACk\13\8E\99\88\92\D6\A5\BB\CF\B3~?Q&-&a\AD\B8\9B\18d\CE\B0\C6\CE\E2\98k\81\99\92\BC\BB\AA\B3\B3|\9B\B3\9A]IAQB9\14:<$/8\191JZU,\08\0C\180SzxW%\1D\1C\17\17\14\1D\1F\17\14a3\09\0F\0E\10\17X %K0\12\11\18\C5\C8\AA\C4\BF\CA\CD\B6d8#\1Cq\5CG]VV\22N\BA\C2\B6\C1\B4\A5NVz@i\C3\A3\94\BC\94\96\96vx_IMKF?O_@R;\1F\14+F]T\1D\1D,>Npx],\22\22#\11\11\1C\14\17\1AU:\15\18\1D\11\0D\1F\0D\15Y\1F-\13\15\92\E1\D2\CE\B9B\A4\B7\BF\95<Bw4J7\8E\9E\14K\9A\A1\C9\93\8A\B6\8FzT\15t\AE\AE\A8\C6\80IN\A6\9FNI5$q|X\80\7FjB\09\17\14)JYA4>I?[ob6F=?<2\1D\16\19\1C%P\19\17\10\04\0B\16\0D\16V\1D\122\19\08w\A3\A0\B9\A1\9E\BD\B3\84wt'\81\AB\89\B4\AE\13u\C2\C0\C1\AE\9Fw\A5\B1\A8,y\A1\B9\C8\C2\A7RR\A2\A2J37\0Fc\9Cv\7F\B1\A3H\09\0D\0A\05%GMFm\8D{\85\89uIOESPRC/\1C\1A\0DM\17\12\0F\10\10\22!\15U\0E\00%,\00\B3\E1\BB\CE\D1\8D\95N9?H\81\9F\A4mas\1F$[\19]\D7ld\B4\B5xDR\A8\C3\C2\95\B9\B3\83H\83K7. =\90\96\81\C4\B6yWQ\06\05\14&8d\99\AC\CC\CC\C6\D4V A3;9;43,+\1E \142F1\13\1A(EdK2(\12d\C0hdiv\83\81*L#I|\92h\01\1CKb\C5\A6\B1\D4\C9\AF\AE\C0\8Ec!W\D8\BD\C1\D1\B9\BC~~\5CV:#\1Ct\AE\B5\BC\B4\A6\88V\10\01\00\06\17?g\88\AE\C0\9B\C6\AD#\10*3(&:+,\1A\1D\19\0E%K#;\13;=e7QO\1D0VmQB\BB\8F\B6\8E\0D\02'N\90i\1C\22T\1B]\FD\A9\F2]\D8\A1\9B\C2\E7\8B\07[\CD\CC\E2\B8\DF\EA\BEp\5C+%\14\84\C2\C6\CB\AE\8A:\07\00\1Afn[yx\84m\AB\A7\A5\D9\B0RMD3\16&,,\05\16\1D\1D\07c\1E\8Be5<d\87L@ $36Wo\93\F0\BA\AC\CD.\00.\15\0B>%-\1A\00.\C2\BA<\EFb\8C\C0y\13\B2\A4^\B7CW\C2\C2\C4\BES\22 8U\AB\B6\AF\CE\99=\01\06@\A1\C6\B3\AC\B3\AAp\A2\DD\BF\B9\B5\88ZV9\1D\1B,+5\14\0C\12!`8\9C\8B\84=/uqe$\1B\05?\A6{\15\A3\CF\E0\B4\81\D4\9F\C1\CD*\143\17\1B\110\F04\B1\B1\95@\01\8C\BA\B4\CC\D3\D5e\BB\C6\96:p\81V7?MJf\92\9Ac50\1CW\B3\B1\AF\B2\AFt\86\9D\B2\C1\B4\94}U\1C\14\12:;\1F+\0AG\B1\92-\99v\B8\8D3\1B8M-\1EH\91\9FZX\A8\8E\B7\D4V\AD\CC\C9\84\00!1\15\09\00}\BE=Q\B1_H\17\0F`\AD\D6\B4\E5\DA\BA\B9\DFH\92\A0\81V>NB]oqZIRJ\03B\96\BF\B5hxZtr}\ABz\84B\15\19\1B;<%!\0D\1A\C9\BF4\AA\89\BD\D9\D0\98\1Ao(\0A\94\A9\A2\99\86\CC\CB\AB\92=e\CA\8E\00\09,6\13\0C\00$\A7R\1C\D9{f\0C5\17\00/\00\C3\C2\BC\AC\B0\AE=e\9D\88m(,}\92\93\80MaqS6\AC\BE\A5\9F\BFUA?!-?<!\15\13\10?=\22390$\89\18zZ\E6\C2\D2\BEP*3\12\95\D3\9F'{\AC`?\09J*\94\E0w\0054\1E\00+\BDu^%\9F\9D\D6g\16\1E\0D:<,Cd\A8\A3\B36\8B\DB\C1qD\8C\8F\8D\A5y~W\92|_\A6\A7\82\9C\BDl*+)\11(\1E\1D\17\13\12=<\0D#^z2u\CD\AC\93l\DD\BA\B7\89&%\1Fj\D0\9C\12\AF\E5\8B\00irc\0C\92\8D\A24*\00>\B1\BA\88^ {\92\D2\C1l\A8\91\08\C1$=E=\A6\9C\CB\7F\C3\E4\92\A9\8DZ\88m_bZ\99\8FVRa`c\7F\84&.$\1E\18#\17\19\1B\0C\10\1E\0E\00\04\16r\99\9E\AD\BC\BC/p\F8m\CD.\22O\B5j,\B6\C9\8D\00\96\AC~\AA\A0\86zk7\CCm>\98\EB\5C&\86e\B7\D9\94\98\9Fs\BF\B0\9B\90_>4\BA\92\D8\B2\FB`I~\8A8a7gx~I0\2290\8D\8A9!\22#\17\16\1F\1C\14\17!\1E.\01\13\1D\1B|\A4\AC\CA\DA\B0d\18n\BD2,%c\1D\1Fb\A40G\C5\99\CA\A7\9C\C4\C08\80\D9\AF}\991j\0F\80\EF\B6\C3\AB\5C%nVv\94b7\22\1E\150\E8\D1jWk\AC\1EGVXH>1B.@PDLo-*#\22\1C\1A1+\16\1D  \90)\00\15\02\00X\A0\A7\C0\A8W\00\A9\EB2#\16\0Cb\00\17=\00G5\F0\90\CE\B2\BC\E1\C8\A7\CE\DFv\0CKm$Q\E1\C2\90\B6I  p\A7]2,\1E\113+]uqI\D2\A2cWWA\22\22\16\15#Hgc:8/-(\1A\1E\22>9 %\1E\1E\B7p\00\08\0B\1A\00w\CD\94\D2\00<\E1S:#\1E\06%=\07i\1F$\07Y\E5\AB\AC\C3\DB\D3\AF\B1\DB\90J/j%2\C2\BCdS\19@1\BB\AF\84\19+\19 0\1EJlZ\8B\D2\C5\83jO*V@#$&D]Wg6W))\15\18\1D=:&7\14\1E\91L\05\0A\02#\00\91\BF\D7;\05\96\B3\89.,\18\09\18F>\15\0BA\8DW\7F\AD\8B\A9l\D4\B5\96\C2\CA\9AR:P<Y\8DT\00hh\1AR\A1U\0C\10<LH\02R|a\A2\F1\B9t\91*1XD*\14\1BAUdO]:L\1E\16\15\1C=:%A \1Cc(\05\09\0B\17*\DC\C4\FF\00\1A\E2\A4\82n\1D\1F\00\1FF)%'f~\9C\D1\9E\D7\F9\E2\DE\C3\E8\E2\CA\A3]?T3\83\9D\00\8BKr;\0B|^\1CEna/,\91hc'\B5\BC\B9\B76\12'.C-\07g\A3\86mMK(\1A\16\18#>@%2 \1F\87h\0A\02\14\14\1A\00\1E\0E\15O\88le&8\16\19\1FA=\0E\16;w:RbJ)\9D\C8HR\DA\9D\A6yRq\11\9E\D1\92\7F>~8\07FbaIIb\04\A6ju*%\01\B6\CB\B2<\1E\19-7)\16@\B7\C5\B4aB'\22\15\16(8D,\1F\1F!U >\00\14\11#,\13\17\00\93\D0IU\0EF\09$%:N\17/\04\0B\14\03>A\12\92\C5\86o\C0\DF\BA\A0\7F}<\AB\D2\D4\CF\A8\AE\90\BF\00\94x#B\1DO\B6_G\19^rG\A6\BF\93`\18\14/\1F'(p\A8\D1\98M'\11\0C\1D3AJ,\0F\07\15QB\0C(\00\0DZ\18\13#\01\95/\5C[\07D\0A,\1C\1C_\00\A0j\0E\1D\0CE+\15\F5\BFz\C3\E5\D1\CF\9Ba\8A\FE\AFv\F7\D9\D9\B7^ksBf\8A\0D\10\9C\80/\16\0F,\A2\8A\9B\A5\A7\ACX\03#\1F\87\86\B4\9B\C0\BE\A55\09\11\1C5KNF7\1E&9q\07!\0A\1FE\17*\0D\1C\08\017\1B;=\1B)!\0D%(\84\8F\08\16\10,XTH\98\A8\AC\C1\93\C9\B2e\00\E0\E7\FA0\03\C1\E9<N!\9F\8F\D4\002\00\09\0BK'AC\C6\C8\918RO\142S'i3F\B9\D2\D0\BD9\0F\19);HPp\1F$@ra\00\18X\95\1C\0F.\10\096>\01\00n?\10\1B!8\17\11\00+.B>\0C\7F\A7\BD9\FB\E3z\02\00\07D6_P\F7\A5\D4@o>\DB2\7F+S8$\111B{oy\91\7F\AF\BBT`_\0F!8\82\82\CE\A8\BB\CE\B3\90-+\1B\18Knz#\1D^IK\86\0D\22PJ\0Byo-3\1D\22\BE\D5z\11\19\19\0Bns!,B\0A+\05Bs\859J\F4\82\00#\10\14Y*<\E6\DBN\C5\EB\8B\93.\0AzuoZ68CR:\10\8B\91\9E\D2g\12%0# %\09!#x\A1\AFyD.\0E\168gzG\5CWS\00\5C\7F\14,\0Fv|yP/S\95\8C\B6A\11\1A1Af\BAt\16\82\0D\00?(7\18e\0A\1C\82\02\15.\08/:z\FB\13j\D0\B4\D4e\067\5C>}AY'\22\1E\02!oVw\D5\00\A3]\11\19#\1B\1B%#?i\AA}2\18\02\10+RNbaX\12\1B\00o|\17\22\8F\D7\9C\B9\9F|n\5C\A1@\16\0F;BAN9#\16*\0CX\00\17!wS+\00\12 6\1627\03%\9D@\00\0B\92\16BcD\5CNF\A7\1A\18\07\0C,<\05W\904\C2\AAU\19\1C\1E\0F\19\16\155|~R6\0C\1C$8=gk\87\0D\19)\18\8E-\1C\13\F3\CA\BA\AA\EB`o\8CP,\08#\15d\14\0F\09\00\0B%\00\1F\01g\8Ed\00\0CV(h>\0C\14023\135\8E\13<TdC?]X\02)\16\16\1C*2(,#Vx\8Bw9\12\14\08\02\12\16\07&3C:<[&0Gjr\A8\F8F\14)\00\138m0\D1\BD\9Cy\FB\AC\CAu\82s>\11Q\10+\BF\A5C\02\120\B2\A0r\00\8F\CC\BB\A9+($.#N9\06\11V\B4\1Eg\1C\17sb>\14A:7HVRQPA\179\5C\9A@aN:(!+['\19\0A IH!18\0C\00N\8C\BE\00\5Cl\12\0D\8B\C4\C7\D7:J]\D7\AD`:U_\151R\00f\DB\BE\96\03\97\7F\9E\9D\00\CD\DD\AD\BCg+0$H[{k8\09]\02X\0EQ`I<\14>-6D)9\1F\18<Z\084S\81\C3\81]NX\83lh4\1D/YM34T\01\03ZF\82\01\8A\C1\CC\85\9F\AF\B8\DCMg\B6\B9\D1\83h,0-\1AJ\16\00\88\DF\BB\B4\A2D\E291\A9\98\D6\D6\B2\152,<5Qg=& \162\02C\AC\B7\B1\1B#\17\0F\0ErP(-\1C\0C\09V\AC\AF\B7\B7}W}X\82Z;\12AoN%\22<\01\05\0C\1E\08\11\17|\C4\DF\D4\92y\C6\E6\E6\A2\D4\83C#'\0E\1E\11&+\BA\C0\B3\DA\B8\D8\F9\1E\16\05+\AD\A5\9C\005\05:4Dg\1F)\0E\10P \0Ec\F8\C3Vh\BC\CAWR\B6\8CY\14\12\12/0l\E1\B0\C6\CEbauZG)\0E*c5\1D\1C)\07\00\1Ff\1A6\09\00\9C\C5\E3\C7\CB\C8\EB\C2\8A\CA\9F\0E/ \004$\0Cl\96\A4\B3\B3b\9D\CF\01\0E\00gv\98\9F\00\22\99`M\7F\12\04g\13\1AN@\A1\E54\00\00D\A9\82\E7H\D0\C5|\05.]/GT7\E5\CA\CCaq\96\9A\88\8A\84}4I\16K)\16\00YK8IL\88q\E2\B5\86\B0\D6\D6g\96\87\D5\00/\12\05\0F5\18\1C?\7F\C6\C5\AB\A1\DB\CC\1E\00u]n\9A4\95^g\8F\91\00\7F\92}C\B3\B4k\00\09Y\C3\00\D1\9A\8C\C3\97\EB\A9\02-1G\9A\94\B0\BD\DAkG\BC\C7\97K5PJ2D\15D8\04\0B !M\87\C5\C0\B4\93\CF[\93\8D\C3\B6ad\93\01,\14\0C\0D\08! \19\1ERs\96\D2\C0\DF\D6\00-\C6\B1\B9\DCW\5C\844\A9\BA\9A\A6:)X-\14\18W\FFR\A2\BE\E6\D4\C0\C1\F1S\13.>\81\B4\A8\B6\E4\EDe\07\AE\BF\AB\A4mC\0A;<\1B\1F6\0F\0CU\1F\89\5C\AD\CA\C0\BC\EB\1A[\DD\9F\D0\B5\18\0B\13\0C\12\04\0EA\19(\1AnL\86m\CB\C0\A0\ABC\00\F7\C7\D4\F1\A6\8D\8DJ\1C\D9\CE\BF\0B@0gd<<\E6{1\83z\AE\D7\00wh\00k\88W\5Ct\82Ob\F9\82\CF\D5\A0\00\00\13!:M)'?\11\12WHxYJ\DE\DD\AF\B6\D3\DF\AB\E1\C1\88\08\0C\0B\0F\00\0D\01R\19\22-\AFP\9B>\A3\A2\85\00\8D\AC\C0\C8G\92\F8\C3\8C\B5\F0\9D\D8\D3\02UqY\1A\A0\E0\A8\99aQ\C1*\C9\03\D1\BEZG\81Y??j\04\04\D2\B1\D6\9C\EC&\0B\07\19_`)1=@\816|g`_\B9\12\93\D0\B8\A0\B9\A8\D1\00\0F\16\07\15\1A\1B\15\04\1E\18\8D\A5\BCm-~y\8F\B4\BA\C1\E7\A4D\08\A4\C1q|\8D\AF\A8\E3~$4\00\A0\88\BB\CBj\AAR;8\CB\E8\AA\98b*,Ob\849\0BX\C6\C1\ADV\A5\F6?!\0CI8*)1z|miQT\16HA\94\C3\DC\B8\D3\87\CA4\00\0E ./,\19#\1D\19&D\089NY\87,\8B\A5\BE\AA\CAY\C7\C1\C8\88\80\9Bb$\C5\EA:\00%Hr\EF\A15\00\13\00?\A3\9A\B8\96Ybhf{J\07Y\06~\E88\11>\C6uiC%\1C+2\1C\83\8D/\1C#[F#\10\16\CE\BCAT\C8\8Em\1A%\15\06\1D\05\1E\0F\11\1F\0B\0B+>&\08\14^f\B2\A1\9C\92\EB\AD\9D\87ob\18'#&\D4s\000?\14\EE\00\05\0C\01\12\22\86\8F\CF>Ua}\9A@\004\09#:d\16\13\19f\D61. 74.1\8C\89;\17\08Wn\00\17\02\1A\A2%Y1\BEvO\03\0B\11\15\15\0B\15\04.\11\17-3.\1A6\00\0D\FE\E9\B8\D0\96\F0\A8\90S\08\04\EC\CC\06\B8\00\22;4\0F\00\19-\03\0B7\1Chv\B6\1BD^\9E\82\0Av;\1E)?\15\12+,\0B`\07,33-35m\93D\00\01\00[A\07\0AKoJ\18\C7\8F\8Dc\00\0A/\0C\16\19\10\10&\0A\05<Y\08\15D\127\EB\DB\FF\C3k\FF\D3\C0z\0B\A3\A6\B2\17L#!O\190\0E,\0D\0D\13\07\1A<GS\1B3\85{\00]h\13'  \1F\00\02\15h\06\8C+# *!6\88\90\13\18\06\00\02/\04\13EXb\84\DB\C7atS\00\12\12\08\14\1B\0C\0E\0D\14C\04\0C/\09\19\10L\ACU\17\19b\C4\B8J\13\B1\8D\DA\F2[\BB\80Uk\D8\5C\00\10\0F\0B9U\125\92\17VU\03X: 3\1D\10\0A*\C8\9B\A8$a\15\16\1B\1D1*\1D\98\9D\1A\0B\0F\0A\0C\0C\0A\19PPM\1B_\A1sh\15\11\0C\0F(\0E\12\0D\04s\D4m\C0!\1E7.\1B\0FO \DE>\08\06\8F\A8\A0\AC\B2\B3UUA\CDx7\89\D1\0B\0E\00Mx\22'K1)4\12+[C\0E\0F\06\16\1Ak?\1C\00' \18\1D\14 \1F'-\98\9B\0F\0D\00\00\0E\0C\04\22>5]8I\06'xn\00\10\00\00\09\0D\00 \BC(\CF\F3\E2\00\06\0E\14`/\18\B3\F8+\06V\DC\96\B3\CF\A3\A2\8A\CC\D2J+\C6\A6\BE\D3\AE\074'\228\1E\1F\0B3?7;WSF,2\1B \22# &\1F!\1A;9-4CI\00\00\06\03\0B\08\02\05,#\AA3L:\8DR\0F\00\00\10!<\05\00<\AE\C5i\E2\F4\F2\00\00RA\1B\10-\A4\00\00\83qqH\D7\BF\CD\AE\C7\D0\89\00\CF\AF\EA\D2\F0:#\1A\22\19\14\0C8<\12\16\16\1A.B^OV\1E\10\12\1D\16PM9\1E8&-FL[\02\04\09\12\01\03\04\00\00}c\1A\02\00\00\07\06\06\1C`>\04\16\1F\1D\F9\F9\D1\A4\EC\EF\A4\CE\AE\07B\A8\00\07\8C\00\C1\EF2\DA\B9\97\CF\D8\AD\BDK\DC\CB\A8\E0\CD\80\00'\14\03*34,\17\0C\0A\0A\14)\0A!\22>D\19\12NVUEQ1%#S[", [5310 x i8] c"\BF\D5\C2\9B\8Fc\93\BC\AF\A1\C1\C2\A4\BF\BA\B1\C1\A5\B9\D3\BC\92/\12\1F&$5+!,\16\13\1A\11\18\08k\BB\D2\BE\87^aJ#\118TjbMC.( 8B@/)'$.*7!!%&\1E$',!\0D\0F\11\1A$$\1B\15\13\1C\15\1B&1'\A7\BFbW\AC\88\96\D4\AAV\8E\C4\D1\AC\8Dp\C8\97\88\CF\BE\C6\ADj2\19\0E\07\1C(#'!\18\1D\18\01j\C1\C7\C3\C6\BC\C3\BDj8^vZI=?F4-A8-*#\1D&36;$/2-&&:</\16\1A\19\1E\1F\18\12\13\17\1B\13%A'(\8D\81/\AF\CA\D9\C2\AB\8855\88w\B8\CDT\9A\D6\C7\D0\B6\A2\BE\AA\806XK\1A$)*.&/!\0D?\83\A0\B4\C3\BC\B1\A3}XrjZ'0NH.)93' \1F\1E\12\1B\1B*/\1A0&!*@G>\1C#$(\1C\15\12\16\1A\1F\19.H\22\22p\0C=\DE\CE\C5\D2\BC>\00\0C\1B\08s\911\17\BF\D4\C5\B9\B6\8DnX:\8D\B2\86<.,\22\1E' \1B\109\85\A2\A7\90~r<^ik; /EF)#23\22$!#\07id\10\17\10\19&\11%?HD\1F(+0 \0E\0F\17\18\1E\1F/@&!\96\8C\7F\96q\BB\DB\A7ze\22\08\14\95fcQ$e\DC\C2\D1\8F\95\94\82J\8F\AC\A4}L\19\18.\12\14\14\1Bj\8E\AA\93WIQQ`W,7IH5'':#\1BP]\05X\B1\BC`\00,\19\1D\1C\22BLH$))3)\13\14\1A\19\1B\19'1E9\C7\CA\DB\88:|\D3\AD\C5\BD\B0j\A4\B9\8A\8C\C4\C9\A5\D1\D8\A7#\8D\AD\B2|?`ov~=\1B(\13\19\1C\0E}\A1\C8\C2aMIFA?4>JG022$&\1Ah\ACt\7F\AD\BC\8D >@A\1C\18<QS*$*:4'\19\16\17\18\11\19\1F67\9D\90\B5\DC\8C\AB\C6\8B\C6\C7\93\AA\D1\BD\C1\8EJ\8C\CB\92\B7\BFsE\96\AF\8ArU-gp\5C%\1A*\1F\1A\0Db\AF\C9\D8|8A>DB3OKGQ8#.4&A\B5\C9\AF\A8\B2\A5\83\8CtH:9<W]<3;GA1\1E\1A\1F$\1D\1D\19438v\C6\CC\DD\D6\CB\BB\BD\D0{\91\DD\DE\DAa\0B\C0\B3\AD\90\B5\E5\92`\94\87\95\A5\8D\9B\C0\B5@2\A9v\1C\053\CB\BB\C8\BD\82?6<'MYU_a?61,2\1D\8F\C9\B5\D3\CC\CB\BE\A2{J8IK]bRPTTK@9=;81+\1F61\16O\C6\A7\A8\B6\C2\B7\CE\D3ZC\82\BC\D4\B4\90\AC\B1\D2\9EPv|\9B\98\B8\AD\BE\B8\C5\CF\D5A9\A3\80.`W\C6\BB\AD\D4\C4\9Em<2MiNECGJ@</\16E\88\9B\C7\D6\D7\BD\A3\97nBEO^bglZ[RF<<740%!\22 r\09+?j\93\A8\A6\B2\D0Dpk\C5\A7\B4\BA\B4\8B\AFj\CC\82tx\98\96\8D\A0\97\A7\B9\BFA2t'2\80q\86\BE\C0\BA\C4\BD\C2a\0F0d\82c\22TOV<!\15\19Jw\AB\C3\D2\BD\AD\96x93=Q`r\80ncR<91%'\1E\16 \1E\1C`A4(5Yc\99\AC\C7H\88\CC\CC\CC\91\B5\B4hwM>\ADlf`?>1\5C\AE\A0\9E0L\AB[ip\A1\0CO\BA\B7\AA\AB\C5\BA<}\AC\C7\CBO-O[M\16\1A\1A\1AF\90\BC\B6{PJ72\22\1A1F`||oT4\1E!\19\10\11\22\22\1B\1C^;!\1BFHk\AF\91g9\C5\A9\C9\C2\A7m\AA\B1\85xR\9BqT>C*\08L\B4\B2\B5\1Ei\B8\A0\B6\BB\D2ot\AE\AE\9A\BA\CC\D0\CA\A3t\99\AB\892HHKU&\22!\1C\22QR:>Q_D+\03\14(Ho\83uP-!\22\1D \1C$'\1C\18m;\1E\0B\22&Ir%.J\A6k\1D\92\92\88\91\DA\A2\B5\C7\ADz?P** Y\A7\B4\A7\1Fg\D0\B2\C6\D1\EA\A4r\84\9B\94\BC\BE\B2\C6\C2\8C\AC\C0\9E\5CGT`RJ!>;\2218\188Tb]3\0A\0C\177]\82\80^+%# \22\1F(* \1Bu9\0B\13\11\13\15Q4+M4\15\14\16\BE\C7\A5\C5\BA\C9\C5\B1d7\1E\1Dl[?XVb(O\BC\C4\B6\C1\B6\B1TW|Bi\C3\A5\98\BE\A2\A9\A3|z[MOYYLUa<S?&\1C1PgY\1E!3FTz\82b1)+-\1D\1D)!\19\18jD\1B\1E#\1B\15\1D\22\1F_%3\1D\1D\90\E2\D1\CB\B7D\A3\B9\BF\96;?u6I9\8E\AB\1AL\9C\A2\C9\94\8A\C3\95{V\16t\AF\AE\AA\CB\8BSR\A7\9FMK:/{\80Y\80~jK\1A%\1D4V`A=OWHf{i:KCHF<' \15\154T\1B \1D\15\1C!\1C\1AX&\1FC*\13v\A5\9F\B5\9D\A1\C5\B4\83ys#}\AE\91\B5\BC\1Ax\C3\BA\BC\AE\9C\85\AC\B4\A9&t\A1\B6\BD\C1\AD]a\A9\A7T(6\15n\AB}\84\BB\A4O\18!\1A\121SNM|\A1\8B\92\95\81JQIZW\5CJ6\15\12\16[\22%\1B\1B\182*#`!\0B04\09\B4\E2\BC\D0\DD\95\98T:@I\83\AB\ACpg\85!\22W\1Cd\D9cv\B6\B3tGY\AA\BA\BF\94\BA\B7\89P\82J4-!A\96\9E\80\C3\B6y]X\0E\06\13%8d\9F\B3\D4\CD\C5\D3_'I:BAD@<36.'\1B9P4\1D%8LkR<+\1Ck\C0gcj|\8D\891L\22H}\98r\09,Ob\C6\AB\B4\D4\C5\BF\B2\C0\8Fh$W\D4\BD\C8\D2\BA\BF\8A\80\5CVA$\1Dw\BA\B7\BC\B7\AA\8CZ\15\03\00\07\1ACk\8C\B3\C2\9B\C7\AE&\14.5.,@33'+!\14&P)I IEk8VU+8^pNE\C1\8E\B6\96\15\05$Q\96h\1C6_\19[\FE\A7\F4Y\EC\AC\99\C0\E8\89\09W\C8\CE\E5\B7\E2\F0\C6xW-(\13\87\C8\CE\D3\AF\90>\08\00\1Cfl\5C\7F|\85n\AD\A7\A3\D6\AFRNE5\18(34\14#$!\03`!\9AtBCh\83IC/)6:Xr\9F\F3\C2\B1\D02\001!\0EF<;\1F\010\C0\BE<\FFp\91\C1{\11\B6\A4^\B5CU\C8\C3\CD\C5S  6[\AC\BF\B6\CB\9E=\00\04D\A2\CB\B0\B1\B3\A9n\A6\DE\C4\C1\BC\8E]V6\1A\1757?\19\0C\0E\1F`8\A9\95\89=+sqe1%\0AD\AC|\1A\A3\CF\EA\B9\86\DA\A0\C6\CD*$9\1A \1B3\F38\C1\B7\98E\0B\8F\BD\B8\C9\D4\D4f\C2\C9\9FCm\82U8FPSo\97\A2c40\1EY\BF\B6\B7\B2\AEt\88\9F\BE\CF\C1\9F\86Y\1F\18\17;>&2\12H\B1\93/\A1}\BF\954\1B9O5,U\95\A3ZV\A7\91\C5\E1Z\B1\CC\C7\83\00$5 \16\07\80\C5JT\B5jU$\12g\BA\D6\B0\E8\E0\BF\BD\ECR\92\9C\84\5CCROgw{^JTQ\0BL\9E\C9\B9iza||\91\BD\89\8FJ\1D\22&?@& \16!\CA\C27\B0\8A\BC\E2\D7\99\1Dr.\1A\A4\B6\AB\9C\86\D1\CF\BB\A2Jn\CD\8E\03\0D$8\19\18\0C&\AEZ\14\DB\81r\1A7\1E\027\00\C8\C5\C2\B1\BC\B0Eb\A2\8Bs-8\7F\95\99\87Oex]A\AF\C4\AC\A1\C3\5CKJ/;KH-!#\22AC$3A8,\8E\16}\5C\E6\CA\DA\C6U(6#\A1\E3\A1\22y\AFfP\15Z,\8F\DEz\02+4$\09?\BEwa\1B\9F\A3\E9{\17 \108@/?e\B1\A8\B74\8F\DE\BDrM\91\93\95\A9\81\84V\8A}k\AE\AB\8A\A2\BCd+72\1C4*)$\22\22CB\161i\8D>\80\D5\BC\9Cz\E8\CD\C3\94.5 k\D1\9E\1E\B7\E8\91\00jse\18\9A\90\A8F,\00:\B4\C1\8AU2}\90\CE\C4s\AA\88\05\C0%AKE\A5\9B\C8~\C4\E8\98\B1\8CY\88meib\9A\8EURafj\87\85%--% *\1E!$\18\19%\19\10\0B\1Dy\A3\A1\B7\C7\CC6w\FFw\D08)O\B4i-\BC\D3\95\04\96\AB}\AB\A6\90\82{;\CCnC\9B\EBX6\8Ae\B8\DE\97\98\9Bs\C6\B1\9C\93k@4\BA\99\D9\B3\FElK~\8D<e;lz~J3&=4\92\8C9\22#&\1B\1A!\22\1A\1D)%;\0F\1B#\1C\81\AA\BA\D7\E8\B8j\19s\C3@4-f\1A\22h\A30O\CD\9C\C7\AA\A2\C3\C0L\8B\D7\AD~\973f#\8B\ED\B4\C4\A9^!iXy\93e=*&\102\EB\D0m]s\B4\1FMZYI@1@/FTEMq-( !\1C\1B2-\18\1F'(\9F6\00\19\00\00[\AF\B6\CD\AF[\00\A6\EEA(\19\10c\02#@\04L8\F4\91\D1\BE\BF\E9\DF\B5\D3\E0x\0AOm;_\E6\C3\92\B4M  n\A7[8-'\183)]swJ\DB\A9`\5CW@ &\17\1A Mgb8<020!$%>6\1D!'*\C1u\00\04\09\1A\00\84\D7\99\D2\00:\E1SG-#\0B+>\0Ci\1F.\0C^\EB\AC\B1\C3\DB\E3\B5\B4\E0\9AM2n58\C5\C1nV\1CD.\BC\AE\85 .\22)-\1FIma\8E\DB\CE\88rO)VB%0+L]Vg8Y57\22#&A=*<\15!\98S\0D\0B\02$\00\99\C6\DEC\06\96\B4\8B6:%\0D\1CF<\14\0EO\9A[\83\AD\89\A8o\D7\B9\A1\CF\D7\9DYGS@d\9Aa\01ou\1AN\A4[\11\14IVH\00U\82f\A6\FE\C3|\9B.2ZK2\1E#KYeQdBV2($'EB.L$ d'\0E\10\0C\1A-\E2\C5\FE\09!\E3\A7\85t-/\0D(I)*+v\8E\A9\DA\A1\D7\FE\E6\D6\C5\EE\EE\D8\A5dGL5\89\A9\0A\8DRzC\08\81a\22Jzc7)\96ki,\C1\BE\BC\BD=\14+5M8\0Am\AA\88qTU3($$/JL5D\22%\89h\12\0A\1C\19\18\00 \0E\1DW\90qc)I\22)!<;\11\1CL\83JT]H,\A3\BEHX\ED\B1\A7{Ug\11\A4\E4\A6\80@\816\0BI^bRNf\02\AAmq+.\06\BA\D3\B6D$\18%85\1ED\BF\CB\B3YC3+ \224DQ;/%'a+G\0E\1D\13#-\1F\22\09\A1\D9KU\0F[\1A2(;S\1A0\19\1C\22\06?F\15\93\C9\86m\C2\E3\BD\A0|\81<\A9\D4\D8\D2\A8\AB\8C\BD\00\99\81*?\17K\B4^L\22eoA\A2\B7\94j \15.&# q\B2\D9\99L.!#*6FP4\16\17,VN\1A9\08\1Ae\1E\18/\0F\A6<if\0DW\1F:\22!g\03\A3}#+\12J3\1B\F8\BE}\C5\EE\D9\D2\A0c\89\FF\B1\7F\FF\DC\DE\B9^kqGu\95\13\0B\9C\80-\1B\1E7\A8\85\9C\A6\AB\B3X\00\19\11\88\87\B8\A2\C0\B8\9B'\15!&9II>-+)?~\15.\12-T\1F0\1A*\15\09E*CJ-8+\16+/\87\9C\1A%\1A5^[K\9B\AA\B2\CB\9E\D2\B7f\03\E2\ED\FF;\0C\C6\EA7O&\A7\A0\E3\070\00\0A\10S8PM\C4\C9\96>ZQ\0E'>(n9N\BB\CC\C5\A89\0F\1F5DOZv$*G\7Ft\0D\1E\5C\9B\1C\16;#\18<B\07\00}O!(*? \19\0B;?OG\13\88\AF\BC>\FF\ED\85\0A\05\0DC;cZ\FF\AD\DCFqA\E0C\92<]<&\146S\8E\80\83\95\8B\B8\BEVbZ\08\15D\8B\85\D0\AA\B6\C7\A7\8B$--'X\82\8B+$iUY\91\14 PF\16\85}8:\1B\22\BA\DC\84\22) \0Eqs(6S\1A2\08Es\84:J\FA\8C\0A2\1A\13Z*B\F0\E7]\CF\EF\90\9B>\19\8B\84\7F^;@SaK\1F\9B\9F\A8\DBo\17(/$./\12)({\A0\B0{7.\1F\17,`nSle_\07]\80\11*\07\84\88\82Q0P\93\84\BCO!.<Bk\B6z$\92!\0A@-3\1Bf\0A\1F\8B\10\228\0B0:}\FF!w\DA\BC\DCj\0CAdIzIa,((\0A,l\5C\81\E0\00\A4`\13\1F)%&($Bk\B0\82 \17\1A\14#UJlea $\03ox\12 \98\E5\A5\BC\9FxiZ\AAP!\1DC?AKB3!8\14U\00\14#}U0\01\16(9\1889\08*\A1H\00\0F\95\18FgC\5CEJ\AA\1C\1C\0B\0B,3\0Ad\9D:\C6\AEW\1A!+\1C\1F\1A\197}}40('%LOef\97\1E\1C-\1C\95/##\FF\CD\BE\AE\F2bv\94`;\161\17_\0E\17\19\08\193\00\1A\00i\92f\00\0EX*f@\10\16145\153\8F\13=XdB=ZY\02*\1A\16\1B(/1<,Xy\8Dw4\1B$\11\04\13\18\07!B-5TV\131Fbh\B4\FFO\222\00\139y;\DA\CB\A5{\FB\AD\DF\86\90v?\16T\11@\D0\B3F\03\173\B3\A4r\00\91\D0\BE\A9(,$,%R<\06\0ER\B2\1Dl%\1Ep\5C:\12@?@OSLMHB!A]\99G]F;2),Z.)!-LM'9?\1C\0DS\98\CC\0Aiy\1D\13\90\D0\D5\E8GWh\DD\C0uH[d\1D7U\0D{\E9\C4\9B\0B\9D\82\9D\A0\00\D6\E5\B0\C1i*3&Qc~p:\09]\00]\1D\5CfD<\14<2EO/4 \19@a\08.Is\C4\82aUX}bZ@-9]K.,J\0E\06`S\90\0E\92\CF\DB\8D\A5\BC\C6\E9Uu\C5\C1\DE\95w693!M#\0A\97\E9\C4\BA\A9G\E5;7\B3\A3\DF\DB\B3\1842F@Zl>!!\1B:\13R\B6\B5\AC\1C(\1F \1D|N)2\22\14\0BP\A1\9A\B8\BC\83_\7FRwE;\12G{W,,B\06\0B\13+\1B \1D\80\CA\DF\DB\9F\8C\D5\EC\EA\A8\D4\92S44\17%\1A.:\CA\D1\C0\E3\BF\E1\FF\1D\1B\095\B8\AD\A4\034\0A>>Oo'/\10\13U1!t\FF\C7Xk\C1\DBjc\C0\90e\1D\15\141+e\D5\BC\CF\D1dcpS;$\05,uD*0:\0F\06*r(A\10\00\9C\C1\EE\D3\D9\D3\F2\C0\8A\C6\A6\18@0\077'\0Cs\A0\B5\C3\BAe\A0\CF\00\0F\00m\80\A4\AE\07!\9A`S\89\1E\13q\17\1FVP\B0\F6C\0C\00I\B1\92\F6Y\DF\D5\8A\0F7e4JS8\F3\D4\D5iv\99\99\89\8Cw}EJ\0AD\1D\22\0DgWAJM\85o\DA\C3\92\B9\D7\D7d\94\7F\DB\0D?&\10\10:\14\22M\8F\DA\D0\AC\A6\D7\CF\1F\00xf|\A7>\98_g\92\9A\0A\8C\9C\85K\B8\BAu\05\14V\CB\08\D6\A0\96\CB\A2\E8\AF\0C84H\9D\96\B6\C3\E4vJ\BD\CA\99Q:>IJH\0DG4\0E\0F)/V\8A\C5\BC\AF\91\D8i\9C\90\C3\B2\5Cb\9C\117\22\14\0A\08\1E)))`{\93\D2\BD\E1\DC\002\CB\B5\C1\DFYb\869\AE\BE\A2\A9>,Z1\18\17W\F6V\A5\C0\EA\D8\BF\C1\E8X ;D\85\B8\AA\B7\E9\FAr\0D\B2\C3\AD\A5l%\04WG\1C3H\0D\07e0\8C`\B1\D1\C2\C3\FB+^\E1\A3\D7\B7\1F\13#\1B \12\10<\130*}Z\94o\C6\BA\A2\AFE\00\F9\C9\D6\EF\A8\91\8FK\1E\DB\D0\BD\0C@1kd;:\E3|1\84~\AE\D6\00tq\0Et\8AX^t}Xr\FF\84\D0\D7\A0\00\09\00\1CRH\16(>\09\08j[\84_G\DD\DA\BB\C9\E6\EB\B1\DE\C0\85\14\15\18\1F\0C\17\00[!+:\BF^\A5:\AC\AA\89\00\84\AB\BE\C7F\8E\FC\C2\83\B4\EE\9C\D7\CF\03WpT\12\9F\DB\A2\9AcP\BC\22\C8\00\CB\C8jR\8Da??h\0E\14\DD\BD\DE\9C\EC$\00\02\19[U\17\1D+0|E\8DucZ\BA\13\98\DF\C9\AE\BC\A3\D2\00\14 \12!'%\16\0C%\22\98\B1\C9w.\86\80\97\B5\B5\C2\E8\A8H\06\AC\C2l}\8E\B3\AC\E1\82)9\03\9F\8C\BB\C9n\AFW>7\CF\E8\A8\A0n27Zj\8CA\13d\CE\CC\B8^\AD\FE:'\19Q8#!,zxtt`]\16OG\97\CA\E7\C7\DC\87\D1:\00\14+982\1C)&\1F1O\11?Q_\90:\8E\A4\C0\AF\D3_\C8\CF\CB\87\82\A0k*\C6\F3E\06/P}\F3\A2>\05\1F\04G\AE\9E\B9\A1emtt\89X\15d\12\89\F4F\1FL\D4yyY6&,1\1Ex{8%-aC\22\14\19\D7\C5KZ\C5\8Dq\1D+\1E\10$\09!\10\1A%\14\152B)\09\1Dlm\B6\A6\9F\96\EC\AA\AB\8Esg\1B+$#\D4x\089J$\FA\08\05\11\0B\1B-\96\9B\D9Pcm\8A\ABT\07B\1B1Fq'''t\DDCF7I@8<xw?\1D\11_o\00\1A\0F\1E\A8.a2\BCy\5C\0B\14\1A\18\15\0D\13\076\1A 030\189\03\12\FF\EC\B6\CB\92\E9\AB\95V\0B\02\E7\C8\00\B4\00)?;\1B\07\22)\03\12;#t\80\BF-Pi\AC\92 \87K05J#\22A=\1B_\12>DA5:>h\99B\04\09\04]:\05\0EItR \C9\88\8Bg\05\139\0D\13\16\0B\10/\13\0F=V\05\10D\0D:\F1\DE\FD\B7h\FA\CE\C3\80\0E\A0\9A\AF\0FG\22%Q\1D7\164\08\0C\17\09\1ECO[-?\92\88\08sz!9,-,\0C\18'v\05\96=4*,\227\95\98\10\1C\0D\03\04*\06\1AB\5Ci\89\DD\C2c{Z\05\1F\15\03\0A\18\0C\15\16!F\00\02,\09\11\11U\B3R\0C\14]\BC\B9S\1A\AE\82\D5\EDV\BA\84Vo\E1f\07\0B\0E\0F:Y\1B?\9B+cb\11jN0>1\1D\178\DA\AF\B8/^ ),*7.\22\98\96\19\0D\15\10\0F\06\0A\1BORS!b\9Bsj \1C\1A\11$\04\11\0B\0F~\E2o\BC\17\1D5(\1D\1DX\1E\D68\01\00\91\B6\A9\AA\AA\ADNP@\D4{=\93\DD\15\09\00T{(1W;>A\1F:mW \1B\1B#'zQ0\0F3\22'4).',3\90\96\22 \0A\03\0B\0B\01.QHi>F\05$\84w\07 \09\09\05\16\06)\C98\DD\FD\DE\03\0E\12\13W.\16\B2\F7'\0AU\D3\95\B1\CE\A2\9E\8B\CE\D1E#\C5\A1\B8\D4\B0\06/\1F!3\18)\1B>K?;WQP<='(\22#\1E\16\1A!\160'\19\223D\0A\0A\14\06\06\09\03\0A;4\B86G;\8EW\19\09\0C\1D+=\0D\01F\B9\D1v\EC\F5\FA\01\02S<\1C\111\A8\00\06\84lrI\DB\C3\CB\B2\CC\D5\8C\00\D3\AF\E8\D6\F5?&\19&\19\12\14DD\1D!\1E\226JjWa)\18\1A%\11VZA\1E1\1E(FHb\0D\13\12\12\08\09\07\03\08\8Cl\1A\09\03\00\0D\11\11%fA\0A\1F%(\FF\FF\D7\A7\F2\F8\B2\D1\AD\09G\B1\00\08\9A\03\C0\F17\E3\BF\98\D8\E3\B9\C7S\E7\CF\A9\E9\D8\8C\06/\1F\07+>@7#\1A\18\18\224\16,.LR' RfkV[2$%HI", [5310 x i8] c"\EC\DE\B4\96\A9\95\BB\D4\DC\AA\B3\BD\BE\F1\E2\C9\C1\BD\D8\E7\9E\93\0C\00\1F>CI\0D\22\09\00\00\03\180\1C\93\D3\9F\A9pey^K)\05 ?=%\1F\13\19\19\04\17\1B\07\05\0C\15'.2\1B\0A\00\15\14\00+'\1B\00\00\00\10\00\09\03\00\01\0D\09\0F\1C\16\0F\B9\CCkh\B9\8E\AF\FE\BCc\97\D5\DE\B2\A6\9A\DA\BC\B3\F4\DD\F5\BCaD>9,;W2\1E\0C\00\170.\99\CB\99\AE\AC\B6\DB\EA\99B0=B1\0F\153'\1C\08 \15\00\00\0A\19\22*4\1F\0E\00\02\14\0E.5*\00\00\00\0C\07\05\02\05\0B\12\0D\1F>\11\16\A8z\0F\C9\F7\DB\D4\D7\A3.\15\A2\A4\BA\DF\80\B6\F8\E7\F0\DE\C7\EC\CD\9CXxkBIWM \15 .8UbX\A6\B2\AD\BE\CE\937*=4\06\0C*;<A\0C\0D\06\00\00\11 3.&\1D\00\00\00\00\0FSC,\00\00\00\00\01\00\00\06\0D\12\0E\22?\13\16r\1F9\F9\ED\BD\E7\E0@\12\086'k\A6U6\D9\D9\E4\DB\CD\BB\A4wT\92\D1\A8S\5Cb\1C\1D*,7\1C\1CL\9C\A6\93\8A\8EHA0C\05\00\08\142EK\0A\00\00\00\00\0F#\91\8E'\13\00\00\00\00\00i_@\00\00\00\00\00\00\00\00\00\05\06\16&\1A\17\92\AE\94\C2\89\98\DC\D3v\8774,rg\8FwLh\FF\F2\FF\BF\B6\BA\AAM\BE\DC\DF\ADm\15(M+*6<u\8A\BA\B2p_srk\1F\0D\1D\1D\1A$,*\02\04\01$/\00]\B4\C9|\0C\0B\00\00\00\00OhV\03\00\00\00\00\00\00\00\00\00\00\09\132)\A2\E2\E7\89C\81\EB\CC\A0\D5\BCk\AD\BE\A2\AB\E3\FF\BB\F9\EA\E0K\A9\CC\E8\92gr\A8\9E\9A95T,%>@\A4\9D\E2\EEzYkxhdmI\1D\1B\0C\1AAI_%;\80Pg\BC\C1\7F\00\17\1A\05\00\00AC1\03\00\00\00\00\07\00\00\00\00\00\00\04(+e\88\AB\CE\8A\A2\C8\B3\8E\BF\89\9C\CF\B4\C3\B6`\AB\E6\AA\B2\CD\80k\AC\CE\A5\8AP;t\96U=9912)\86\A8\E1\F7\8BJYZhNPeURUBM:Q<K\C0\CD\B9\D2\CC\8A;[a\1E\00\0FV<\15\0B \11\07\17\10\00\00\04\0A\03\03\00+-\0Fw\C5\AF\C2\B6\A9\BF\94\D1zt\C2\BE\B8e*\BB\C3\D0\B1\BA\DA\B0\7F\8F\97\B8\C6\92\90\DE\A4RA\BB\A6D\1Fj\BA\CD\D7\CF\B2gPsOm{W4QU@YLT\1Fd\B9\CB\DD\E8\D3\97eW/\12#ge;\15,9.%\16\12\1A\19\17\0F\09\000.CX\B8\A2\C2\E8\EA\CF\FB\DCL>\9C\EE\FC\CC\90\C4\D0\E6\80QSc\9B\B0\D7\C1\A0\B9\A2\B6\C0*@\BB\94Vx$\B1\A4\B4\EC\D8\C6\85\09\00\22D&!(8C\0C\11\0A\00!m\8C\C0\DA\D2\B7\8Cq]8\1DSY\5CPFIQ*+$&%%$\19\17\07\08\84\164Pw\99\C1\D0\C4\DDM\81x\CB\C0\DE\CC\D9\B6\D4\89\FB\91k\8A\BD\C1\B2\BF\C6\B6\B0\AA',\8CTa\8ACq\A4\BA\D2\F1\EC\CC3\00\18LT9\0FG>\1D$\09\00\007j\9A\B7\CB\B8\8CXM'\1B1J[QBCQ:))#\19\1E\18\10\1D\08\0A{:\14Bb[u\C5\C7\C0(\A2\F9\CE\DE\BD\D1\D6\88\97uc\DB\8F\82\82_^Y\81\DC\C3\90\1F=\B8\86\7FOY\00>\AB\C4\D5\C1\A4r\0FW\8B\A3\A7B;g.'\00\00\00\0DT\A8\CF\B2i-\0F\00\0A\07--4=AAG9\1F\0B\11\0C\03\06\16\19\0C\10`N\1D6e@\80\D3\93z5\E0\C8\C1\D7\CB\8C\C4\B6\A4\9Ai\C9\A7sXHI*c\E2\E8\AF\1Dl\C4\BC\C2\9E\99is\B1\BA\B6\C6\AF\97\A2mHrzuNp \15)\00\00\0D8J{i6\1F\1D%\0F\00-+$);I@\1B\0B\01\04\02\07\03\0B\0D\10\0Ei]37:\03J\9E!P_\D2\83\00\93\BE\AE\B9\DD\D1\E5\FF\DD\9Bex-YP\94\D7\D5\A3/\86\E9\C8\E8\F2\F5\A0\82\A3\B4\AA\DE\DF\BD\8E\A3r\80\92\8DaJ\1CA8\1E\00-@%>T&\17\18'!\00\17(%\16!GD\1B\05\00\01\01\04\01\0A\0C\0D\0BPQ\17\14\1A\18-p\0FCY5\1E\19.\DD\E6\DB\DB\E2\DB\FE\D9\80VT3\94mx\80r^B{\D5\D0\D8\F3\DD\ADn\83\95N\8B\F5\CC\BD\F7\AD|wXbjr\88d, 1IKX1\04\00\0B\14 !#\13\11\1F.>;*\11\0A\0E\13\05\05\0E\06\0B\0C2<\11\10!\12\17E\00\17U\171\14\1F\B8\F8\F0\E6\CF?\B1\C6\E5\ACZZ\8D1WF\B4\A42k\AB\B4\E1\B0\AE\BC\AD\9Ae(\8C\CB\D2\B6\E8\A1]]\AB\A9wWWE\85\8B]\8A\A8\840\00\00\0A\0A\166[\22\07&5<;?\19+'-,\22\0D\05\0C\0F\0BU\1A\03\02\00\00%\00\1BW\09\04#\08\17\95\A0\AF\D8\BE\A6\BA\D2\A2t\83F\9E\B3\86\D3\AB,\87\D5\EA\E4\C8\D3t\BE\C3\BBV\9C\BB\ED\E5\E1\CF_6\99\BD^PV7p\80m\9A\C5\C0W\00\00\00\00\0B-jUUdgwo[ *&86:(\14\0F\0F\007(\08\0D\0D#\15\0B\00f\04\00\22?\00\C8\F8\D0\E7\B7\88\ABTNV]\9A\85\9F\83g_77\89G\81\FF\A2P\CC\C8\A6rv\D1\F9\EA\BE\D6\C3\877\92\5C_W=M\94\85\90\D5\D8\9D]P\00\18\18!Z\88\9F\AB\C5\DF\CA\CFD\06\22\11\19\18\17\0E!\12%\09D5AH_)\14\13i\85Z4V([\DA\89\8D\88|s~!fDr\9B\98X\00\0FXb\C0\AE\D7\EC\DE\A2\BB\C0\89kGo\ED\D9\C1\EE\D9\D0d\8Cvr:@<\88\94\C3\D6\BE\B6\97e\18\12\09\01!Ov\97\B6\D1\A5\C1\B2\1D\00\0B\0D\02\00\10\0C\0A\13\12. 8J7<\0C0RwJPc\1E+O\7F{X\BD\BA\DC\89\06\14Qd\92\94B\10Q$`\F9\BE\F3r\C6\9E\A4\C5\E3\A0\08p\F0\DD\F6\DF\F5\FC\B9m\7F<9;\9A\D4\C1\C8\C5\82?\1C\13(~\81rq}\99\82\B9\BF\B8\F5\BDH/\1D\06\00\00\0A\0B\00\1C4,&}D\97S;Ss\A6ff,-IFn{w\FF\C5\B5\E3>\14:\00!I\10 \1B\00\22\CB\B0D\DAU\8D\BCm\1C\A8\ACj\CC[\86\C6\EF\CC\CB_78gY\D8\BE\BC\F8\97G\12\19G\B6\C5\DD\AA\BD\BB\83\A9\F2\BE\B6\AAt><#\0B\0B\08\056.>@7l^\A0\8C\9Eo]\8B}\8B(\1C\1FJ\9E\90\1E\C7\FF\E1\CE\8C\CC\B4\CA\F1\5C\1A]E&\008\FFQ\B7\DB\C3K\00\94\D0\D1\DA\D6\E2|\BA\DC\9EJ~\84cN>cRv\91\8Bo:2\1Be\9B\B0\A0\BE\B4v\85\AB\9A\B4\A5\81kA\0A\00\00?5\04+\15f\C9\97E\A3[\B8\98R3=e7\11:\A0\A6r\88\D3\B4\AA\C6e\B4\E4\F9\AF E[4\0F\00\91\CF8u\DB~N\08#q\A8\D6\C9\D5\C6\AB\C0\C1G\92\B5qB/U$\5ChVMB<(\001\8F\A4\A8ab8ca^\8D^o1\06\07\06&\1D\04%\05+\E9\CB@\AEh\C1\D1\E1\B8&{,\00\80\88\8C\A1\A8\E6\E8\96~\1CO\D2\B0\18&9G;$\00<\B6d)\EA\A3~\03M&\0C\08\12\AA\B2\9E\9B\8E\C6\16w\84xO\17\0A\95\B8\95f7@L+\17\D2\C0\8B\89\9E0\19 \0E\18% \07\00\00\00\19\17\00)6B.\92;\84\1B\DC\BF\E4\C8YM=\00\97\A5\AEX\A1\D0t,\0B\1C9\C5\FF\9B\10\1F(>\00\00\DD\90\84\0F\93\BD\C9<693C(\14PUx\90\BA?w\C3\CEb\14y\96\A2\B2XXD\B1\7F9\BB\B4av\AA\8B-\05\13\00\04\00\00\00\00\00\15\12\00\0Dop0r\E0\9F}V\EE\B0\B5\869\184\81\E5\B5\00\AA\FB\91\12\80\87|\00\8D\A3\A8 B\12l\DF\DE\B1\94\0C\93\A5\FF\EF\90\D1\C70\EAAMI,\B5\AD\F3\A8\E0\F4\96\98\9Ck\AA\91eaS\AC\93Qt\85fbx\97*)\12\04\00\01\00\00\00\00\00\04\08\00(7\81\9B\CC\C3\B6\A7S\91\FFo\FBD\19i\D6\93K\BC\B9\8A\00\B0\CD\A7\C9\A6vw^D\CChF\BE\FFq\19\93e\B2\E1\BA\B0\B4\8F\BF\CD\BB\A4ELN\D6\92\F5\D2\FFFW\98\94HpFo\89\88D:2H?\95\9BC\1C'\1D\02\00\00\00\00\00\02\00'\00(/.{\B8\AD\C3\CF\C5v+m\D13'\1EuG5d\CFVB\BE\AB\F4\BD\9E\EF\E6&}\E2\B2y\AE2\7F\00}\F8\B9\BF\C0]:\91g\8A\BBxI\1D\1B8A\FC\F8\80if\A95?[m]LIUE8UYa}E=?/\12\00\0A\00\00\00\00\00~/\10$!\19~\AC\95\C6\BFf\1E\C3\FF>,,\1Cy\0B\00S\07PK\FF\A7\DA\96\D2\EC\B3\9A\CF\DBj\15Au\0FD\E2\BE\84\BF?(,\85\BF\8C6Y&\1E?@u\A4uv\DA\AF\8DUaR5)+\14MFqtM?D,%\0F\0A\06$#\0E\15\00\00\B8\8A06!&\22{\CE\AE\FF+R\EDy>$8\11\1DR\10\8DQ%!d\DD\C0\B5\E7\FF\D9\D9\DF\E6wRE\87+\5C\F0\C7K[/]?\BE\BC\9B\18A!0>!W\83Y\A1\DA\D5\82[[/X?1\0C%5i\5Ci5e\11\1C\06\05\0B)(\11\1E\19\18vL\10)\1A(\14\9B\A4\D7F$\AE\B8\A18\1F\0A\18\1F^n@14\7Ff\86\C5\BB\D4\92\F8\DF\B5\C8\BB\AEc5tfx\93E\12yc\1Ag\91A\00\17\1EKH\17BhR\A9\D3\B8mv\1D*B\22\19\03\14&H]9;);\00\00\00\07,+\13,\0B\00B,\00\1A+#6\E0\A3\FF\00+\FF\B0\8Er\08\0B\00\09NK?DQj{\BB\A6\F9\FF\FF\EB\D4\FF\FA\C1\BBlQaD\AB\B5\00\A3Z\84\14\1DcN\004Ly\08>xXE\16\93\D4\DF\B9\1C\00\06\09\1B\0E-i\89pL(#\09\07\01\00\07$$\06\10\00\00H^\07\14\1E\1D=\07\00\04\12a\92u\880%\18\00.rc2*(y\0Ca\93pM\B1\B2<r\CDr\C6\94x[\05\BE\C4g\9FY\A4A\00.oR\196i\0D\92R\82\1B\00\00\BD\E0\BF\1B\00\06L:\03+M\96\9F\A1\80E\01\0C\00\00\02\16&\12\08\00\001\096\00\0A\22%\1D\00\00\00~\C6ZW\002\00\0F-?=#O\00\00\00\0BC0\1E\B2\B1\90\92\D9\EE\D0\B8\9BiF\CE\EB\E3\E5\C0\CA\A5\C0\04\85b\096\01d\B7c8\03Df+\A3\E6\99G\13)<\04$Ov\8F\CC\ADZ\0C\04\00\00\0B\1E*\05\00\00\00P(\00\0F\00\00C\12\12\09\00|*MD\01:\00\17\14\0DR\00\B4`\00\08\046\1E\11\FF\C4v\D2\DD\CC\E5\99b\8F\FA\BEn\F2\EF\D7\B8fk\86C>w\00\05\A4\80B\17\00\19\86\7F\A0\AB\9C\94Z\1942\8C\8C\A9\83\C2\D4\B6H\07\00\00\00\0C\0F\00\00\00\005P\00\1D&\1E5,&\00\06\04\1D6\0BPP\07\17\11\01!(\96\A2\00\04\00 TTZ\92\A9\A8\B1\80\BD\B3h\00\E1\E3\EA\1D\00\C2\ECoS \9As\C4\00;2\0E\0AF\0B1(\CF\E5\9A43,\00\11QDr/'\96\B4\AF\BB;\00\00\07\17&&R\00\04Oc<\00,y\994\1E\1F\00\00J_\05\15v3\00\0C%7\0F\0A\04\1F\123B\0Bw\A0\CC:\FE\D2g\00\00\01S7b?\E4\A0\C3:~F\D9\0Fb\1A\5C;3\19/\1F^^\82\94s\B5\D1UMD\00\05,\88\98\CF\95\A0\AA\97x\00\06\05\06:O_\00\03oU>\83\04-8G\1C\85b**(\0A\BB\F8\8D\02\05*!v\8BD?3\00<\1BJ\8B\A4Ld\F6q\00\00\003lD>\D5\C3$\AA\F8\8A\84\0D\02xe>g5)\22J8\00Zn\8E\C6Z\00\15-\14\00\15\00\14\10h\9E\A0T\00\00\00\090XrE?f]\0C|\82\1A\13\04\85\86\87p2Y|\81\D4B\07\004ag\D9\92\17x\00\02_)V z&0v\00\00 \10DV\8E\EF\00K\C2\A3\B5V\0CBq;\A50:\18()\17\1E\97Ri\C2\0E\C2q*\1D\1F\0D\087BS\82\AEl\00\00\00\00\18DK8(p\05!\14\89\9D0.\A7\CA\A2\CD\B9\9D\87h\A9+\1D\10NtM^A\0E\1D+\1F\8A\0B'0ob4\05\22\1BH%*F\0C.\AD;\0F\0E\8A\0B8r}x~I\9F\0F\0E\16EHl\108o8\D2\B7n9'\00\00\1D&\22N\9C\A9>\1A\00\00\05\19%(,j\00?H5\9DV5\00\CD\F0\D9\C7\FA\89\88\973\1E\00\180\88*\1A\00\00\00\1A\17C\17\7F\9Bs\14%nA\95V\19#GKK,b\91\11/@\80bTe[\00\1C\022;?:,\0D\1Bd}\8CyR\16\00\00\10\17\17\09?I\18\0D\18,\00\00\10!7\84\E1>\00\1F\0E\15)I\19\C9\A8\92\8A\FD\9D\B6bm{C\00]0\17\AC\90K\07\01<\D2\8C|!\A8\DB\D1\C1G\14.Q<]O\1E-k\B5\22X\06\00gFS\15E+!.J6NwG\004q\A7%^u@\0F\1C@h\0C\0C\00\01!%\01\0A\1E\00\00Mr\A8\00W]\00\07\8A\AA\B1\BE5;F\D1\A3=%MP\08-f\00C\C6\B6\87\00\93\93\A3\99\0C\C5\D8\C3\BAh0,3@V\91i9\11]\15Y\00>D>D\14Q.\0E1\0D.$\1E1B\0AJd\94\C8\87R6Z\99}{2\00\05 \0E\00\00\19\00\00V%l\00\A6\C0\BC\9A\9B\8E\A2\D8if\A6\CE\E4oV\1C$)\1A\5C)\00v\CF\AF\B0\A2V\DC:-\99\85\CA\D7\B5\0F3(,\22Eh@Y%\15-\003\91\C0\E4 \22\12\00\00WYE6\18\00\008\8B\AD\D4\C0y8Z:aX=\00#M*\03\00\1E\00\00\1B\0F\00\00+\9D\C8\F7\E3\83T\B4\FA\FF\A6\EC\8B7\07\18\12\1D\09\1F3\AE\A4\A4\DE\B7\D0\F2-\17\08\1A\9A\A0\8B\00D\06=#1b\0E#\1D\18N\00\00R\FF\C6ep\BA\A7:A\BF\8FM\1A(\13\1C\15H\C5\A4\CC\E4cNZ6+\11\00\05M#\0C\00\0E\00\000r\0D3\00\0B\84\C2\F4\D3\BE\C5\E2\CDr\C7\C2! \0C\11J,$\8F\A9\95\9F\C4x\A5\E7 !\17ie\80u\00A\ACzOn\00\00L \19?\1F\99\E3$\00\09C\9Aa\DFF\C0\94Y\00\22P\1C7Q(\C2\BA\C0T^\86\97ye@K\1B<\0E<!\14\00hUFiO\8EX\D7\C4\90\BE\F6\D9m}|\F3\00%\00\08/67:@u\A5\C8\CB\A2\FA\D43\1B\89QG{&\9Ds\83\A3\85\00`\84l$\A4\BAv\12\06\81\B2\00\C2\A0\97\D8\94\FF\A5\00\1ACf\AE\AD\B4\B9\CCXY\DB\DB\B0O$\0E\10\0C%\0265\00\008\14S\9B\DF\E1\CD\9F\E7N\99\A1\DD\D7zp\9B\003\15\1F?\141(\04%S\86\C8\DE\D0\EE\CE\0C6\CF\C1\B4\EEfT\93=\B2\CA\95\B8=!M##Qs\FFU\9A\B3\DC\E3\F9\DD\FF^\00\0DB\91\C1\C1\D6\EF\CED\0B\BE\CC\C4\C4\98/\00&\1F\00\00\1E\00\008\00\AF{\CA\D9\E9\D5\CE\00\81\FC\BC\DF\DE1\16\00\00\05\00)e/3\00`?{\88\EF\D6\B8\B8R\14\FF\DF\ED\FF\BE\9A\9Ca5\F1\E7\EC\0E>#S\80[Q\EE~/vf\CA\F6\15\7Fl\00c\96\5C]v\9BSC\F1\90\D4\D6\A2\19\10\00\00\16\1E\00\00\08\00\002$vod\EF\FF\A3\91\AF\DD\C1\FB\D2\B0\00\00\04\05\00\0E8V.\16&\A5G\9Cu\A7\B7\A2\07\97\8D\C9\E9X\A6\FF\CA\96\96\F9\BE\E9\E7\00Luj7\9B\F1\BE\94XU\D2G\C4\14\E7\E1=*]JeW\7F'\00\B5\8D\C7\C2\FF;\00\00\006\1F\00\00\000_\1Ca\5Cr\82\BC)\AD\B6\9D\95\CB\CB\D4\14)\05\02\17\16\0D(\00-\07\88\A7\B8_@y\88\A4\C9\CD\B2\ED\B1T\1B\B9\D6\84m\93\BC\B8\F6\8B%5\0A\B1{\C7\E1w\ABSEI\BE\F4\C0\C4Z\19\0F:l\7F,7P\B5\A4\98`\A0\E9$\00\00 \00\00\00\00VSlfAJ .9\B8\C2\D9\A8\C9\91\B0,\1E\06\1A(%\18\13\1D\11\11 >\00%HS{-\9D\B6\BB\B3\CEo\E6\C2\DA\99}\A4f:\E4\F25\00$So\FF\D0=\00\07\00J\A0\B7\E7\A3OMPPpA\00f\00i\D0\22\065\B3^H+\16\03\0C\1B\09B;\1B\22%]`2\17(\BA\C2CV\E2\9Dt,!\0D\00\12\00\06\0B\00\1B\03\00 )\0E\04\00Ke\B9\A2\A6\A1\FF\D7\8A\86vc\226:P\FF\96\0A>D\00\E4\009/\0D 'o\85\CE&@El\89/\00+\00\0E\1ES\05\02\16]\BE\0F\12\09\0F\00\00\00;70\1B\0CTs\12\0F\00\0F\A6)V6\D1n0\00\03\09\11\00\00\14\00\1F\09\0F)\19\08\190\00\00\FA\E3\C3\EC\A0\FF\98}O\02\0F\FF\D6)\E6\1E3XE\03\00\0F[%\1CT-\5Ch\AC\008I\95u\00g'\00\1D*\0C\05\10\1D\00M\00\16 \10\00\04\05RiO\00\00\00Zc\1C\0DVmC\15\C6\B1\A2f\00\02\17\05\04\03\0F\12\1E\02\005G\00\14F\14)\E5\D5\FF\DFc\FF\D5\B2t\05\AB\C2\AA(pD1z6/\00\1B1.#27;8B\00+wt\00BR\00\05\18\12\18\00\00\00R\00W\03\08\00\00\00\0B`g\17\0E\05\06\01H\03\0AINa\8C\DA\E0`kS\00\00\04\00\13\13\0E\0E\05\005\00\0B'\0B \0B@\AC],\10s\CB\B3>\13\B9\A2\D1\FF~\DA\8F\86\8C\E0N\003.\1Ajv\1A'\80\00EF\00T(\09 \00\00\00\1F\C4\89\91\11;\00\00\00\00\00\00\00ZR\15\0A\13\0E\08*\14'KOQ\1F[\BF}v\10\0E\00\04\18\0C\00\19\00p\B1b\B0\1F\0BC,\18\00U)\EFB\22\04\8C\93\A6\B5\C3\B7ox`\DC\A8U\92\C5\001\1F\5C\A8@0?!\05#\04\1DU1\00\00\00\05\0C]9\0A\00\0F\00\00\00\00\00\00\00\00PU\00\00\00\13(\1D,\16\19\11[Nc\17Olb\00\06\00\00@\11\13\14\B5\1E\C6\F4\FF\00\1B+\1Bj\10!\D4\FF?#]\E6w\BC\F0\B4\B6\85\C3\D6[H\C1\B7\D4\CE\A5\0BED\1DI4B\00\16\1B(aohi\0F\15\00\11H;5\16\00\00\00\00\00\00\003'\00\00\00\15.\0B\19\1F\12\08\9FEo=\A4l\00\00\02\0C\13O\00\09+\A9\C7e\D4\FF\ED\09\0FgT\0C\16:\B4\13\13\98\84bN\E4\CF\E0\BB\C8\D1\93\10\C2\BB\FF\DF\F1;-+\15%*80+\00\01 \15!nV>9\09\1A\0D\10\00&%\10\00\00\00\00\22#Z\00\00\00\1C\00\00(\00\00mY$\00\00\1F\00\00\00\12L8\00\0A\17\17\F3\EF\BD\9E\E6\E3\A5\E0\BF\04K\AC\10&\8D\12\D2\EC;\DE\CF\B6\D7\D3\A1\BCV\D9\E8\D7\E8\C8t\002\11 Y@*\17\00\00\00\01\016\00\0C\0A(9\10\0075=68\12\0E\10\12\09"], align 16
@out_width = global i32 90, align 4
@out_length = global i32 59, align 4
@i_marker = global i32 0, align 4
@out_unread_marker = constant [10 x i32] [i32 216, i32 224, i32 219, i32 219, i32 192, i32 196, i32 196, i32 196, i32 196, i32 218], align 16
@out_length_get_sof = global i32 17, align 4
@out_data_precision_get_sof = global i32 8, align 4
@out_p_jinfo_image_height_get_sof = global i32 59, align 4
@out_p_jinfo_image_width_get_sof = global i32 90, align 4
@out_p_jinfo_num_components_get_sof = global i32 3, align 4
@out_index_get_sof = constant [3 x i32] [i32 0, i32 1, i32 2], align 4
@out_id_get_sof = constant [3 x i32] [i32 1, i32 2, i32 3], align 4
@out_h_samp_factor_get_sof = constant [3 x i32] [i32 2, i32 1, i32 1], align 4
@out_v_samp_factor_get_sof = constant [3 x i32] [i32 2, i32 1, i32 1], align 4
@out_quant_tbl_no_get_sof = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@i_get_sos = global i32 0, align 4
@out_length_get_sos = global i32 12, align 4
@out_num_comp_get_sos = global i32 3, align 4
@out_comp_id_get_sos = constant [3 x i32] [i32 1, i32 2, i32 3], align 4
@out_dc_tbl_no_get_sos = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@out_ac_tbl_no_get_sos = constant [3 x i32] [i32 0, i32 1, i32 1], align 4
@i_get_dht = global i32 0, align 4
@out_length_get_dht = constant [4 x i32] [i32 29, i32 179, i32 29, i32 179], align 16
@out_index_get_dht = constant [4 x i32] [i32 0, i32 16, i32 1, i32 17], align 16
@out_count_get_dht = constant [4 x i32] [i32 12, i32 162, i32 12, i32 162], align 16
@i_get_dqt = global i32 0, align 4
@out_length_get_dqt = constant [2 x i32] [i32 65, i32 65], align 4
@out_prec_get_dht = constant [2 x i32] zeroinitializer, align 4
@out_num_get_dht = constant [2 x i32] [i32 0, i32 1], align 4
@izigzag_index = constant [64 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63], align 16
@ReadBuf = internal global i8* null, align 8
@main_result = common global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"Not Jpeg File!\0A\00", align 1
@p_jinfo_data_precision = common global i8 0, align 1
@p_jinfo_image_height = common global i16 0, align 2
@p_jinfo_image_width = common global i16 0, align 2
@p_jinfo_num_components = common global i8 0, align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"length         = %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"data_precision = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"image_height   = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"image_width    = %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"num_components = %d\0A\00", align 1
@p_jinfo_comps_info_index = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_id = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_h_samp_factor = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_v_samp_factor = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_quant_tbl_no = common global [3 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [21 x i8] c" index         = %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c" id            = %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c" h_samp_factor = %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c" v_samp_factor = %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c" quant_tbl_no  = %d\0A\0A\00", align 1
@p_jinfo_smp_fact = common global i32 0, align 4
@.str.11 = private unnamed_addr constant [27 x i8] c"\0ASampling Factor is 4:1:1\0A\00", align 1
@.str.12 = private unnamed_addr constant [27 x i8] c"\0ASampling Factor is 1:1:1\0A\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c" length = %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c" num_comp = %d\0A\00", align 1
@p_jinfo_comps_info_dc_tbl_no = common global [3 x i8] zeroinitializer, align 1
@p_jinfo_comps_info_ac_tbl_no = common global [3 x i8] zeroinitializer, align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"Bad Component ID!\0A\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c" comp_id       = %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c" dc_tbl_no     = %d\0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c" ac_tbl_no     = %d\0A\00", align 1
@p_jinfo_jpeg_data = common global i8* null, align 8
@.str.19 = private unnamed_addr constant [15 x i8] c" index = 0x%x\0A\00", align 1
@p_jinfo_ac_xhuff_tbl_bits = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_ac_xhuff_tbl_huffval = common global [2 x [257 x i32]] zeroinitializer, align 16
@p_jinfo_dc_xhuff_tbl_bits = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_dc_xhuff_tbl_huffval = common global [2 x [257 x i32]] zeroinitializer, align 16
@.str.20 = private unnamed_addr constant [13 x i8] c" count = %d\0A\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c" prec = %d\0A\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c" num  = %d\0A\00", align 1
@p_jinfo_quant_tbl_quantval = common global [4 x [64 x i32]] zeroinitializer, align 16
@.str.23 = private unnamed_addr constant [16 x i8] c"\0Amarker = 0x%x\0A\00", align 1
@zigzag_index = constant [64 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28, i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42, i32 3, i32 8, i32 12, i32 17, i32 25, i32 30, i32 41, i32 43, i32 9, i32 11, i32 18, i32 24, i32 31, i32 40, i32 44, i32 53, i32 10, i32 19, i32 23, i32 32, i32 39, i32 45, i32 52, i32 54, i32 20, i32 22, i32 33, i32 38, i32 46, i32 51, i32 55, i32 60, i32 21, i32 34, i32 37, i32 47, i32 50, i32 56, i32 59, i32 61, i32 35, i32 36, i32 48, i32 49, i32 57, i32 58, i32 62, i32 63], align 16
@p_jinfo_MCUWidth = common global i32 0, align 4
@rgb_buf = common global [4 x [3 x [64 x i32]]] zeroinitializer, align 16
@CurHuffReadBuf = common global i8* null, align 8
@.str.24 = private unnamed_addr constant [26 x i8] c"Decode 1:1:1 NumMCU = %d\0A\00", align 1
@p_jinfo_NumMCU = common global i32 0, align 4
@OutData_comp_buf = common global [3 x [5310 x i8]] zeroinitializer, align 16
@.str.25 = private unnamed_addr constant [26 x i8] c"Decode 4:1:1 NumMCU = %d\0A\00", align 1
@bit_set_mask = constant [32 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 16384, i32 32768, i32 65536, i32 131072, i32 262144, i32 524288, i32 1048576, i32 2097152, i32 4194304, i32 8388608, i32 16777216, i32 33554432, i32 67108864, i32 134217728, i32 268435456, i32 536870912, i32 1073741824, i32 -2147483648], align 16
@lmask = constant [32 x i32] [i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535, i32 131071, i32 262143, i32 524287, i32 1048575, i32 2097151, i32 4194303, i32 8388607, i32 16777215, i32 33554431, i32 67108863, i32 134217727, i32 268435455, i32 536870911, i32 1073741823, i32 2147483647, i32 -1], align 16
@read_position = internal global i32 -1, align 4
@current_read_byte = internal global i32 0, align 4
@.str.26 = private unnamed_addr constant [20 x i8] c"Huffman read error\0A\00", align 1
@p_jinfo_dc_dhuff_tbl_ml = common global [2 x i32] zeroinitializer, align 4
@p_jinfo_dc_dhuff_tbl_maxcode = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_dc_dhuff_tbl_mincode = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_dc_dhuff_tbl_valptr = common global [2 x [36 x i32]] zeroinitializer, align 16
@extend_mask = internal constant [20 x i32] [i32 -2, i32 -4, i32 -8, i32 -16, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048, i32 -4096, i32 -8192, i32 -16384, i32 -32768, i32 -65536, i32 -131072, i32 -262144, i32 -524288, i32 -1048576], align 16
@p_jinfo_ac_dhuff_tbl_ml = common global [2 x i32] zeroinitializer, align 4
@p_jinfo_ac_dhuff_tbl_maxcode = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_ac_dhuff_tbl_mincode = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_ac_dhuff_tbl_valptr = common global [2 x [36 x i32]] zeroinitializer, align 16
@p_jinfo_MCUHeight = common global i32 0, align 4
@OutData_image_width = common global i32 0, align 4
@OutData_image_height = common global i32 0, align 4
@OutData_comp_vpos = common global [3 x i32] zeroinitializer, align 4
@OutData_comp_hpos = common global [3 x i32] zeroinitializer, align 4
@JpegFileBuf = common global [5310 x i8] zeroinitializer, align 16
@.str.27 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.28 = private unnamed_addr constant [32 x i8] c"Unanticipated marker detected.\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define i32 @read_byte() #0 {
entry:
  %0 = load i8*, i8** @ReadBuf, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** @ReadBuf, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind ssp uwtable
define signext i16 @read_word() #0 {
entry:
  %c = alloca i16, align 2
  %0 = load i8*, i8** @ReadBuf, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** @ReadBuf, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %conv1 = trunc i32 %shl to i16
  store i16 %conv1, i16* %c, align 2
  %2 = load i8*, i8** @ReadBuf, align 8
  %incdec.ptr2 = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr2, i8** @ReadBuf, align 8
  %3 = load i8, i8* %2, align 1
  %conv3 = zext i8 %3 to i32
  %4 = load i16, i16* %c, align 2
  %conv4 = sext i16 %4 to i32
  %or = or i32 %conv4, %conv3
  %conv5 = trunc i32 %or to i16
  store i16 %conv5, i16* %c, align 2
  %5 = load i16, i16* %c, align 2
  ret i16 %5
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @first_marker() #0 {
entry:
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %call = call i32 @read_byte()
  store i32 %call, i32* %c1, align 4
  %call1 = call i32 @read_byte()
  store i32 %call1, i32* %c2, align 4
  %0 = load i32, i32* %c1, align 4
  %cmp = icmp ne i32 %0, 255
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %c2, align 4
  %cmp2 = icmp ne i32 %1, 216
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* @main_result, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @main_result, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 0) #3
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %c2, align 4
  ret i32 %3
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare void @exit(i32) #2

; Function Attrs: noinline nounwind ssp uwtable
define i32 @next_marker() #0 {
entry:
  %c = alloca i32, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %call = call i32 @read_byte()
  store i32 %call, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.cond
  %0 = load i32, i32* %c, align 4
  %cmp = icmp ne i32 %0, 255
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call i32 @read_byte()
  store i32 %call1, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %while.end
  %call2 = call i32 @read_byte()
  store i32 %call2, i32* %c, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %1 = load i32, i32* %c, align 4
  %cmp3 = icmp eq i32 %1, 255
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %2 = load i32, i32* %c, align 4
  %cmp4 = icmp ne i32 %2, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  br label %for.end

if.end:                                           ; preds = %do.end
  br label %for.cond

for.end:                                          ; preds = %if.then
  %3 = load i32, i32* %c, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define void @get_sof() #0 {
entry:
  %ci = alloca i32, align 4
  %c = alloca i32, align 4
  %length = alloca i32, align 4
  %p_comp_info_index = alloca i8*, align 8
  %p_comp_info_id = alloca i8*, align 8
  %p_comp_info_h_samp_factor = alloca i8*, align 8
  %p_comp_info_v_samp_factor = alloca i8*, align 8
  %p_comp_info_quant_tbl_no = alloca i8*, align 8
  %call = call signext i16 @read_word()
  %conv = sext i16 %call to i32
  store i32 %conv, i32* %length, align 4
  %call1 = call i32 @read_byte()
  %conv2 = trunc i32 %call1 to i8
  store i8 %conv2, i8* @p_jinfo_data_precision, align 1
  %call3 = call signext i16 @read_word()
  store i16 %call3, i16* @p_jinfo_image_height, align 2
  %call4 = call signext i16 @read_word()
  store i16 %call4, i16* @p_jinfo_image_width, align 2
  %call5 = call i32 @read_byte()
  %conv6 = trunc i32 %call5 to i8
  store i8 %conv6, i8* @p_jinfo_num_components, align 1
  %0 = load i32, i32* %length, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  %1 = load i8, i8* @p_jinfo_data_precision, align 1
  %conv8 = sext i8 %1 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i32 0, i32 0), i32 %conv8)
  %2 = load i16, i16* @p_jinfo_image_height, align 2
  %conv10 = sext i16 %2 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %conv10)
  %3 = load i16, i16* @p_jinfo_image_width, align 2
  %conv12 = sext i16 %3 to i32
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %conv12)
  %4 = load i8, i8* @p_jinfo_num_components, align 1
  %conv14 = sext i8 %4 to i32
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i32 %conv14)
  %5 = load i32, i32* %length, align 4
  %6 = load i32, i32* @out_length_get_sof, align 4
  %cmp = icmp ne i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* @main_result, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @main_result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i8, i8* @p_jinfo_data_precision, align 1
  %conv17 = sext i8 %8 to i32
  %9 = load i32, i32* @out_data_precision_get_sof, align 4
  %cmp18 = icmp ne i32 %conv17, %9
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end
  %10 = load i32, i32* @main_result, align 4
  %inc21 = add nsw i32 %10, 1
  store i32 %inc21, i32* @main_result, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end
  %11 = load i16, i16* @p_jinfo_image_height, align 2
  %conv23 = sext i16 %11 to i32
  %12 = load i32, i32* @out_p_jinfo_image_height_get_sof, align 4
  %cmp24 = icmp ne i32 %conv23, %12
  br i1 %cmp24, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end22
  %13 = load i32, i32* @main_result, align 4
  %inc27 = add nsw i32 %13, 1
  store i32 %inc27, i32* @main_result, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end22
  %14 = load i16, i16* @p_jinfo_image_width, align 2
  %conv29 = sext i16 %14 to i32
  %15 = load i32, i32* @out_p_jinfo_image_width_get_sof, align 4
  %cmp30 = icmp ne i32 %conv29, %15
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end28
  %16 = load i32, i32* @main_result, align 4
  %inc33 = add nsw i32 %16, 1
  store i32 %inc33, i32* @main_result, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end28
  %17 = load i8, i8* @p_jinfo_num_components, align 1
  %conv35 = sext i8 %17 to i32
  %18 = load i32, i32* @out_p_jinfo_num_components_get_sof, align 4
  %cmp36 = icmp ne i32 %conv35, %18
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end34
  %19 = load i32, i32* @main_result, align 4
  %inc39 = add nsw i32 %19, 1
  store i32 %inc39, i32* @main_result, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end34
  %20 = load i32, i32* %length, align 4
  %sub = sub nsw i32 %20, 8
  store i32 %sub, i32* %length, align 4
  store i32 0, i32* %ci, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end40
  %21 = load i32, i32* %ci, align 4
  %22 = load i8, i8* @p_jinfo_num_components, align 1
  %conv41 = sext i8 %22 to i32
  %cmp42 = icmp slt i32 %21, %conv41
  br i1 %cmp42, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %ci, align 4
  %idxprom = sext i32 %23 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_index, i64 0, i64 %idxprom
  store i8* %arrayidx, i8** %p_comp_info_index, align 8
  %24 = load i32, i32* %ci, align 4
  %idxprom44 = sext i32 %24 to i64
  %arrayidx45 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_id, i64 0, i64 %idxprom44
  store i8* %arrayidx45, i8** %p_comp_info_id, align 8
  %25 = load i32, i32* %ci, align 4
  %idxprom46 = sext i32 %25 to i64
  %arrayidx47 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i64 0, i64 %idxprom46
  store i8* %arrayidx47, i8** %p_comp_info_h_samp_factor, align 8
  %26 = load i32, i32* %ci, align 4
  %idxprom48 = sext i32 %26 to i64
  %arrayidx49 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_v_samp_factor, i64 0, i64 %idxprom48
  store i8* %arrayidx49, i8** %p_comp_info_v_samp_factor, align 8
  %27 = load i32, i32* %ci, align 4
  %idxprom50 = sext i32 %27 to i64
  %arrayidx51 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i64 0, i64 %idxprom50
  store i8* %arrayidx51, i8** %p_comp_info_quant_tbl_no, align 8
  %28 = load i32, i32* %ci, align 4
  %conv52 = trunc i32 %28 to i8
  %29 = load i8*, i8** %p_comp_info_index, align 8
  store i8 %conv52, i8* %29, align 1
  %call53 = call i32 @read_byte()
  %conv54 = trunc i32 %call53 to i8
  %30 = load i8*, i8** %p_comp_info_id, align 8
  store i8 %conv54, i8* %30, align 1
  %call55 = call i32 @read_byte()
  store i32 %call55, i32* %c, align 4
  %31 = load i32, i32* %c, align 4
  %shr = ashr i32 %31, 4
  %and = and i32 %shr, 15
  %conv56 = trunc i32 %and to i8
  %32 = load i8*, i8** %p_comp_info_h_samp_factor, align 8
  store i8 %conv56, i8* %32, align 1
  %33 = load i32, i32* %c, align 4
  %and57 = and i32 %33, 15
  %conv58 = trunc i32 %and57 to i8
  %34 = load i8*, i8** %p_comp_info_v_samp_factor, align 8
  store i8 %conv58, i8* %34, align 1
  %call59 = call i32 @read_byte()
  %conv60 = trunc i32 %call59 to i8
  %35 = load i8*, i8** %p_comp_info_quant_tbl_no, align 8
  store i8 %conv60, i8* %35, align 1
  %36 = load i8*, i8** %p_comp_info_index, align 8
  %37 = load i8, i8* %36, align 1
  %conv61 = sext i8 %37 to i32
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i32 %conv61)
  %38 = load i8*, i8** %p_comp_info_id, align 8
  %39 = load i8, i8* %38, align 1
  %conv63 = sext i8 %39 to i32
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i32 %conv63)
  %40 = load i8*, i8** %p_comp_info_h_samp_factor, align 8
  %41 = load i8, i8* %40, align 1
  %conv65 = sext i8 %41 to i32
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0), i32 %conv65)
  %42 = load i8*, i8** %p_comp_info_v_samp_factor, align 8
  %43 = load i8, i8* %42, align 1
  %conv67 = sext i8 %43 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0), i32 %conv67)
  %44 = load i8*, i8** %p_comp_info_quant_tbl_no, align 8
  %45 = load i8, i8* %44, align 1
  %conv69 = sext i8 %45 to i32
  %call70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), i32 %conv69)
  %46 = load i8*, i8** %p_comp_info_index, align 8
  %47 = load i8, i8* %46, align 1
  %conv71 = sext i8 %47 to i32
  %48 = load i32, i32* %ci, align 4
  %idxprom72 = sext i32 %48 to i64
  %arrayidx73 = getelementptr inbounds [3 x i32], [3 x i32]* @out_index_get_sof, i64 0, i64 %idxprom72
  %49 = load i32, i32* %arrayidx73, align 4
  %cmp74 = icmp ne i32 %conv71, %49
  br i1 %cmp74, label %if.then76, label %if.end78

if.then76:                                        ; preds = %for.body
  %50 = load i32, i32* @main_result, align 4
  %inc77 = add nsw i32 %50, 1
  store i32 %inc77, i32* @main_result, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %for.body
  %51 = load i8*, i8** %p_comp_info_id, align 8
  %52 = load i8, i8* %51, align 1
  %conv79 = sext i8 %52 to i32
  %53 = load i32, i32* %ci, align 4
  %idxprom80 = sext i32 %53 to i64
  %arrayidx81 = getelementptr inbounds [3 x i32], [3 x i32]* @out_id_get_sof, i64 0, i64 %idxprom80
  %54 = load i32, i32* %arrayidx81, align 4
  %cmp82 = icmp ne i32 %conv79, %54
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end78
  %55 = load i32, i32* @main_result, align 4
  %inc85 = add nsw i32 %55, 1
  store i32 %inc85, i32* @main_result, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end78
  %56 = load i8*, i8** %p_comp_info_h_samp_factor, align 8
  %57 = load i8, i8* %56, align 1
  %conv87 = sext i8 %57 to i32
  %58 = load i32, i32* %ci, align 4
  %idxprom88 = sext i32 %58 to i64
  %arrayidx89 = getelementptr inbounds [3 x i32], [3 x i32]* @out_h_samp_factor_get_sof, i64 0, i64 %idxprom88
  %59 = load i32, i32* %arrayidx89, align 4
  %cmp90 = icmp ne i32 %conv87, %59
  br i1 %cmp90, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.end86
  %60 = load i32, i32* @main_result, align 4
  %inc93 = add nsw i32 %60, 1
  store i32 %inc93, i32* @main_result, align 4
  br label %if.end94

if.end94:                                         ; preds = %if.then92, %if.end86
  %61 = load i8*, i8** %p_comp_info_v_samp_factor, align 8
  %62 = load i8, i8* %61, align 1
  %conv95 = sext i8 %62 to i32
  %63 = load i32, i32* %ci, align 4
  %idxprom96 = sext i32 %63 to i64
  %arrayidx97 = getelementptr inbounds [3 x i32], [3 x i32]* @out_v_samp_factor_get_sof, i64 0, i64 %idxprom96
  %64 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp ne i32 %conv95, %64
  br i1 %cmp98, label %if.then100, label %if.end102

if.then100:                                       ; preds = %if.end94
  %65 = load i32, i32* @main_result, align 4
  %inc101 = add nsw i32 %65, 1
  store i32 %inc101, i32* @main_result, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %if.end94
  %66 = load i8*, i8** %p_comp_info_quant_tbl_no, align 8
  %67 = load i8, i8* %66, align 1
  %conv103 = sext i8 %67 to i32
  %68 = load i32, i32* %ci, align 4
  %idxprom104 = sext i32 %68 to i64
  %arrayidx105 = getelementptr inbounds [3 x i32], [3 x i32]* @out_quant_tbl_no_get_sof, i64 0, i64 %idxprom104
  %69 = load i32, i32* %arrayidx105, align 4
  %cmp106 = icmp ne i32 %conv103, %69
  br i1 %cmp106, label %if.then108, label %if.end110

if.then108:                                       ; preds = %if.end102
  %70 = load i32, i32* @main_result, align 4
  %inc109 = add nsw i32 %70, 1
  store i32 %inc109, i32* @main_result, align 4
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %if.end102
  br label %for.inc

for.inc:                                          ; preds = %if.end110
  %71 = load i32, i32* %ci, align 4
  %inc111 = add nsw i32 %71, 1
  store i32 %inc111, i32* %ci, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @p_jinfo_comps_info_h_samp_factor, i64 0, i64 0), align 1
  %conv112 = sext i8 %72 to i32
  %cmp113 = icmp eq i32 %conv112, 2
  br i1 %cmp113, label %if.then115, label %if.else

if.then115:                                       ; preds = %for.end
  store i32 2, i32* @p_jinfo_smp_fact, align 4
  %call116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end118

if.else:                                          ; preds = %for.end
  store i32 0, i32* @p_jinfo_smp_fact, align 4
  %call117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i32 0, i32 0))
  br label %if.end118

if.end118:                                        ; preds = %if.else, %if.then115
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @get_sos() #0 {
entry:
  %length = alloca i32, align 4
  %num_comp = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %cc = alloca i32, align 4
  %ci = alloca i32, align 4
  %j = alloca i32, align 4
  %p_comp_info_id = alloca i8*, align 8
  %p_comp_info_dc_tbl_no = alloca i8*, align 8
  %p_comp_info_ac_tbl_no = alloca i8*, align 8
  %call = call signext i16 @read_word()
  %conv = sext i16 %call to i32
  store i32 %conv, i32* %length, align 4
  %call1 = call i32 @read_byte()
  store i32 %call1, i32* %num_comp, align 4
  %0 = load i32, i32* %length, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* %num_comp, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %length, align 4
  %3 = load i32, i32* @out_length_get_sos, align 4
  %cmp = icmp ne i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @main_result, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @main_result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %num_comp, align 4
  %6 = load i32, i32* @out_num_comp_get_sos, align 4
  %cmp5 = icmp ne i32 %5, %6
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %7 = load i32, i32* @main_result, align 4
  %inc8 = add nsw i32 %7, 1
  store i32 %inc8, i32* @main_result, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc63, %if.end9
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %num_comp, align 4
  %cmp10 = icmp slt i32 %8, %9
  br i1 %cmp10, label %for.body, label %for.end65

for.body:                                         ; preds = %for.cond
  %call12 = call i32 @read_byte()
  store i32 %call12, i32* %cc, align 4
  %call13 = call i32 @read_byte()
  store i32 %call13, i32* %c, align 4
  store i32 0, i32* %ci, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %for.body
  %10 = load i32, i32* %ci, align 4
  %11 = load i8, i8* @p_jinfo_num_components, align 1
  %conv15 = sext i8 %11 to i32
  %cmp16 = icmp slt i32 %10, %conv15
  br i1 %cmp16, label %for.body18, label %for.end

for.body18:                                       ; preds = %for.cond14
  %12 = load i32, i32* %ci, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_id, i64 0, i64 %idxprom
  store i8* %arrayidx, i8** %p_comp_info_id, align 8
  %13 = load i32, i32* %ci, align 4
  %idxprom19 = sext i32 %13 to i64
  %arrayidx20 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i64 0, i64 %idxprom19
  store i8* %arrayidx20, i8** %p_comp_info_dc_tbl_no, align 8
  %14 = load i32, i32* %ci, align 4
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_ac_tbl_no, i64 0, i64 %idxprom21
  store i8* %arrayidx22, i8** %p_comp_info_ac_tbl_no, align 8
  %15 = load i32, i32* %cc, align 4
  %16 = load i8*, i8** %p_comp_info_id, align 8
  %17 = load i8, i8* %16, align 1
  %conv23 = sext i8 %17 to i32
  %cmp24 = icmp eq i32 %15, %conv23
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.body18
  br label %id_found

if.end27:                                         ; preds = %for.body18
  br label %for.inc

for.inc:                                          ; preds = %if.end27
  %18 = load i32, i32* %ci, align 4
  %inc28 = add nsw i32 %18, 1
  store i32 %inc28, i32* %ci, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  %19 = load i32, i32* @main_result, align 4
  %inc29 = add nsw i32 %19, 1
  store i32 %inc29, i32* @main_result, align 4
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 0) #3
  unreachable

id_found:                                         ; preds = %if.then26
  %20 = load i32, i32* %c, align 4
  %shr = ashr i32 %20, 4
  %and = and i32 %shr, 15
  %conv31 = trunc i32 %and to i8
  %21 = load i8*, i8** %p_comp_info_dc_tbl_no, align 8
  store i8 %conv31, i8* %21, align 1
  %22 = load i32, i32* %c, align 4
  %and32 = and i32 %22, 15
  %conv33 = trunc i32 %and32 to i8
  %23 = load i8*, i8** %p_comp_info_ac_tbl_no, align 8
  store i8 %conv33, i8* %23, align 1
  %24 = load i32, i32* %cc, align 4
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0), i32 %24)
  %25 = load i8*, i8** %p_comp_info_dc_tbl_no, align 8
  %26 = load i8, i8* %25, align 1
  %conv35 = sext i8 %26 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0), i32 %conv35)
  %27 = load i8*, i8** %p_comp_info_ac_tbl_no, align 8
  %28 = load i8, i8* %27, align 1
  %conv37 = sext i8 %28 to i32
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i32 0, i32 0), i32 %conv37)
  %29 = load i32, i32* %cc, align 4
  %30 = load i32, i32* @i_get_sos, align 4
  %idxprom39 = sext i32 %30 to i64
  %arrayidx40 = getelementptr inbounds [3 x i32], [3 x i32]* @out_comp_id_get_sos, i64 0, i64 %idxprom39
  %31 = load i32, i32* %arrayidx40, align 4
  %cmp41 = icmp ne i32 %29, %31
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %id_found
  %32 = load i32, i32* @main_result, align 4
  %inc44 = add nsw i32 %32, 1
  store i32 %inc44, i32* @main_result, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %id_found
  %33 = load i8*, i8** %p_comp_info_dc_tbl_no, align 8
  %34 = load i8, i8* %33, align 1
  %conv46 = sext i8 %34 to i32
  %35 = load i32, i32* @i_get_sos, align 4
  %idxprom47 = sext i32 %35 to i64
  %arrayidx48 = getelementptr inbounds [3 x i32], [3 x i32]* @out_dc_tbl_no_get_sos, i64 0, i64 %idxprom47
  %36 = load i32, i32* %arrayidx48, align 4
  %cmp49 = icmp ne i32 %conv46, %36
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.end45
  %37 = load i32, i32* @main_result, align 4
  %inc52 = add nsw i32 %37, 1
  store i32 %inc52, i32* @main_result, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.end45
  %38 = load i8*, i8** %p_comp_info_ac_tbl_no, align 8
  %39 = load i8, i8* %38, align 1
  %conv54 = sext i8 %39 to i32
  %40 = load i32, i32* @i_get_sos, align 4
  %idxprom55 = sext i32 %40 to i64
  %arrayidx56 = getelementptr inbounds [3 x i32], [3 x i32]* @out_ac_tbl_no_get_sos, i64 0, i64 %idxprom55
  %41 = load i32, i32* %arrayidx56, align 4
  %cmp57 = icmp ne i32 %conv54, %41
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.end53
  %42 = load i32, i32* @main_result, align 4
  %inc60 = add nsw i32 %42, 1
  store i32 %inc60, i32* @main_result, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.end53
  %43 = load i32, i32* @i_get_sos, align 4
  %inc62 = add nsw i32 %43, 1
  store i32 %inc62, i32* @i_get_sos, align 4
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %44 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %44, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond

for.end65:                                        ; preds = %for.cond
  store i32 3, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end65
  %45 = load i32, i32* %j, align 4
  %dec = add nsw i32 %45, -1
  store i32 %dec, i32* %j, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call66 = call i32 @read_byte()
  store i32 %call66, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %46 = load i8*, i8** @ReadBuf, align 8
  store i8* %46, i8** @p_jinfo_jpeg_data, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @get_dht() #0 {
entry:
  %length = alloca i32, align 4
  %index = alloca i32, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %p_xhtbl_bits = alloca i32*, align 8
  %p_xhtbl_huffval = alloca i32*, align 8
  %call = call signext i16 @read_word()
  %conv = sext i16 %call to i32
  store i32 %conv, i32* %length, align 4
  %0 = load i32, i32* %length, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %length, align 4
  %1 = load i32, i32* %length, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %length, align 4
  %3 = load i32, i32* @i_get_dht, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @out_length_get_dht, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @main_result, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @main_result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %for.end55, %if.end
  %6 = load i32, i32* %length, align 4
  %cmp3 = icmp sgt i32 %6, 16
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call5 = call i32 @read_byte()
  store i32 %call5, i32* %index, align 4
  %7 = load i32, i32* %index, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* %index, align 4
  %9 = load i32, i32* @i_get_dht, align 4
  %idxprom7 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* @out_index_get_dht, i64 0, i64 %idxprom7
  %10 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp ne i32 %8, %10
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %while.body
  %11 = load i32, i32* @main_result, align 4
  %inc12 = add nsw i32 %11, 1
  store i32 %inc12, i32* @main_result, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %while.body
  %12 = load i32, i32* %index, align 4
  %and = and i32 %12, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.end13
  %13 = load i32, i32* %index, align 4
  %sub15 = sub nsw i32 %13, 16
  store i32 %sub15, i32* %index, align 4
  %14 = load i32, i32* %index, align 4
  %idxprom16 = sext i32 %14 to i64
  %arrayidx17 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i64 0, i64 %idxprom16
  %arraydecay = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx17, i32 0, i32 0
  store i32* %arraydecay, i32** %p_xhtbl_bits, align 8
  %15 = load i32, i32* %index, align 4
  %idxprom18 = sext i32 %15 to i64
  %arrayidx19 = getelementptr inbounds [2 x [257 x i32]], [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i64 0, i64 %idxprom18
  %arraydecay20 = getelementptr inbounds [257 x i32], [257 x i32]* %arrayidx19, i32 0, i32 0
  store i32* %arraydecay20, i32** %p_xhtbl_huffval, align 8
  br label %if.end27

if.else:                                          ; preds = %if.end13
  %16 = load i32, i32* %index, align 4
  %idxprom21 = sext i32 %16 to i64
  %arrayidx22 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i64 0, i64 %idxprom21
  %arraydecay23 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx22, i32 0, i32 0
  store i32* %arraydecay23, i32** %p_xhtbl_bits, align 8
  %17 = load i32, i32* %index, align 4
  %idxprom24 = sext i32 %17 to i64
  %arrayidx25 = getelementptr inbounds [2 x [257 x i32]], [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i64 0, i64 %idxprom24
  %arraydecay26 = getelementptr inbounds [257 x i32], [257 x i32]* %arrayidx25, i32 0, i32 0
  store i32* %arraydecay26, i32** %p_xhtbl_huffval, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then14
  store i32 0, i32* %count, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end27
  %18 = load i32, i32* %i, align 4
  %cmp28 = icmp sle i32 %18, 16
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call30 = call i32 @read_byte()
  %19 = load i32*, i32** %p_xhtbl_bits, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %20 to i64
  %arrayidx32 = getelementptr inbounds i32, i32* %19, i64 %idxprom31
  store i32 %call30, i32* %arrayidx32, align 4
  %21 = load i32*, i32** %p_xhtbl_bits, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %22 to i64
  %arrayidx34 = getelementptr inbounds i32, i32* %21, i64 %idxprom33
  %23 = load i32, i32* %arrayidx34, align 4
  %24 = load i32, i32* %count, align 4
  %add = add nsw i32 %24, %23
  store i32 %add, i32* %count, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %inc35 = add nsw i32 %25, 1
  store i32 %inc35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %count, align 4
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i32 0, i32 0), i32 %26)
  %27 = load i32, i32* %count, align 4
  %28 = load i32, i32* @i_get_dht, align 4
  %idxprom37 = sext i32 %28 to i64
  %arrayidx38 = getelementptr inbounds [4 x i32], [4 x i32]* @out_count_get_dht, i64 0, i64 %idxprom37
  %29 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp ne i32 %27, %29
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %for.end
  %30 = load i32, i32* @main_result, align 4
  %inc42 = add nsw i32 %30, 1
  store i32 %inc42, i32* @main_result, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %for.end
  %31 = load i32, i32* @i_get_dht, align 4
  %inc44 = add nsw i32 %31, 1
  store i32 %inc44, i32* @i_get_dht, align 4
  %32 = load i32, i32* %length, align 4
  %sub45 = sub nsw i32 %32, 17
  store i32 %sub45, i32* %length, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc53, %if.end43
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %count, align 4
  %cmp47 = icmp slt i32 %33, %34
  br i1 %cmp47, label %for.body49, label %for.end55

for.body49:                                       ; preds = %for.cond46
  %call50 = call i32 @read_byte()
  %35 = load i32*, i32** %p_xhtbl_huffval, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %36 to i64
  %arrayidx52 = getelementptr inbounds i32, i32* %35, i64 %idxprom51
  store i32 %call50, i32* %arrayidx52, align 4
  br label %for.inc53

for.inc53:                                        ; preds = %for.body49
  %37 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %37, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond46

for.end55:                                        ; preds = %for.cond46
  %38 = load i32, i32* %count, align 4
  %39 = load i32, i32* %length, align 4
  %sub56 = sub nsw i32 %39, %38
  store i32 %sub56, i32* %length, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @get_dqt() #0 {
entry:
  %length = alloca i32, align 4
  %prec = alloca i32, align 4
  %num = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i32, align 4
  %p_quant_tbl = alloca i32*, align 8
  %call = call signext i16 @read_word()
  %conv = sext i16 %call to i32
  store i32 %conv, i32* %length, align 4
  %0 = load i32, i32* %length, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %length, align 4
  %1 = load i32, i32* %length, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %length, align 4
  %3 = load i32, i32* @i_get_dqt, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* @out_length_get_dqt, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @main_result, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @main_result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end45, %if.end
  %6 = load i32, i32* %length, align 4
  %cmp4 = icmp sgt i32 %6, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call6 = call i32 @read_byte()
  store i32 %call6, i32* %num, align 4
  %7 = load i32, i32* %num, align 4
  %shr = ashr i32 %7, 4
  store i32 %shr, i32* %prec, align 4
  %8 = load i32, i32* %num, align 4
  %and = and i32 %8, 15
  store i32 %and, i32* %num, align 4
  %9 = load i32, i32* %prec, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i32 %9)
  %10 = load i32, i32* %num, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i32 %10)
  %11 = load i32, i32* %prec, align 4
  %12 = load i32, i32* @i_get_dqt, align 4
  %idxprom9 = sext i32 %12 to i64
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* @out_prec_get_dht, i64 0, i64 %idxprom9
  %13 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %11, %13
  br i1 %cmp11, label %if.then13, label %if.end15

if.then13:                                        ; preds = %while.body
  %14 = load i32, i32* @main_result, align 4
  %inc14 = add nsw i32 %14, 1
  store i32 %inc14, i32* @main_result, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %while.body
  %15 = load i32, i32* %num, align 4
  %16 = load i32, i32* @i_get_dqt, align 4
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* @out_num_get_dht, i64 0, i64 %idxprom16
  %17 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp ne i32 %15, %17
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end15
  %18 = load i32, i32* @main_result, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* @main_result, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end15
  %19 = load i32, i32* @i_get_dqt, align 4
  %inc23 = add nsw i32 %19, 1
  store i32 %inc23, i32* @i_get_dqt, align 4
  %20 = load i32, i32* %num, align 4
  %idxprom24 = sext i32 %20 to i64
  %arrayidx25 = getelementptr inbounds [4 x [64 x i32]], [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i64 0, i64 %idxprom24
  %arrayidx26 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx25, i64 0, i64 64
  store i32* %arrayidx26, i32** %p_quant_tbl, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end22
  %21 = load i32, i32* %i, align 4
  %cmp27 = icmp slt i32 %21, 64
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i32, i32* %prec, align 4
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then29, label %if.else

if.then29:                                        ; preds = %for.body
  %call30 = call signext i16 @read_word()
  %conv31 = sext i16 %call30 to i32
  store i32 %conv31, i32* %tmp, align 4
  br label %if.end33

if.else:                                          ; preds = %for.body
  %call32 = call i32 @read_byte()
  store i32 %call32, i32* %tmp, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then29
  %23 = load i32, i32* %tmp, align 4
  %conv34 = trunc i32 %23 to i16
  %conv35 = zext i16 %conv34 to i32
  %24 = load i32*, i32** %p_quant_tbl, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %25 to i64
  %arrayidx37 = getelementptr inbounds [64 x i32], [64 x i32]* @izigzag_index, i64 0, i64 %idxprom36
  %26 = load i32, i32* %arrayidx37, align 4
  %idxprom38 = sext i32 %26 to i64
  %arrayidx39 = getelementptr inbounds i32, i32* %24, i64 %idxprom38
  store i32 %conv35, i32* %arrayidx39, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end33
  %27 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %27, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %length, align 4
  %sub41 = sub nsw i32 %28, 65
  store i32 %sub41, i32* %length, align 4
  %29 = load i32, i32* %prec, align 4
  %tobool42 = icmp ne i32 %29, 0
  br i1 %tobool42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %for.end
  %30 = load i32, i32* %length, align 4
  %sub44 = sub nsw i32 %30, 64
  store i32 %sub44, i32* %length, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %for.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @read_markers(i8* %buf) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %unread_marker = alloca i32, align 4
  %sow_SOI = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  store i8* %0, i8** @ReadBuf, align 8
  store i32 0, i32* %sow_SOI, align 4
  store i32 0, i32* %unread_marker, align 4
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %1 = load i32, i32* %sow_SOI, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.cond
  %call = call i32 @first_marker()
  store i32 %call, i32* %unread_marker, align 4
  br label %if.end

if.else:                                          ; preds = %for.cond
  %call1 = call i32 @next_marker()
  store i32 %call1, i32* %unread_marker, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i32, i32* %unread_marker, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i32 %2)
  %3 = load i32, i32* %unread_marker, align 4
  %4 = load i32, i32* @i_marker, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @i_marker, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* @out_unread_marker, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %3, %5
  br i1 %cmp, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %6 = load i32, i32* @main_result, align 4
  %inc4 = add nsw i32 %6, 1
  store i32 %inc4, i32* @main_result, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %7 = load i32, i32* %unread_marker, align 4
  switch i32 %7, label %sw.epilog [
    i32 216, label %sw.bb
    i32 192, label %sw.bb6
    i32 218, label %sw.bb7
    i32 196, label %sw.bb8
    i32 219, label %sw.bb9
    i32 217, label %sw.bb10
  ]

sw.bb:                                            ; preds = %if.end5
  store i32 1, i32* %sow_SOI, align 4
  br label %sw.epilog

sw.bb6:                                           ; preds = %if.end5
  call void @get_sof()
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end5
  call void @get_sos()
  br label %return

sw.bb8:                                           ; preds = %if.end5
  call void @get_dht()
  br label %sw.epilog

sw.bb9:                                           ; preds = %if.end5
  call void @get_dqt()
  br label %sw.epilog

sw.bb10:                                          ; preds = %if.end5
  br label %return

sw.epilog:                                        ; preds = %if.end5, %sw.bb9, %sw.bb8, %sw.bb6, %sw.bb
  br label %for.cond

return:                                           ; preds = %sw.bb10, %sw.bb7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @ChenIDct(i32* %x, i32* %y) #0 {
entry:
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %aptr = alloca i32*, align 8
  %a0 = alloca i32, align 4
  %a1 = alloca i32, align 4
  %a2 = alloca i32, align 4
  %a3 = alloca i32, align 4
  %b0 = alloca i32, align 4
  %b1 = alloca i32, align 4
  %b2 = alloca i32, align 4
  %b3 = alloca i32, align 4
  %c0 = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c3 = alloca i32, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i32, i32* %1, i64 %idx.ext
  store i32* %add.ptr, i32** %aptr, align 8
  %3 = load i32*, i32** %aptr, align 8
  %4 = load i32, i32* %3, align 4
  %shl = shl i32 %4, 2
  store i32 %shl, i32* %b0, align 4
  %5 = load i32*, i32** %aptr, align 8
  %add.ptr1 = getelementptr inbounds i32, i32* %5, i64 8
  store i32* %add.ptr1, i32** %aptr, align 8
  %6 = load i32*, i32** %aptr, align 8
  %7 = load i32, i32* %6, align 4
  %shl2 = shl i32 %7, 2
  store i32 %shl2, i32* %a0, align 4
  %8 = load i32*, i32** %aptr, align 8
  %add.ptr3 = getelementptr inbounds i32, i32* %8, i64 8
  store i32* %add.ptr3, i32** %aptr, align 8
  %9 = load i32*, i32** %aptr, align 8
  %10 = load i32, i32* %9, align 4
  %shl4 = shl i32 %10, 2
  store i32 %shl4, i32* %b2, align 4
  %11 = load i32*, i32** %aptr, align 8
  %add.ptr5 = getelementptr inbounds i32, i32* %11, i64 8
  store i32* %add.ptr5, i32** %aptr, align 8
  %12 = load i32*, i32** %aptr, align 8
  %13 = load i32, i32* %12, align 4
  %shl6 = shl i32 %13, 2
  store i32 %shl6, i32* %a1, align 4
  %14 = load i32*, i32** %aptr, align 8
  %add.ptr7 = getelementptr inbounds i32, i32* %14, i64 8
  store i32* %add.ptr7, i32** %aptr, align 8
  %15 = load i32*, i32** %aptr, align 8
  %16 = load i32, i32* %15, align 4
  %shl8 = shl i32 %16, 2
  store i32 %shl8, i32* %b1, align 4
  %17 = load i32*, i32** %aptr, align 8
  %add.ptr9 = getelementptr inbounds i32, i32* %17, i64 8
  store i32* %add.ptr9, i32** %aptr, align 8
  %18 = load i32*, i32** %aptr, align 8
  %19 = load i32, i32* %18, align 4
  %shl10 = shl i32 %19, 2
  store i32 %shl10, i32* %a2, align 4
  %20 = load i32*, i32** %aptr, align 8
  %add.ptr11 = getelementptr inbounds i32, i32* %20, i64 8
  store i32* %add.ptr11, i32** %aptr, align 8
  %21 = load i32*, i32** %aptr, align 8
  %22 = load i32, i32* %21, align 4
  %shl12 = shl i32 %22, 2
  store i32 %shl12, i32* %b3, align 4
  %23 = load i32*, i32** %aptr, align 8
  %add.ptr13 = getelementptr inbounds i32, i32* %23, i64 8
  store i32* %add.ptr13, i32** %aptr, align 8
  %24 = load i32*, i32** %aptr, align 8
  %25 = load i32, i32* %24, align 4
  %shl14 = shl i32 %25, 2
  store i32 %shl14, i32* %a3, align 4
  %26 = load i32, i32* %a0, align 4
  %conv = sext i32 %26 to i64
  %mul = mul nsw i64 100, %conv
  %27 = load i32, i32* %a3, align 4
  %conv15 = sext i32 %27 to i64
  %mul16 = mul nsw i64 502, %conv15
  %sub = sub nsw i64 %mul, %mul16
  %shr = ashr i64 %sub, 9
  %conv17 = trunc i64 %shr to i32
  store i32 %conv17, i32* %c0, align 4
  %28 = load i32, i32* %a2, align 4
  %conv18 = sext i32 %28 to i64
  %mul19 = mul nsw i64 426, %conv18
  %29 = load i32, i32* %a1, align 4
  %conv20 = sext i32 %29 to i64
  %mul21 = mul nsw i64 284, %conv20
  %sub22 = sub nsw i64 %mul19, %mul21
  %shr23 = ashr i64 %sub22, 9
  %conv24 = trunc i64 %shr23 to i32
  store i32 %conv24, i32* %c1, align 4
  %30 = load i32, i32* %a1, align 4
  %conv25 = sext i32 %30 to i64
  %mul26 = mul nsw i64 426, %conv25
  %31 = load i32, i32* %a2, align 4
  %conv27 = sext i32 %31 to i64
  %mul28 = mul nsw i64 284, %conv27
  %add = add nsw i64 %mul26, %mul28
  %shr29 = ashr i64 %add, 9
  %conv30 = trunc i64 %shr29 to i32
  store i32 %conv30, i32* %c2, align 4
  %32 = load i32, i32* %a0, align 4
  %conv31 = sext i32 %32 to i64
  %mul32 = mul nsw i64 502, %conv31
  %33 = load i32, i32* %a3, align 4
  %conv33 = sext i32 %33 to i64
  %mul34 = mul nsw i64 100, %conv33
  %add35 = add nsw i64 %mul32, %mul34
  %shr36 = ashr i64 %add35, 9
  %conv37 = trunc i64 %shr36 to i32
  store i32 %conv37, i32* %c3, align 4
  %34 = load i32, i32* %b0, align 4
  %35 = load i32, i32* %b1, align 4
  %add38 = add nsw i32 %34, %35
  %conv39 = sext i32 %add38 to i64
  %mul40 = mul nsw i64 362, %conv39
  %shr41 = ashr i64 %mul40, 9
  %conv42 = trunc i64 %shr41 to i32
  store i32 %conv42, i32* %a0, align 4
  %36 = load i32, i32* %b0, align 4
  %37 = load i32, i32* %b1, align 4
  %sub43 = sub nsw i32 %36, %37
  %conv44 = sext i32 %sub43 to i64
  %mul45 = mul nsw i64 362, %conv44
  %shr46 = ashr i64 %mul45, 9
  %conv47 = trunc i64 %shr46 to i32
  store i32 %conv47, i32* %a1, align 4
  %38 = load i32, i32* %b2, align 4
  %conv48 = sext i32 %38 to i64
  %mul49 = mul nsw i64 196, %conv48
  %39 = load i32, i32* %b3, align 4
  %conv50 = sext i32 %39 to i64
  %mul51 = mul nsw i64 473, %conv50
  %sub52 = sub nsw i64 %mul49, %mul51
  %shr53 = ashr i64 %sub52, 9
  %conv54 = trunc i64 %shr53 to i32
  store i32 %conv54, i32* %a2, align 4
  %40 = load i32, i32* %b2, align 4
  %conv55 = sext i32 %40 to i64
  %mul56 = mul nsw i64 473, %conv55
  %41 = load i32, i32* %b3, align 4
  %conv57 = sext i32 %41 to i64
  %mul58 = mul nsw i64 196, %conv57
  %add59 = add nsw i64 %mul56, %mul58
  %shr60 = ashr i64 %add59, 9
  %conv61 = trunc i64 %shr60 to i32
  store i32 %conv61, i32* %a3, align 4
  %42 = load i32, i32* %a0, align 4
  %43 = load i32, i32* %a3, align 4
  %add62 = add nsw i32 %42, %43
  store i32 %add62, i32* %b0, align 4
  %44 = load i32, i32* %a1, align 4
  %45 = load i32, i32* %a2, align 4
  %add63 = add nsw i32 %44, %45
  store i32 %add63, i32* %b1, align 4
  %46 = load i32, i32* %a1, align 4
  %47 = load i32, i32* %a2, align 4
  %sub64 = sub nsw i32 %46, %47
  store i32 %sub64, i32* %b2, align 4
  %48 = load i32, i32* %a0, align 4
  %49 = load i32, i32* %a3, align 4
  %sub65 = sub nsw i32 %48, %49
  store i32 %sub65, i32* %b3, align 4
  %50 = load i32, i32* %c0, align 4
  %51 = load i32, i32* %c1, align 4
  %add66 = add nsw i32 %50, %51
  store i32 %add66, i32* %a0, align 4
  %52 = load i32, i32* %c0, align 4
  %53 = load i32, i32* %c1, align 4
  %sub67 = sub nsw i32 %52, %53
  store i32 %sub67, i32* %a1, align 4
  %54 = load i32, i32* %c3, align 4
  %55 = load i32, i32* %c2, align 4
  %sub68 = sub nsw i32 %54, %55
  store i32 %sub68, i32* %a2, align 4
  %56 = load i32, i32* %c3, align 4
  %57 = load i32, i32* %c2, align 4
  %add69 = add nsw i32 %56, %57
  store i32 %add69, i32* %a3, align 4
  %58 = load i32, i32* %a0, align 4
  store i32 %58, i32* %c0, align 4
  %59 = load i32, i32* %a2, align 4
  %60 = load i32, i32* %a1, align 4
  %sub70 = sub nsw i32 %59, %60
  %conv71 = sext i32 %sub70 to i64
  %mul72 = mul nsw i64 362, %conv71
  %shr73 = ashr i64 %mul72, 9
  %conv74 = trunc i64 %shr73 to i32
  store i32 %conv74, i32* %c1, align 4
  %61 = load i32, i32* %a2, align 4
  %62 = load i32, i32* %a1, align 4
  %add75 = add nsw i32 %61, %62
  %conv76 = sext i32 %add75 to i64
  %mul77 = mul nsw i64 362, %conv76
  %shr78 = ashr i64 %mul77, 9
  %conv79 = trunc i64 %shr78 to i32
  store i32 %conv79, i32* %c2, align 4
  %63 = load i32, i32* %a3, align 4
  store i32 %63, i32* %c3, align 4
  %64 = load i32*, i32** %y.addr, align 8
  %65 = load i32, i32* %i, align 4
  %idx.ext80 = sext i32 %65 to i64
  %add.ptr81 = getelementptr inbounds i32, i32* %64, i64 %idx.ext80
  store i32* %add.ptr81, i32** %aptr, align 8
  %66 = load i32, i32* %b0, align 4
  %67 = load i32, i32* %c3, align 4
  %add82 = add nsw i32 %66, %67
  %68 = load i32*, i32** %aptr, align 8
  store i32 %add82, i32* %68, align 4
  %69 = load i32*, i32** %aptr, align 8
  %add.ptr83 = getelementptr inbounds i32, i32* %69, i64 8
  store i32* %add.ptr83, i32** %aptr, align 8
  %70 = load i32, i32* %b1, align 4
  %71 = load i32, i32* %c2, align 4
  %add84 = add nsw i32 %70, %71
  %72 = load i32*, i32** %aptr, align 8
  store i32 %add84, i32* %72, align 4
  %73 = load i32*, i32** %aptr, align 8
  %add.ptr85 = getelementptr inbounds i32, i32* %73, i64 8
  store i32* %add.ptr85, i32** %aptr, align 8
  %74 = load i32, i32* %b2, align 4
  %75 = load i32, i32* %c1, align 4
  %add86 = add nsw i32 %74, %75
  %76 = load i32*, i32** %aptr, align 8
  store i32 %add86, i32* %76, align 4
  %77 = load i32*, i32** %aptr, align 8
  %add.ptr87 = getelementptr inbounds i32, i32* %77, i64 8
  store i32* %add.ptr87, i32** %aptr, align 8
  %78 = load i32, i32* %b3, align 4
  %79 = load i32, i32* %c0, align 4
  %add88 = add nsw i32 %78, %79
  %80 = load i32*, i32** %aptr, align 8
  store i32 %add88, i32* %80, align 4
  %81 = load i32*, i32** %aptr, align 8
  %add.ptr89 = getelementptr inbounds i32, i32* %81, i64 8
  store i32* %add.ptr89, i32** %aptr, align 8
  %82 = load i32, i32* %b3, align 4
  %83 = load i32, i32* %c0, align 4
  %sub90 = sub nsw i32 %82, %83
  %84 = load i32*, i32** %aptr, align 8
  store i32 %sub90, i32* %84, align 4
  %85 = load i32*, i32** %aptr, align 8
  %add.ptr91 = getelementptr inbounds i32, i32* %85, i64 8
  store i32* %add.ptr91, i32** %aptr, align 8
  %86 = load i32, i32* %b2, align 4
  %87 = load i32, i32* %c1, align 4
  %sub92 = sub nsw i32 %86, %87
  %88 = load i32*, i32** %aptr, align 8
  store i32 %sub92, i32* %88, align 4
  %89 = load i32*, i32** %aptr, align 8
  %add.ptr93 = getelementptr inbounds i32, i32* %89, i64 8
  store i32* %add.ptr93, i32** %aptr, align 8
  %90 = load i32, i32* %b1, align 4
  %91 = load i32, i32* %c2, align 4
  %sub94 = sub nsw i32 %90, %91
  %92 = load i32*, i32** %aptr, align 8
  store i32 %sub94, i32* %92, align 4
  %93 = load i32*, i32** %aptr, align 8
  %add.ptr95 = getelementptr inbounds i32, i32* %93, i64 8
  store i32* %add.ptr95, i32** %aptr, align 8
  %94 = load i32, i32* %b0, align 4
  %95 = load i32, i32* %c3, align 4
  %sub96 = sub nsw i32 %94, %95
  %96 = load i32*, i32** %aptr, align 8
  store i32 %sub96, i32* %96, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %97 = load i32, i32* %i, align 4
  %inc = add nsw i32 %97, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc198, %for.end
  %98 = load i32, i32* %i, align 4
  %cmp98 = icmp slt i32 %98, 8
  br i1 %cmp98, label %for.body100, label %for.end200

for.body100:                                      ; preds = %for.cond97
  %99 = load i32*, i32** %y.addr, align 8
  %100 = load i32, i32* %i, align 4
  %shl101 = shl i32 %100, 3
  %idx.ext102 = sext i32 %shl101 to i64
  %add.ptr103 = getelementptr inbounds i32, i32* %99, i64 %idx.ext102
  store i32* %add.ptr103, i32** %aptr, align 8
  %101 = load i32*, i32** %aptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %101, i32 1
  store i32* %incdec.ptr, i32** %aptr, align 8
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %b0, align 4
  %103 = load i32*, i32** %aptr, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %103, i32 1
  store i32* %incdec.ptr104, i32** %aptr, align 8
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %a0, align 4
  %105 = load i32*, i32** %aptr, align 8
  %incdec.ptr105 = getelementptr inbounds i32, i32* %105, i32 1
  store i32* %incdec.ptr105, i32** %aptr, align 8
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %b2, align 4
  %107 = load i32*, i32** %aptr, align 8
  %incdec.ptr106 = getelementptr inbounds i32, i32* %107, i32 1
  store i32* %incdec.ptr106, i32** %aptr, align 8
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %a1, align 4
  %109 = load i32*, i32** %aptr, align 8
  %incdec.ptr107 = getelementptr inbounds i32, i32* %109, i32 1
  store i32* %incdec.ptr107, i32** %aptr, align 8
  %110 = load i32, i32* %109, align 4
  store i32 %110, i32* %b1, align 4
  %111 = load i32*, i32** %aptr, align 8
  %incdec.ptr108 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %incdec.ptr108, i32** %aptr, align 8
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %a2, align 4
  %113 = load i32*, i32** %aptr, align 8
  %incdec.ptr109 = getelementptr inbounds i32, i32* %113, i32 1
  store i32* %incdec.ptr109, i32** %aptr, align 8
  %114 = load i32, i32* %113, align 4
  store i32 %114, i32* %b3, align 4
  %115 = load i32*, i32** %aptr, align 8
  %116 = load i32, i32* %115, align 4
  store i32 %116, i32* %a3, align 4
  %117 = load i32, i32* %a0, align 4
  %conv110 = sext i32 %117 to i64
  %mul111 = mul nsw i64 100, %conv110
  %118 = load i32, i32* %a3, align 4
  %conv112 = sext i32 %118 to i64
  %mul113 = mul nsw i64 502, %conv112
  %sub114 = sub nsw i64 %mul111, %mul113
  %shr115 = ashr i64 %sub114, 9
  %conv116 = trunc i64 %shr115 to i32
  store i32 %conv116, i32* %c0, align 4
  %119 = load i32, i32* %a2, align 4
  %conv117 = sext i32 %119 to i64
  %mul118 = mul nsw i64 426, %conv117
  %120 = load i32, i32* %a1, align 4
  %conv119 = sext i32 %120 to i64
  %mul120 = mul nsw i64 284, %conv119
  %sub121 = sub nsw i64 %mul118, %mul120
  %shr122 = ashr i64 %sub121, 9
  %conv123 = trunc i64 %shr122 to i32
  store i32 %conv123, i32* %c1, align 4
  %121 = load i32, i32* %a1, align 4
  %conv124 = sext i32 %121 to i64
  %mul125 = mul nsw i64 426, %conv124
  %122 = load i32, i32* %a2, align 4
  %conv126 = sext i32 %122 to i64
  %mul127 = mul nsw i64 284, %conv126
  %add128 = add nsw i64 %mul125, %mul127
  %shr129 = ashr i64 %add128, 9
  %conv130 = trunc i64 %shr129 to i32
  store i32 %conv130, i32* %c2, align 4
  %123 = load i32, i32* %a0, align 4
  %conv131 = sext i32 %123 to i64
  %mul132 = mul nsw i64 502, %conv131
  %124 = load i32, i32* %a3, align 4
  %conv133 = sext i32 %124 to i64
  %mul134 = mul nsw i64 100, %conv133
  %add135 = add nsw i64 %mul132, %mul134
  %shr136 = ashr i64 %add135, 9
  %conv137 = trunc i64 %shr136 to i32
  store i32 %conv137, i32* %c3, align 4
  %125 = load i32, i32* %b0, align 4
  %126 = load i32, i32* %b1, align 4
  %add138 = add nsw i32 %125, %126
  %conv139 = sext i32 %add138 to i64
  %mul140 = mul nsw i64 362, %conv139
  %shr141 = ashr i64 %mul140, 9
  %conv142 = trunc i64 %shr141 to i32
  store i32 %conv142, i32* %a0, align 4
  %127 = load i32, i32* %b0, align 4
  %128 = load i32, i32* %b1, align 4
  %sub143 = sub nsw i32 %127, %128
  %conv144 = sext i32 %sub143 to i64
  %mul145 = mul nsw i64 362, %conv144
  %shr146 = ashr i64 %mul145, 9
  %conv147 = trunc i64 %shr146 to i32
  store i32 %conv147, i32* %a1, align 4
  %129 = load i32, i32* %b2, align 4
  %conv148 = sext i32 %129 to i64
  %mul149 = mul nsw i64 196, %conv148
  %130 = load i32, i32* %b3, align 4
  %conv150 = sext i32 %130 to i64
  %mul151 = mul nsw i64 473, %conv150
  %sub152 = sub nsw i64 %mul149, %mul151
  %shr153 = ashr i64 %sub152, 9
  %conv154 = trunc i64 %shr153 to i32
  store i32 %conv154, i32* %a2, align 4
  %131 = load i32, i32* %b2, align 4
  %conv155 = sext i32 %131 to i64
  %mul156 = mul nsw i64 473, %conv155
  %132 = load i32, i32* %b3, align 4
  %conv157 = sext i32 %132 to i64
  %mul158 = mul nsw i64 196, %conv157
  %add159 = add nsw i64 %mul156, %mul158
  %shr160 = ashr i64 %add159, 9
  %conv161 = trunc i64 %shr160 to i32
  store i32 %conv161, i32* %a3, align 4
  %133 = load i32, i32* %a0, align 4
  %134 = load i32, i32* %a3, align 4
  %add162 = add nsw i32 %133, %134
  store i32 %add162, i32* %b0, align 4
  %135 = load i32, i32* %a1, align 4
  %136 = load i32, i32* %a2, align 4
  %add163 = add nsw i32 %135, %136
  store i32 %add163, i32* %b1, align 4
  %137 = load i32, i32* %a1, align 4
  %138 = load i32, i32* %a2, align 4
  %sub164 = sub nsw i32 %137, %138
  store i32 %sub164, i32* %b2, align 4
  %139 = load i32, i32* %a0, align 4
  %140 = load i32, i32* %a3, align 4
  %sub165 = sub nsw i32 %139, %140
  store i32 %sub165, i32* %b3, align 4
  %141 = load i32, i32* %c0, align 4
  %142 = load i32, i32* %c1, align 4
  %add166 = add nsw i32 %141, %142
  store i32 %add166, i32* %a0, align 4
  %143 = load i32, i32* %c0, align 4
  %144 = load i32, i32* %c1, align 4
  %sub167 = sub nsw i32 %143, %144
  store i32 %sub167, i32* %a1, align 4
  %145 = load i32, i32* %c3, align 4
  %146 = load i32, i32* %c2, align 4
  %sub168 = sub nsw i32 %145, %146
  store i32 %sub168, i32* %a2, align 4
  %147 = load i32, i32* %c3, align 4
  %148 = load i32, i32* %c2, align 4
  %add169 = add nsw i32 %147, %148
  store i32 %add169, i32* %a3, align 4
  %149 = load i32, i32* %a0, align 4
  store i32 %149, i32* %c0, align 4
  %150 = load i32, i32* %a2, align 4
  %151 = load i32, i32* %a1, align 4
  %sub170 = sub nsw i32 %150, %151
  %conv171 = sext i32 %sub170 to i64
  %mul172 = mul nsw i64 362, %conv171
  %shr173 = ashr i64 %mul172, 9
  %conv174 = trunc i64 %shr173 to i32
  store i32 %conv174, i32* %c1, align 4
  %152 = load i32, i32* %a2, align 4
  %153 = load i32, i32* %a1, align 4
  %add175 = add nsw i32 %152, %153
  %conv176 = sext i32 %add175 to i64
  %mul177 = mul nsw i64 362, %conv176
  %shr178 = ashr i64 %mul177, 9
  %conv179 = trunc i64 %shr178 to i32
  store i32 %conv179, i32* %c2, align 4
  %154 = load i32, i32* %a3, align 4
  store i32 %154, i32* %c3, align 4
  %155 = load i32*, i32** %y.addr, align 8
  %156 = load i32, i32* %i, align 4
  %shl180 = shl i32 %156, 3
  %idx.ext181 = sext i32 %shl180 to i64
  %add.ptr182 = getelementptr inbounds i32, i32* %155, i64 %idx.ext181
  store i32* %add.ptr182, i32** %aptr, align 8
  %157 = load i32, i32* %b0, align 4
  %158 = load i32, i32* %c3, align 4
  %add183 = add nsw i32 %157, %158
  %159 = load i32*, i32** %aptr, align 8
  %incdec.ptr184 = getelementptr inbounds i32, i32* %159, i32 1
  store i32* %incdec.ptr184, i32** %aptr, align 8
  store i32 %add183, i32* %159, align 4
  %160 = load i32, i32* %b1, align 4
  %161 = load i32, i32* %c2, align 4
  %add185 = add nsw i32 %160, %161
  %162 = load i32*, i32** %aptr, align 8
  %incdec.ptr186 = getelementptr inbounds i32, i32* %162, i32 1
  store i32* %incdec.ptr186, i32** %aptr, align 8
  store i32 %add185, i32* %162, align 4
  %163 = load i32, i32* %b2, align 4
  %164 = load i32, i32* %c1, align 4
  %add187 = add nsw i32 %163, %164
  %165 = load i32*, i32** %aptr, align 8
  %incdec.ptr188 = getelementptr inbounds i32, i32* %165, i32 1
  store i32* %incdec.ptr188, i32** %aptr, align 8
  store i32 %add187, i32* %165, align 4
  %166 = load i32, i32* %b3, align 4
  %167 = load i32, i32* %c0, align 4
  %add189 = add nsw i32 %166, %167
  %168 = load i32*, i32** %aptr, align 8
  %incdec.ptr190 = getelementptr inbounds i32, i32* %168, i32 1
  store i32* %incdec.ptr190, i32** %aptr, align 8
  store i32 %add189, i32* %168, align 4
  %169 = load i32, i32* %b3, align 4
  %170 = load i32, i32* %c0, align 4
  %sub191 = sub nsw i32 %169, %170
  %171 = load i32*, i32** %aptr, align 8
  %incdec.ptr192 = getelementptr inbounds i32, i32* %171, i32 1
  store i32* %incdec.ptr192, i32** %aptr, align 8
  store i32 %sub191, i32* %171, align 4
  %172 = load i32, i32* %b2, align 4
  %173 = load i32, i32* %c1, align 4
  %sub193 = sub nsw i32 %172, %173
  %174 = load i32*, i32** %aptr, align 8
  %incdec.ptr194 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr194, i32** %aptr, align 8
  store i32 %sub193, i32* %174, align 4
  %175 = load i32, i32* %b1, align 4
  %176 = load i32, i32* %c2, align 4
  %sub195 = sub nsw i32 %175, %176
  %177 = load i32*, i32** %aptr, align 8
  %incdec.ptr196 = getelementptr inbounds i32, i32* %177, i32 1
  store i32* %incdec.ptr196, i32** %aptr, align 8
  store i32 %sub195, i32* %177, align 4
  %178 = load i32, i32* %b0, align 4
  %179 = load i32, i32* %c3, align 4
  %sub197 = sub nsw i32 %178, %179
  %180 = load i32*, i32** %aptr, align 8
  store i32 %sub197, i32* %180, align 4
  br label %for.inc198

for.inc198:                                       ; preds = %for.body100
  %181 = load i32, i32* %i, align 4
  %inc199 = add nsw i32 %181, 1
  store i32 %inc199, i32* %i, align 4
  br label %for.cond97

for.end200:                                       ; preds = %for.cond97
  store i32 0, i32* %i, align 4
  %182 = load i32*, i32** %y.addr, align 8
  store i32* %182, i32** %aptr, align 8
  br label %for.cond201

for.cond201:                                      ; preds = %for.inc209, %for.end200
  %183 = load i32, i32* %i, align 4
  %cmp202 = icmp slt i32 %183, 64
  br i1 %cmp202, label %for.body204, label %for.end212

for.body204:                                      ; preds = %for.cond201
  %184 = load i32*, i32** %aptr, align 8
  %185 = load i32, i32* %184, align 4
  %cmp205 = icmp slt i32 %185, 0
  br i1 %cmp205, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body204
  %186 = load i32*, i32** %aptr, align 8
  %187 = load i32, i32* %186, align 4
  %sub207 = sub nsw i32 %187, 8
  br label %cond.end

cond.false:                                       ; preds = %for.body204
  %188 = load i32*, i32** %aptr, align 8
  %189 = load i32, i32* %188, align 4
  %add208 = add nsw i32 %189, 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub207, %cond.true ], [ %add208, %cond.false ]
  %div = sdiv i32 %cond, 16
  %190 = load i32*, i32** %aptr, align 8
  store i32 %div, i32* %190, align 4
  br label %for.inc209

for.inc209:                                       ; preds = %cond.end
  %191 = load i32, i32* %i, align 4
  %inc210 = add nsw i32 %191, 1
  store i32 %inc210, i32* %i, align 4
  %192 = load i32*, i32** %aptr, align 8
  %incdec.ptr211 = getelementptr inbounds i32, i32* %192, i32 1
  store i32* %incdec.ptr211, i32** %aptr, align 8
  br label %for.cond201

for.end212:                                       ; preds = %for.cond201
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @IZigzagMatrix(i32* %imatrix, i32* %omatrix) #0 {
entry:
  %imatrix.addr = alloca i32*, align 8
  %omatrix.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  store i32* %imatrix, i32** %imatrix.addr, align 8
  store i32* %omatrix, i32** %omatrix.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %imatrix.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @zigzag_index, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds i32, i32* %1, i64 %idxprom1
  %4 = load i32, i32* %arrayidx2, align 4
  %5 = load i32*, i32** %omatrix.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %5, i32 1
  store i32* %incdec.ptr, i32** %omatrix.addr, align 8
  store i32 %4, i32* %5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @IQuantize(i32* %matrix, i32* %qmatrix) #0 {
entry:
  %matrix.addr = alloca i32*, align 8
  %qmatrix.addr = alloca i32*, align 8
  %mptr = alloca i32*, align 8
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32* %qmatrix, i32** %qmatrix.addr, align 8
  %0 = load i32*, i32** %matrix.addr, align 8
  store i32* %0, i32** %mptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32*, i32** %mptr, align 8
  %2 = load i32*, i32** %matrix.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %2, i64 64
  %cmp = icmp ult i32* %1, %add.ptr
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %mptr, align 8
  %4 = load i32, i32* %3, align 4
  %5 = load i32*, i32** %qmatrix.addr, align 8
  %6 = load i32, i32* %5, align 4
  %mul = mul i32 %4, %6
  %7 = load i32*, i32** %mptr, align 8
  store i32 %mul, i32* %7, align 4
  %8 = load i32*, i32** %qmatrix.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %8, i32 1
  store i32* %incdec.ptr, i32** %qmatrix.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32*, i32** %mptr, align 8
  %incdec.ptr1 = getelementptr inbounds i32, i32* %9, i32 1
  store i32* %incdec.ptr1, i32** %mptr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @PostshiftIDctMatrix(i32* %matrix, i32 %shift) #0 {
entry:
  %matrix.addr = alloca i32*, align 8
  %shift.addr = alloca i32, align 4
  %mptr = alloca i32*, align 8
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32 %shift, i32* %shift.addr, align 4
  %0 = load i32*, i32** %matrix.addr, align 8
  store i32* %0, i32** %mptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32*, i32** %mptr, align 8
  %2 = load i32*, i32** %matrix.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %2, i64 64
  %cmp = icmp ult i32* %1, %add.ptr
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %shift.addr, align 4
  %4 = load i32*, i32** %mptr, align 8
  %5 = load i32, i32* %4, align 4
  %add = add nsw i32 %5, %3
  store i32 %add, i32* %4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32*, i32** %mptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %6, i32 1
  store i32* %incdec.ptr, i32** %mptr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @BoundIDctMatrix(i32* %matrix, i32 %Bound) #0 {
entry:
  %matrix.addr = alloca i32*, align 8
  %Bound.addr = alloca i32, align 4
  %mptr = alloca i32*, align 8
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32 %Bound, i32* %Bound.addr, align 4
  %0 = load i32*, i32** %matrix.addr, align 8
  store i32* %0, i32** %mptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32*, i32** %mptr, align 8
  %2 = load i32*, i32** %matrix.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %2, i64 64
  %cmp = icmp ult i32* %1, %add.ptr
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %mptr, align 8
  %4 = load i32, i32* %3, align 4
  %cmp1 = icmp slt i32 %4, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32*, i32** %mptr, align 8
  store i32 0, i32* %5, align 4
  br label %if.end4

if.else:                                          ; preds = %for.body
  %6 = load i32*, i32** %mptr, align 8
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* %Bound.addr, align 4
  %cmp2 = icmp sgt i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %9 = load i32, i32* %Bound.addr, align 4
  %10 = load i32*, i32** %mptr, align 8
  store i32 %9, i32* %10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end4
  %11 = load i32*, i32** %mptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %incdec.ptr, i32** %mptr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @WriteOneBlock(i32* %store, i8* %out_buf, i32 %width, i32 %height, i32 %voffs, i32 %hoffs) #0 {
entry:
  %store.addr = alloca i32*, align 8
  %out_buf.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %voffs.addr = alloca i32, align 4
  %hoffs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %e = alloca i32, align 4
  %diff = alloca i32, align 4
  store i32* %store, i32** %store.addr, align 8
  store i8* %out_buf, i8** %out_buf.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %voffs, i32* %voffs.addr, align 4
  store i32 %hoffs, i32* %hoffs.addr, align 4
  %0 = load i32, i32* %voffs.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %voffs.addr, align 4
  %add = add nsw i32 %2, 8
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %height.addr, align 4
  %cmp1 = icmp slt i32 %3, %4
  br i1 %cmp1, label %if.then, label %if.else9

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %width.addr, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %diff, align 4
  %7 = load i32, i32* %hoffs.addr, align 4
  store i32 %7, i32* %e, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %if.then
  %8 = load i32, i32* %e, align 4
  %9 = load i32, i32* %hoffs.addr, align 4
  %add3 = add nsw i32 %9, 8
  %cmp4 = icmp slt i32 %8, %add3
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond2
  %10 = load i32, i32* %e, align 4
  %11 = load i32, i32* %width.addr, align 4
  %cmp6 = icmp slt i32 %10, %11
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %for.body5
  %12 = load i32*, i32** %store.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %12, i32 1
  store i32* %incdec.ptr, i32** %store.addr, align 8
  %13 = load i32, i32* %12, align 4
  %conv = trunc i32 %13 to i8
  %14 = load i8*, i8** %out_buf.addr, align 8
  %15 = load i32, i32* %diff, align 4
  %16 = load i32, i32* %e, align 4
  %add8 = add nsw i32 %15, %16
  %idxprom = sext i32 %add8 to i64
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %for.body5
  br label %for.end

if.end:                                           ; preds = %if.then7
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %e, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %e, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.else, %for.cond2
  br label %if.end10

if.else9:                                         ; preds = %for.body
  br label %for.end13

if.end10:                                         ; preds = %for.end
  br label %for.inc11

for.inc11:                                        ; preds = %if.end10
  %18 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %18, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %if.else9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @WriteBlock(i32* %store, i32* %p_out_vpos, i32* %p_out_hpos, i8* %p_out_buf) #0 {
entry:
  %store.addr = alloca i32*, align 8
  %p_out_vpos.addr = alloca i32*, align 8
  %p_out_hpos.addr = alloca i32*, align 8
  %p_out_buf.addr = alloca i8*, align 8
  %voffs = alloca i32, align 4
  %hoffs = alloca i32, align 4
  store i32* %store, i32** %store.addr, align 8
  store i32* %p_out_vpos, i32** %p_out_vpos.addr, align 8
  store i32* %p_out_hpos, i32** %p_out_hpos.addr, align 8
  store i8* %p_out_buf, i8** %p_out_buf.addr, align 8
  %0 = load i32*, i32** %p_out_vpos.addr, align 8
  %1 = load i32, i32* %0, align 4
  %mul = mul nsw i32 %1, 8
  store i32 %mul, i32* %voffs, align 4
  %2 = load i32*, i32** %p_out_hpos.addr, align 8
  %3 = load i32, i32* %2, align 4
  %mul1 = mul nsw i32 %3, 8
  store i32 %mul1, i32* %hoffs, align 4
  %4 = load i32*, i32** %store.addr, align 8
  %5 = load i8*, i8** %p_out_buf.addr, align 8
  %6 = load i16, i16* @p_jinfo_image_width, align 2
  %conv = sext i16 %6 to i32
  %7 = load i16, i16* @p_jinfo_image_height, align 2
  %conv2 = sext i16 %7 to i32
  %8 = load i32, i32* %voffs, align 4
  %9 = load i32, i32* %hoffs, align 4
  call void @WriteOneBlock(i32* %4, i8* %5, i32 %conv, i32 %conv2, i32 %8, i32 %9)
  %10 = load i32*, i32** %p_out_hpos.addr, align 8
  %11 = load i32, i32* %10, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %10, align 4
  %12 = load i32*, i32** %p_out_vpos.addr, align 8
  %13 = load i32, i32* %12, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %12, align 4
  %14 = load i32*, i32** %p_out_hpos.addr, align 8
  %15 = load i32, i32* %14, align 4
  %16 = load i32, i32* @p_jinfo_MCUWidth, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %17 = load i32*, i32** %p_out_vpos.addr, align 8
  %18 = load i32, i32* %17, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %17, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %19 = load i32*, i32** %p_out_hpos.addr, align 8
  store i32 0, i32* %19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @Write4Blocks(i32* %store1, i32* %store2, i32* %store3, i32* %store4, i32* %p_out_vpos, i32* %p_out_hpos, i8* %p_out_buf) #0 {
entry:
  %store1.addr = alloca i32*, align 8
  %store2.addr = alloca i32*, align 8
  %store3.addr = alloca i32*, align 8
  %store4.addr = alloca i32*, align 8
  %p_out_vpos.addr = alloca i32*, align 8
  %p_out_hpos.addr = alloca i32*, align 8
  %p_out_buf.addr = alloca i8*, align 8
  %voffs = alloca i32, align 4
  %hoffs = alloca i32, align 4
  store i32* %store1, i32** %store1.addr, align 8
  store i32* %store2, i32** %store2.addr, align 8
  store i32* %store3, i32** %store3.addr, align 8
  store i32* %store4, i32** %store4.addr, align 8
  store i32* %p_out_vpos, i32** %p_out_vpos.addr, align 8
  store i32* %p_out_hpos, i32** %p_out_hpos.addr, align 8
  store i8* %p_out_buf, i8** %p_out_buf.addr, align 8
  %0 = load i32*, i32** %p_out_vpos.addr, align 8
  %1 = load i32, i32* %0, align 4
  %mul = mul nsw i32 %1, 8
  store i32 %mul, i32* %voffs, align 4
  %2 = load i32*, i32** %p_out_hpos.addr, align 8
  %3 = load i32, i32* %2, align 4
  %mul1 = mul nsw i32 %3, 8
  store i32 %mul1, i32* %hoffs, align 4
  %4 = load i32*, i32** %store1.addr, align 8
  %5 = load i8*, i8** %p_out_buf.addr, align 8
  %6 = load i16, i16* @p_jinfo_image_width, align 2
  %conv = sext i16 %6 to i32
  %7 = load i16, i16* @p_jinfo_image_height, align 2
  %conv2 = sext i16 %7 to i32
  %8 = load i32, i32* %voffs, align 4
  %9 = load i32, i32* %hoffs, align 4
  call void @WriteOneBlock(i32* %4, i8* %5, i32 %conv, i32 %conv2, i32 %8, i32 %9)
  %10 = load i32, i32* %hoffs, align 4
  %add = add nsw i32 %10, 8
  store i32 %add, i32* %hoffs, align 4
  %11 = load i32*, i32** %store2.addr, align 8
  %12 = load i8*, i8** %p_out_buf.addr, align 8
  %13 = load i16, i16* @p_jinfo_image_width, align 2
  %conv3 = sext i16 %13 to i32
  %14 = load i16, i16* @p_jinfo_image_height, align 2
  %conv4 = sext i16 %14 to i32
  %15 = load i32, i32* %voffs, align 4
  %16 = load i32, i32* %hoffs, align 4
  call void @WriteOneBlock(i32* %11, i8* %12, i32 %conv3, i32 %conv4, i32 %15, i32 %16)
  %17 = load i32, i32* %voffs, align 4
  %add5 = add nsw i32 %17, 8
  store i32 %add5, i32* %voffs, align 4
  %18 = load i32, i32* %hoffs, align 4
  %sub = sub nsw i32 %18, 8
  store i32 %sub, i32* %hoffs, align 4
  %19 = load i32*, i32** %store3.addr, align 8
  %20 = load i8*, i8** %p_out_buf.addr, align 8
  %21 = load i16, i16* @p_jinfo_image_width, align 2
  %conv6 = sext i16 %21 to i32
  %22 = load i16, i16* @p_jinfo_image_height, align 2
  %conv7 = sext i16 %22 to i32
  %23 = load i32, i32* %voffs, align 4
  %24 = load i32, i32* %hoffs, align 4
  call void @WriteOneBlock(i32* %19, i8* %20, i32 %conv6, i32 %conv7, i32 %23, i32 %24)
  %25 = load i32, i32* %hoffs, align 4
  %add8 = add nsw i32 %25, 8
  store i32 %add8, i32* %hoffs, align 4
  %26 = load i32*, i32** %store4.addr, align 8
  %27 = load i8*, i8** %p_out_buf.addr, align 8
  %28 = load i16, i16* @p_jinfo_image_width, align 2
  %conv9 = sext i16 %28 to i32
  %29 = load i16, i16* @p_jinfo_image_height, align 2
  %conv10 = sext i16 %29 to i32
  %30 = load i32, i32* %voffs, align 4
  %31 = load i32, i32* %hoffs, align 4
  call void @WriteOneBlock(i32* %26, i8* %27, i32 %conv9, i32 %conv10, i32 %30, i32 %31)
  %32 = load i32*, i32** %p_out_hpos.addr, align 8
  %33 = load i32, i32* %32, align 4
  %add11 = add nsw i32 %33, 2
  %34 = load i32*, i32** %p_out_hpos.addr, align 8
  store i32 %add11, i32* %34, align 4
  %35 = load i32*, i32** %p_out_vpos.addr, align 8
  %36 = load i32, i32* %35, align 4
  %add12 = add nsw i32 %36, 2
  %37 = load i32*, i32** %p_out_vpos.addr, align 8
  store i32 %add12, i32* %37, align 4
  %38 = load i32*, i32** %p_out_hpos.addr, align 8
  %39 = load i32, i32* %38, align 4
  %40 = load i32, i32* @p_jinfo_MCUWidth, align 4
  %cmp = icmp slt i32 %39, %40
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %41 = load i32*, i32** %p_out_vpos.addr, align 8
  %42 = load i32, i32* %41, align 4
  %sub14 = sub nsw i32 %42, 2
  %43 = load i32*, i32** %p_out_vpos.addr, align 8
  store i32 %sub14, i32* %43, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %44 = load i32*, i32** %p_out_hpos.addr, align 8
  store i32 0, i32* %44, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @YuvToRgb(i32 %p, i32* %y_buf, i32* %u_buf, i32* %v_buf) #0 {
entry:
  %p.addr = alloca i32, align 4
  %y_buf.addr = alloca i32*, align 8
  %u_buf.addr = alloca i32*, align 8
  %v_buf.addr = alloca i32*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %y = alloca i32, align 4
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %p, i32* %p.addr, align 4
  store i32* %y_buf, i32** %y_buf.addr, align 8
  store i32* %u_buf, i32** %u_buf.addr, align 8
  store i32* %v_buf, i32** %v_buf.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32*, i32** %y_buf.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %y, align 4
  %4 = load i32*, i32** %u_buf.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i64 %idxprom1
  %6 = load i32, i32* %arrayidx2, align 4
  %sub = sub nsw i32 %6, 128
  store i32 %sub, i32* %u, align 4
  %7 = load i32*, i32** %v_buf.addr, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %8 to i64
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i64 %idxprom3
  %9 = load i32, i32* %arrayidx4, align 4
  %sub5 = sub nsw i32 %9, 128
  store i32 %sub5, i32* %v, align 4
  %10 = load i32, i32* %y, align 4
  %mul = mul nsw i32 %10, 256
  %11 = load i32, i32* %v, align 4
  %mul6 = mul nsw i32 %11, 359
  %add = add nsw i32 %mul, %mul6
  %add7 = add nsw i32 %add, 128
  %shr = ashr i32 %add7, 8
  store i32 %shr, i32* %r, align 4
  %12 = load i32, i32* %y, align 4
  %mul8 = mul nsw i32 %12, 256
  %13 = load i32, i32* %u, align 4
  %mul9 = mul nsw i32 %13, 88
  %sub10 = sub nsw i32 %mul8, %mul9
  %14 = load i32, i32* %v, align 4
  %mul11 = mul nsw i32 %14, 182
  %sub12 = sub nsw i32 %sub10, %mul11
  %add13 = add nsw i32 %sub12, 128
  %shr14 = ashr i32 %add13, 8
  store i32 %shr14, i32* %g, align 4
  %15 = load i32, i32* %y, align 4
  %mul15 = mul nsw i32 %15, 256
  %16 = load i32, i32* %u, align 4
  %mul16 = mul nsw i32 %16, 454
  %add17 = add nsw i32 %mul15, %mul16
  %add18 = add nsw i32 %add17, 128
  %shr19 = ashr i32 %add18, 8
  store i32 %shr19, i32* %b, align 4
  %17 = load i32, i32* %r, align 4
  %cmp20 = icmp slt i32 %17, 0
  br i1 %cmp20, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 0, i32* %r, align 4
  br label %if.end23

if.else:                                          ; preds = %for.body
  %18 = load i32, i32* %r, align 4
  %cmp21 = icmp sgt i32 %18, 255
  br i1 %cmp21, label %if.then22, label %if.end

if.then22:                                        ; preds = %if.else
  store i32 255, i32* %r, align 4
  br label %if.end

if.end:                                           ; preds = %if.then22, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end, %if.then
  %19 = load i32, i32* %g, align 4
  %cmp24 = icmp slt i32 %19, 0
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.end23
  store i32 0, i32* %g, align 4
  br label %if.end30

if.else26:                                        ; preds = %if.end23
  %20 = load i32, i32* %g, align 4
  %cmp27 = icmp sgt i32 %20, 255
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.else26
  store i32 255, i32* %g, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.else26
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then25
  %21 = load i32, i32* %b, align 4
  %cmp31 = icmp slt i32 %21, 0
  br i1 %cmp31, label %if.then32, label %if.else33

if.then32:                                        ; preds = %if.end30
  store i32 0, i32* %b, align 4
  br label %if.end37

if.else33:                                        ; preds = %if.end30
  %22 = load i32, i32* %b, align 4
  %cmp34 = icmp sgt i32 %22, 255
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.else33
  store i32 255, i32* %b, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.else33
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then32
  %23 = load i32, i32* %r, align 4
  %24 = load i32, i32* %p.addr, align 4
  %idxprom38 = sext i32 %24 to i64
  %arrayidx39 = getelementptr inbounds [4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 %idxprom38
  %arrayidx40 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %arrayidx39, i64 0, i64 0
  %25 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %25 to i64
  %arrayidx42 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx40, i64 0, i64 %idxprom41
  store i32 %23, i32* %arrayidx42, align 4
  %26 = load i32, i32* %g, align 4
  %27 = load i32, i32* %p.addr, align 4
  %idxprom43 = sext i32 %27 to i64
  %arrayidx44 = getelementptr inbounds [4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 %idxprom43
  %arrayidx45 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %arrayidx44, i64 0, i64 1
  %28 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %28 to i64
  %arrayidx47 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx45, i64 0, i64 %idxprom46
  store i32 %26, i32* %arrayidx47, align 4
  %29 = load i32, i32* %b, align 4
  %30 = load i32, i32* %p.addr, align 4
  %idxprom48 = sext i32 %30 to i64
  %arrayidx49 = getelementptr inbounds [4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 %idxprom48
  %arrayidx50 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %arrayidx49, i64 0, i64 2
  %31 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %31 to i64
  %arrayidx52 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx50, i64 0, i64 %idxprom51
  store i32 %29, i32* %arrayidx52, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end37
  %32 = load i32, i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @decode_block(i32 %comp_no, i32* %out_buf, i32* %HuffBuff) #0 {
entry:
  %comp_no.addr = alloca i32, align 4
  %out_buf.addr = alloca i32*, align 8
  %HuffBuff.addr = alloca i32*, align 8
  %QuantBuff = alloca [64 x i32], align 16
  %p_quant_tbl = alloca i32*, align 8
  store i32 %comp_no, i32* %comp_no.addr, align 4
  store i32* %out_buf, i32** %out_buf.addr, align 8
  store i32* %HuffBuff, i32** %HuffBuff.addr, align 8
  %0 = load i32*, i32** %HuffBuff.addr, align 8
  %1 = load i32, i32* %comp_no.addr, align 4
  call void @DecodeHuffMCU(i32* %0, i32 %1)
  %2 = load i32*, i32** %HuffBuff.addr, align 8
  %arraydecay = getelementptr inbounds [64 x i32], [64 x i32]* %QuantBuff, i32 0, i32 0
  call void @IZigzagMatrix(i32* %2, i32* %arraydecay)
  %3 = load i32, i32* %comp_no.addr, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_quant_tbl_no, i64 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %idxprom1 = sext i32 %conv to i64
  %arrayidx2 = getelementptr inbounds [4 x [64 x i32]], [4 x [64 x i32]]* @p_jinfo_quant_tbl_quantval, i64 0, i64 %idxprom1
  %arrayidx3 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx2, i64 0, i64 64
  store i32* %arrayidx3, i32** %p_quant_tbl, align 8
  %arraydecay4 = getelementptr inbounds [64 x i32], [64 x i32]* %QuantBuff, i32 0, i32 0
  %5 = load i32*, i32** %p_quant_tbl, align 8
  call void @IQuantize(i32* %arraydecay4, i32* %5)
  %arraydecay5 = getelementptr inbounds [64 x i32], [64 x i32]* %QuantBuff, i32 0, i32 0
  %6 = load i32*, i32** %out_buf.addr, align 8
  call void @ChenIDct(i32* %arraydecay5, i32* %6)
  %7 = load i32*, i32** %out_buf.addr, align 8
  call void @PostshiftIDctMatrix(i32* %7, i32 128)
  %8 = load i32*, i32** %out_buf.addr, align 8
  call void @BoundIDctMatrix(i32* %8, i32 255)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @DecodeHuffMCU(i32* %out_buf, i32 %num_cmp) #0 {
entry:
  %out_buf.addr = alloca i32*, align 8
  %num_cmp.addr = alloca i32, align 4
  %s = alloca i32, align 4
  %diff = alloca i32, align 4
  %tbl_no = alloca i32, align 4
  %mptr = alloca i32*, align 8
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %r = alloca i32, align 4
  store i32* %out_buf, i32** %out_buf.addr, align 8
  store i32 %num_cmp, i32* %num_cmp.addr, align 4
  %0 = load i32, i32* %num_cmp.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* @p_jinfo_comps_info_dc_tbl_no, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %tbl_no, align 4
  %2 = load i32, i32* %tbl_no, align 4
  %idxprom1 = sext i32 %2 to i64
  %arrayidx2 = getelementptr inbounds [2 x [257 x i32]], [2 x [257 x i32]]* @p_jinfo_dc_xhuff_tbl_huffval, i64 0, i64 %idxprom1
  %arrayidx3 = getelementptr inbounds [257 x i32], [257 x i32]* %arrayidx2, i64 0, i64 0
  %3 = load i32, i32* %tbl_no, align 4
  %idxprom4 = sext i32 %3 to i64
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i64 0, i64 %idxprom4
  %4 = load i32, i32* %arrayidx5, align 4
  %5 = load i32, i32* %tbl_no, align 4
  %idxprom6 = sext i32 %5 to i64
  %arrayidx7 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i64 0, i64 %idxprom6
  %arrayidx8 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx7, i64 0, i64 0
  %6 = load i32, i32* %tbl_no, align 4
  %idxprom9 = sext i32 %6 to i64
  %arrayidx10 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i64 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx10, i64 0, i64 0
  %7 = load i32, i32* %tbl_no, align 4
  %idxprom12 = sext i32 %7 to i64
  %arrayidx13 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i64 0, i64 %idxprom12
  %arrayidx14 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx13, i64 0, i64 0
  %call = call i32 @DecodeHuffman(i32* %arrayidx3, i32 %4, i32* %arrayidx8, i32* %arrayidx11, i32* %arrayidx14)
  store i32 %call, i32* %s, align 4
  %8 = load i32, i32* %s, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end22

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %s, align 4
  %call15 = call i32 @buf_getv(i32 %9)
  store i32 %call15, i32* %diff, align 4
  %10 = load i32, i32* %s, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %s, align 4
  %11 = load i32, i32* %diff, align 4
  %12 = load i32, i32* %s, align 4
  %idxprom16 = sext i32 %12 to i64
  %arrayidx17 = getelementptr inbounds [32 x i32], [32 x i32]* @bit_set_mask, i64 0, i64 %idxprom16
  %13 = load i32, i32* %arrayidx17, align 4
  %and = and i32 %11, %13
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then19, label %if.end

if.then19:                                        ; preds = %if.then
  %14 = load i32, i32* %s, align 4
  %idxprom20 = sext i32 %14 to i64
  %arrayidx21 = getelementptr inbounds [20 x i32], [20 x i32]* @extend_mask, i64 0, i64 %idxprom20
  %15 = load i32, i32* %arrayidx21, align 4
  %16 = load i32, i32* %diff, align 4
  %or = or i32 %16, %15
  store i32 %or, i32* %diff, align 4
  %17 = load i32, i32* %diff, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %diff, align 4
  br label %if.end

if.end:                                           ; preds = %if.then19, %if.then
  %18 = load i32*, i32** %out_buf.addr, align 8
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %diff, align 4
  %add = add nsw i32 %20, %19
  store i32 %add, i32* %diff, align 4
  %21 = load i32, i32* %diff, align 4
  %22 = load i32*, i32** %out_buf.addr, align 8
  store i32 %21, i32* %22, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.end, %entry
  %23 = load i32*, i32** %out_buf.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %23, i64 1
  store i32* %add.ptr, i32** %mptr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end22
  %24 = load i32*, i32** %mptr, align 8
  %25 = load i32*, i32** %out_buf.addr, align 8
  %add.ptr23 = getelementptr inbounds i32, i32* %25, i64 64
  %cmp24 = icmp ult i32* %24, %add.ptr23
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32*, i32** %mptr, align 8
  store i32 0, i32* %26, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32*, i32** %mptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %27, i32 1
  store i32* %incdec.ptr, i32** %mptr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %k, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %if.end82, %for.end
  %28 = load i32, i32* %k, align 4
  %cmp27 = icmp slt i32 %28, 64
  br i1 %cmp27, label %for.body29, label %for.end83

for.body29:                                       ; preds = %for.cond26
  %29 = load i32, i32* %tbl_no, align 4
  %idxprom30 = sext i32 %29 to i64
  %arrayidx31 = getelementptr inbounds [2 x [257 x i32]], [2 x [257 x i32]]* @p_jinfo_ac_xhuff_tbl_huffval, i64 0, i64 %idxprom30
  %arrayidx32 = getelementptr inbounds [257 x i32], [257 x i32]* %arrayidx31, i64 0, i64 0
  %30 = load i32, i32* %tbl_no, align 4
  %idxprom33 = sext i32 %30 to i64
  %arrayidx34 = getelementptr inbounds [2 x i32], [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i64 0, i64 %idxprom33
  %31 = load i32, i32* %arrayidx34, align 4
  %32 = load i32, i32* %tbl_no, align 4
  %idxprom35 = sext i32 %32 to i64
  %arrayidx36 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i64 0, i64 %idxprom35
  %arrayidx37 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx36, i64 0, i64 0
  %33 = load i32, i32* %tbl_no, align 4
  %idxprom38 = sext i32 %33 to i64
  %arrayidx39 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i64 0, i64 %idxprom38
  %arrayidx40 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx39, i64 0, i64 0
  %34 = load i32, i32* %tbl_no, align 4
  %idxprom41 = sext i32 %34 to i64
  %arrayidx42 = getelementptr inbounds [2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i64 0, i64 %idxprom41
  %arrayidx43 = getelementptr inbounds [36 x i32], [36 x i32]* %arrayidx42, i64 0, i64 0
  %call44 = call i32 @DecodeHuffman(i32* %arrayidx32, i32 %31, i32* %arrayidx37, i32* %arrayidx40, i32* %arrayidx43)
  store i32 %call44, i32* %r, align 4
  %35 = load i32, i32* %r, align 4
  %and45 = and i32 %35, 15
  store i32 %and45, i32* %s, align 4
  %36 = load i32, i32* %r, align 4
  %shr = ashr i32 %36, 4
  %and46 = and i32 %shr, 15
  store i32 %and46, i32* %n, align 4
  %37 = load i32, i32* %s, align 4
  %tobool47 = icmp ne i32 %37, 0
  br i1 %tobool47, label %if.then48, label %if.else

if.then48:                                        ; preds = %for.body29
  %38 = load i32, i32* %n, align 4
  %39 = load i32, i32* %k, align 4
  %add49 = add nsw i32 %39, %38
  store i32 %add49, i32* %k, align 4
  %cmp50 = icmp sge i32 %add49, 64
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.then48
  br label %for.end83

if.end53:                                         ; preds = %if.then48
  %40 = load i32, i32* %s, align 4
  %call54 = call i32 @buf_getv(i32 %40)
  %41 = load i32*, i32** %out_buf.addr, align 8
  %42 = load i32, i32* %k, align 4
  %idxprom55 = sext i32 %42 to i64
  %arrayidx56 = getelementptr inbounds i32, i32* %41, i64 %idxprom55
  store i32 %call54, i32* %arrayidx56, align 4
  %43 = load i32, i32* %s, align 4
  %dec57 = add nsw i32 %43, -1
  store i32 %dec57, i32* %s, align 4
  %44 = load i32*, i32** %out_buf.addr, align 8
  %45 = load i32, i32* %k, align 4
  %idxprom58 = sext i32 %45 to i64
  %arrayidx59 = getelementptr inbounds i32, i32* %44, i64 %idxprom58
  %46 = load i32, i32* %arrayidx59, align 4
  %47 = load i32, i32* %s, align 4
  %idxprom60 = sext i32 %47 to i64
  %arrayidx61 = getelementptr inbounds [32 x i32], [32 x i32]* @bit_set_mask, i64 0, i64 %idxprom60
  %48 = load i32, i32* %arrayidx61, align 4
  %and62 = and i32 %46, %48
  %cmp63 = icmp eq i32 %and62, 0
  br i1 %cmp63, label %if.then65, label %if.end74

if.then65:                                        ; preds = %if.end53
  %49 = load i32, i32* %s, align 4
  %idxprom66 = sext i32 %49 to i64
  %arrayidx67 = getelementptr inbounds [20 x i32], [20 x i32]* @extend_mask, i64 0, i64 %idxprom66
  %50 = load i32, i32* %arrayidx67, align 4
  %51 = load i32*, i32** %out_buf.addr, align 8
  %52 = load i32, i32* %k, align 4
  %idxprom68 = sext i32 %52 to i64
  %arrayidx69 = getelementptr inbounds i32, i32* %51, i64 %idxprom68
  %53 = load i32, i32* %arrayidx69, align 4
  %or70 = or i32 %53, %50
  store i32 %or70, i32* %arrayidx69, align 4
  %54 = load i32*, i32** %out_buf.addr, align 8
  %55 = load i32, i32* %k, align 4
  %idxprom71 = sext i32 %55 to i64
  %arrayidx72 = getelementptr inbounds i32, i32* %54, i64 %idxprom71
  %56 = load i32, i32* %arrayidx72, align 4
  %inc73 = add nsw i32 %56, 1
  store i32 %inc73, i32* %arrayidx72, align 4
  br label %if.end74

if.end74:                                         ; preds = %if.then65, %if.end53
  %57 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %57, 1
  store i32 %inc75, i32* %k, align 4
  br label %if.end82

if.else:                                          ; preds = %for.body29
  %58 = load i32, i32* %n, align 4
  %cmp76 = icmp eq i32 %58, 15
  br i1 %cmp76, label %if.then78, label %if.else80

if.then78:                                        ; preds = %if.else
  %59 = load i32, i32* %k, align 4
  %add79 = add nsw i32 %59, 16
  store i32 %add79, i32* %k, align 4
  br label %if.end81

if.else80:                                        ; preds = %if.else
  br label %for.end83

if.end81:                                         ; preds = %if.then78
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.end74
  br label %for.cond26

for.end83:                                        ; preds = %if.else80, %if.then52, %for.cond26
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @decode_start(i32* %out_data_image_width, i32* %out_data_image_height, i32* %out_data_comp_vpos, i32* %out_data_comp_hpos) #0 {
entry:
  %out_data_image_width.addr = alloca i32*, align 8
  %out_data_image_height.addr = alloca i32*, align 8
  %out_data_comp_vpos.addr = alloca i32*, align 8
  %out_data_comp_hpos.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %CurrentMCU = alloca i32, align 4
  %HuffBuff = alloca [3 x [64 x i32]], align 16
  %IDCTBuff = alloca [6 x [64 x i32]], align 16
  store i32* %out_data_image_width, i32** %out_data_image_width.addr, align 8
  store i32* %out_data_image_height, i32** %out_data_image_height.addr, align 8
  store i32* %out_data_comp_vpos, i32** %out_data_comp_vpos.addr, align 8
  store i32* %out_data_comp_hpos, i32** %out_data_comp_hpos.addr, align 8
  store i32 0, i32* %CurrentMCU, align 4
  %0 = load i8*, i8** @p_jinfo_jpeg_data, align 8
  store i8* %0, i8** @CurHuffReadBuf, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %HuffBuff, i64 0, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx, i64 0, i64 0
  store i32 0, i32* %arrayidx1, align 16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i16, i16* @p_jinfo_image_width, align 2
  %conv = sext i16 %4 to i32
  %5 = load i32*, i32** %out_data_image_width.addr, align 8
  store i32 %conv, i32* %5, align 4
  %6 = load i16, i16* @p_jinfo_image_height, align 2
  %conv2 = sext i16 %6 to i32
  %7 = load i32*, i32** %out_data_image_height.addr, align 8
  store i32 %conv2, i32* %7, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc11, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %8, 3
  br i1 %cmp4, label %for.body6, label %for.end13

for.body6:                                        ; preds = %for.cond3
  %9 = load i32*, i32** %out_data_comp_vpos.addr, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom7
  store i32 0, i32* %arrayidx8, align 4
  %11 = load i32*, i32** %out_data_comp_hpos.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %12 to i64
  %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 %idxprom9
  store i32 0, i32* %arrayidx10, align 4
  br label %for.inc11

for.inc11:                                        ; preds = %for.body6
  %13 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %13, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond3

for.end13:                                        ; preds = %for.cond3
  %14 = load i32, i32* @p_jinfo_smp_fact, align 4
  %cmp14 = icmp eq i32 %14, 0
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %for.end13
  %15 = load i32, i32* @p_jinfo_NumMCU, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i32 0, i32 0), i32 %15)
  br label %while.cond

while.cond:                                       ; preds = %for.end52, %if.then
  %16 = load i32, i32* %CurrentMCU, align 4
  %17 = load i32, i32* @p_jinfo_NumMCU, align 4
  %cmp16 = icmp slt i32 %16, %17
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc27, %while.body
  %18 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %18, 3
  br i1 %cmp19, label %for.body21, label %for.end29

for.body21:                                       ; preds = %for.cond18
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %20 to i64
  %arrayidx23 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 %idxprom22
  %arraydecay = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx23, i32 0, i32 0
  %21 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %21 to i64
  %arrayidx25 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %HuffBuff, i64 0, i64 %idxprom24
  %arraydecay26 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx25, i32 0, i32 0
  call void @decode_block(i32 %19, i32* %arraydecay, i32* %arraydecay26)
  br label %for.inc27

for.inc27:                                        ; preds = %for.body21
  %22 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %22, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond18

for.end29:                                        ; preds = %for.cond18
  %arrayidx30 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 0
  %arraydecay31 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx30, i32 0, i32 0
  %arrayidx32 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 1
  %arraydecay33 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx32, i32 0, i32 0
  %arrayidx34 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 2
  %arraydecay35 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx34, i32 0, i32 0
  call void @YuvToRgb(i32 0, i32* %arraydecay31, i32* %arraydecay33, i32* %arraydecay35)
  store i32 0, i32* %i, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc50, %for.end29
  %23 = load i32, i32* %i, align 4
  %cmp37 = icmp slt i32 %23, 3
  br i1 %cmp37, label %for.body39, label %for.end52

for.body39:                                       ; preds = %for.cond36
  %24 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %24 to i64
  %arrayidx41 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* getelementptr inbounds ([4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 0), i64 0, i64 %idxprom40
  %arrayidx42 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx41, i64 0, i64 0
  %25 = load i32*, i32** %out_data_comp_vpos.addr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom43 = sext i32 %26 to i64
  %arrayidx44 = getelementptr inbounds i32, i32* %25, i64 %idxprom43
  %27 = load i32*, i32** %out_data_comp_hpos.addr, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %28 to i64
  %arrayidx46 = getelementptr inbounds i32, i32* %27, i64 %idxprom45
  %29 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %29 to i64
  %arrayidx48 = getelementptr inbounds [3 x [5310 x i8]], [3 x [5310 x i8]]* @OutData_comp_buf, i64 0, i64 %idxprom47
  %arrayidx49 = getelementptr inbounds [5310 x i8], [5310 x i8]* %arrayidx48, i64 0, i64 0
  call void @WriteBlock(i32* %arrayidx42, i32* %arrayidx44, i32* %arrayidx46, i8* %arrayidx49)
  br label %for.inc50

for.inc50:                                        ; preds = %for.body39
  %30 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %30, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond36

for.end52:                                        ; preds = %for.cond36
  %31 = load i32, i32* %CurrentMCU, align 4
  %inc53 = add nsw i32 %31, 1
  store i32 %inc53, i32* %CurrentMCU, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.else:                                          ; preds = %for.end13
  %32 = load i32, i32* @p_jinfo_NumMCU, align 4
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i32 0, i32 0), i32 %32)
  br label %while.cond55

while.cond55:                                     ; preds = %for.end118, %if.else
  %33 = load i32, i32* %CurrentMCU, align 4
  %34 = load i32, i32* @p_jinfo_NumMCU, align 4
  %cmp56 = icmp slt i32 %33, %34
  br i1 %cmp56, label %while.body58, label %while.end119

while.body58:                                     ; preds = %while.cond55
  store i32 0, i32* %i, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc68, %while.body58
  %35 = load i32, i32* %i, align 4
  %cmp60 = icmp slt i32 %35, 4
  br i1 %cmp60, label %for.body62, label %for.end70

for.body62:                                       ; preds = %for.cond59
  %36 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %36 to i64
  %arrayidx64 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 %idxprom63
  %arraydecay65 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx64, i32 0, i32 0
  %arrayidx66 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %HuffBuff, i64 0, i64 0
  %arraydecay67 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx66, i32 0, i32 0
  call void @decode_block(i32 0, i32* %arraydecay65, i32* %arraydecay67)
  br label %for.inc68

for.inc68:                                        ; preds = %for.body62
  %37 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %37, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond59

for.end70:                                        ; preds = %for.cond59
  %arrayidx71 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 4
  %arraydecay72 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx71, i32 0, i32 0
  %arrayidx73 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %HuffBuff, i64 0, i64 1
  %arraydecay74 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx73, i32 0, i32 0
  call void @decode_block(i32 1, i32* %arraydecay72, i32* %arraydecay74)
  %arrayidx75 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 5
  %arraydecay76 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx75, i32 0, i32 0
  %arrayidx77 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* %HuffBuff, i64 0, i64 2
  %arraydecay78 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx77, i32 0, i32 0
  call void @decode_block(i32 2, i32* %arraydecay76, i32* %arraydecay78)
  store i32 0, i32* %i, align 4
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc90, %for.end70
  %38 = load i32, i32* %i, align 4
  %cmp80 = icmp slt i32 %38, 4
  br i1 %cmp80, label %for.body82, label %for.end92

for.body82:                                       ; preds = %for.cond79
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %40 to i64
  %arrayidx84 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 %idxprom83
  %arraydecay85 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx84, i32 0, i32 0
  %arrayidx86 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 4
  %arraydecay87 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx86, i32 0, i32 0
  %arrayidx88 = getelementptr inbounds [6 x [64 x i32]], [6 x [64 x i32]]* %IDCTBuff, i64 0, i64 5
  %arraydecay89 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx88, i32 0, i32 0
  call void @YuvToRgb(i32 %39, i32* %arraydecay85, i32* %arraydecay87, i32* %arraydecay89)
  br label %for.inc90

for.inc90:                                        ; preds = %for.body82
  %41 = load i32, i32* %i, align 4
  %inc91 = add nsw i32 %41, 1
  store i32 %inc91, i32* %i, align 4
  br label %for.cond79

for.end92:                                        ; preds = %for.cond79
  store i32 0, i32* %i, align 4
  br label %for.cond93

for.cond93:                                       ; preds = %for.inc116, %for.end92
  %42 = load i32, i32* %i, align 4
  %cmp94 = icmp slt i32 %42, 3
  br i1 %cmp94, label %for.body96, label %for.end118

for.body96:                                       ; preds = %for.cond93
  %43 = load i32, i32* %i, align 4
  %idxprom97 = sext i32 %43 to i64
  %arrayidx98 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* getelementptr inbounds ([4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 0), i64 0, i64 %idxprom97
  %arrayidx99 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx98, i64 0, i64 0
  %44 = load i32, i32* %i, align 4
  %idxprom100 = sext i32 %44 to i64
  %arrayidx101 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* getelementptr inbounds ([4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 1), i64 0, i64 %idxprom100
  %arrayidx102 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx101, i64 0, i64 0
  %45 = load i32, i32* %i, align 4
  %idxprom103 = sext i32 %45 to i64
  %arrayidx104 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* getelementptr inbounds ([4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 2), i64 0, i64 %idxprom103
  %arrayidx105 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx104, i64 0, i64 0
  %46 = load i32, i32* %i, align 4
  %idxprom106 = sext i32 %46 to i64
  %arrayidx107 = getelementptr inbounds [3 x [64 x i32]], [3 x [64 x i32]]* getelementptr inbounds ([4 x [3 x [64 x i32]]], [4 x [3 x [64 x i32]]]* @rgb_buf, i64 0, i64 3), i64 0, i64 %idxprom106
  %arrayidx108 = getelementptr inbounds [64 x i32], [64 x i32]* %arrayidx107, i64 0, i64 0
  %47 = load i32*, i32** %out_data_comp_vpos.addr, align 8
  %48 = load i32, i32* %i, align 4
  %idxprom109 = sext i32 %48 to i64
  %arrayidx110 = getelementptr inbounds i32, i32* %47, i64 %idxprom109
  %49 = load i32*, i32** %out_data_comp_hpos.addr, align 8
  %50 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %50 to i64
  %arrayidx112 = getelementptr inbounds i32, i32* %49, i64 %idxprom111
  %51 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %51 to i64
  %arrayidx114 = getelementptr inbounds [3 x [5310 x i8]], [3 x [5310 x i8]]* @OutData_comp_buf, i64 0, i64 %idxprom113
  %arrayidx115 = getelementptr inbounds [5310 x i8], [5310 x i8]* %arrayidx114, i64 0, i64 0
  call void @Write4Blocks(i32* %arrayidx99, i32* %arrayidx102, i32* %arrayidx105, i32* %arrayidx108, i32* %arrayidx110, i32* %arrayidx112, i8* %arrayidx115)
  br label %for.inc116

for.inc116:                                       ; preds = %for.body96
  %52 = load i32, i32* %i, align 4
  %inc117 = add nsw i32 %52, 1
  store i32 %inc117, i32* %i, align 4
  br label %for.cond93

for.end118:                                       ; preds = %for.cond93
  %53 = load i32, i32* %CurrentMCU, align 4
  %add = add nsw i32 %53, 4
  store i32 %add, i32* %CurrentMCU, align 4
  br label %while.cond55

while.end119:                                     ; preds = %while.cond55
  br label %if.end

if.end:                                           ; preds = %while.end119, %while.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @buf_getb() #0 {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @read_position, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @pgetc()
  store i32 %call, i32* @current_read_byte, align 4
  store i32 7, i32* @read_position, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @current_read_byte, align 4
  %2 = load i32, i32* @read_position, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* @read_position, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @bit_set_mask, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %and = and i32 %1, %3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end2, %if.then1
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @buf_getv(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %rv = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* @read_position, align 4
  %sub = sub nsw i32 %1, %2
  store i32 %sub, i32* %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i32, i32* %p, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @read_position, align 4
  %cmp1 = icmp sgt i32 %4, 23
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load i32, i32* @current_read_byte, align 4
  %6 = load i32, i32* %p, align 4
  %shl = shl i32 %5, %6
  store i32 %shl, i32* %rv, align 4
  %call = call i32 @pgetc()
  store i32 %call, i32* @current_read_byte, align 4
  %7 = load i32, i32* @current_read_byte, align 4
  %8 = load i32, i32* %p, align 4
  %sub2 = sub nsw i32 8, %8
  %shr = lshr i32 %7, %sub2
  %9 = load i32, i32* %rv, align 4
  %or = or i32 %9, %shr
  store i32 %or, i32* %rv, align 4
  %10 = load i32, i32* %p, align 4
  %sub3 = sub nsw i32 7, %10
  store i32 %sub3, i32* @read_position, align 4
  %11 = load i32, i32* %rv, align 4
  %12 = load i32, i32* %n.addr, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @lmask, i64 0, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4
  %and = and i32 %11, %13
  store i32 %and, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %14 = load i32, i32* @current_read_byte, align 4
  %shl4 = shl i32 %14, 8
  %call5 = call i32 @pgetc()
  %or6 = or i32 %shl4, %call5
  store i32 %or6, i32* @current_read_byte, align 4
  %15 = load i32, i32* @read_position, align 4
  %add = add nsw i32 %15, 8
  store i32 %add, i32* @read_position, align 4
  %16 = load i32, i32* %p, align 4
  %sub7 = sub nsw i32 %16, 8
  store i32 %sub7, i32* %p, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.end12, label %if.then8

if.then8:                                         ; preds = %while.end
  store i32 -1, i32* @read_position, align 4
  %18 = load i32, i32* @current_read_byte, align 4
  %19 = load i32, i32* %n.addr, align 4
  %idxprom9 = sext i32 %19 to i64
  %arrayidx10 = getelementptr inbounds [32 x i32], [32 x i32]* @lmask, i64 0, i64 %idxprom9
  %20 = load i32, i32* %arrayidx10, align 4
  %and11 = and i32 %18, %20
  store i32 %and11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %while.end
  %21 = load i32, i32* %p, align 4
  %sub13 = sub nsw i32 0, %21
  store i32 %sub13, i32* %p, align 4
  %22 = load i32, i32* %p, align 4
  %sub14 = sub nsw i32 %22, 1
  store i32 %sub14, i32* @read_position, align 4
  %23 = load i32, i32* @current_read_byte, align 4
  %24 = load i32, i32* %p, align 4
  %shr15 = lshr i32 %23, %24
  %25 = load i32, i32* %n.addr, align 4
  %idxprom16 = sext i32 %25 to i64
  %arrayidx17 = getelementptr inbounds [32 x i32], [32 x i32]* @lmask, i64 0, i64 %idxprom16
  %26 = load i32, i32* %arrayidx17, align 4
  %and18 = and i32 %shr15, %26
  store i32 %and18, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then8, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @huff_make_dhuff_tb(i32* %p_xhtbl_bits, i32 %p_dhtbl_ml, i32* %p_dhtbl_maxcode, i32* %p_dhtbl_mincode, i32* %p_dhtbl_valptr) #0 {
entry:
  %p_xhtbl_bits.addr = alloca i32*, align 8
  %p_dhtbl_ml.addr = alloca i32, align 4
  %p_dhtbl_maxcode.addr = alloca i32*, align 8
  %p_dhtbl_mincode.addr = alloca i32*, align 8
  %p_dhtbl_valptr.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p = alloca i32, align 4
  %code = alloca i32, align 4
  %size = alloca i32, align 4
  %l = alloca i32, align 4
  %huffsize = alloca [257 x i32], align 16
  %huffcode = alloca [257 x i32], align 16
  %lastp = alloca i32, align 4
  store i32* %p_xhtbl_bits, i32** %p_xhtbl_bits.addr, align 8
  store i32 %p_dhtbl_ml, i32* %p_dhtbl_ml.addr, align 4
  store i32* %p_dhtbl_maxcode, i32** %p_dhtbl_maxcode.addr, align 8
  store i32* %p_dhtbl_mincode, i32** %p_dhtbl_mincode.addr, align 8
  store i32* %p_dhtbl_valptr, i32** %p_dhtbl_valptr.addr, align 8
  store i32 0, i32* %p, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 17
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %2 = load i32*, i32** %p_xhtbl_bits.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4
  %cmp2 = icmp sle i32 %1, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %p, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %p, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 %idxprom4
  store i32 %5, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %8, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %9 = load i32, i32* %p, align 4
  %idxprom10 = sext i32 %9 to i64
  %arrayidx11 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 %idxprom10
  store i32 0, i32* %arrayidx11, align 4
  %10 = load i32, i32* %p, align 4
  store i32 %10, i32* %lastp, align 4
  store i32 0, i32* %p, align 4
  store i32 0, i32* %code, align 4
  %arrayidx12 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 0
  %11 = load i32, i32* %arrayidx12, align 16
  store i32 %11, i32* %size, align 4
  br label %while.body

while.body:                                       ; preds = %for.end9, %do.end29
  br label %do.body

do.body:                                          ; preds = %land.end, %while.body
  %12 = load i32, i32* %code, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %code, align 4
  %13 = load i32, i32* %p, align 4
  %inc14 = add nsw i32 %13, 1
  store i32 %inc14, i32* %p, align 4
  %idxprom15 = sext i32 %13 to i64
  %arrayidx16 = getelementptr inbounds [257 x i32], [257 x i32]* %huffcode, i64 0, i64 %idxprom15
  store i32 %12, i32* %arrayidx16, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %14 = load i32, i32* %p, align 4
  %idxprom17 = sext i32 %14 to i64
  %arrayidx18 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 %idxprom17
  %15 = load i32, i32* %arrayidx18, align 4
  %16 = load i32, i32* %size, align 4
  %cmp19 = icmp eq i32 %15, %16
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %17 = load i32, i32* %p, align 4
  %cmp20 = icmp slt i32 %17, 257
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %18 = phi i1 [ false, %do.cond ], [ %cmp20, %land.rhs ]
  br i1 %18, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %19 = load i32, i32* %p, align 4
  %idxprom21 = sext i32 %19 to i64
  %arrayidx22 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 %idxprom21
  %20 = load i32, i32* %arrayidx22, align 4
  %tobool = icmp ne i32 %20, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  br label %while.end

if.end:                                           ; preds = %do.end
  br label %do.body23

do.body23:                                        ; preds = %do.cond25, %if.end
  %21 = load i32, i32* %code, align 4
  %shl = shl i32 %21, 1
  store i32 %shl, i32* %code, align 4
  %22 = load i32, i32* %size, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %size, align 4
  br label %do.cond25

do.cond25:                                        ; preds = %do.body23
  %23 = load i32, i32* %p, align 4
  %idxprom26 = sext i32 %23 to i64
  %arrayidx27 = getelementptr inbounds [257 x i32], [257 x i32]* %huffsize, i64 0, i64 %idxprom26
  %24 = load i32, i32* %arrayidx27, align 4
  %25 = load i32, i32* %size, align 4
  %cmp28 = icmp ne i32 %24, %25
  br i1 %cmp28, label %do.body23, label %do.end29

do.end29:                                         ; preds = %do.cond25
  br label %while.body

while.end:                                        ; preds = %if.then
  store i32 1, i32* %p_dhtbl_ml.addr, align 4
  store i32 0, i32* %p, align 4
  store i32 1, i32* %l, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc53, %while.end
  %26 = load i32, i32* %l, align 4
  %cmp31 = icmp sle i32 %26, 16
  br i1 %cmp31, label %for.body32, label %for.end55

for.body32:                                       ; preds = %for.cond30
  %27 = load i32*, i32** %p_xhtbl_bits.addr, align 8
  %28 = load i32, i32* %l, align 4
  %idxprom33 = sext i32 %28 to i64
  %arrayidx34 = getelementptr inbounds i32, i32* %27, i64 %idxprom33
  %29 = load i32, i32* %arrayidx34, align 4
  %cmp35 = icmp eq i32 %29, 0
  br i1 %cmp35, label %if.then36, label %if.else

if.then36:                                        ; preds = %for.body32
  %30 = load i32*, i32** %p_dhtbl_maxcode.addr, align 8
  %31 = load i32, i32* %l, align 4
  %idxprom37 = sext i32 %31 to i64
  %arrayidx38 = getelementptr inbounds i32, i32* %30, i64 %idxprom37
  store i32 -1, i32* %arrayidx38, align 4
  br label %if.end52

if.else:                                          ; preds = %for.body32
  %32 = load i32, i32* %p, align 4
  %33 = load i32*, i32** %p_dhtbl_valptr.addr, align 8
  %34 = load i32, i32* %l, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds i32, i32* %33, i64 %idxprom39
  store i32 %32, i32* %arrayidx40, align 4
  %35 = load i32, i32* %p, align 4
  %idxprom41 = sext i32 %35 to i64
  %arrayidx42 = getelementptr inbounds [257 x i32], [257 x i32]* %huffcode, i64 0, i64 %idxprom41
  %36 = load i32, i32* %arrayidx42, align 4
  %37 = load i32*, i32** %p_dhtbl_mincode.addr, align 8
  %38 = load i32, i32* %l, align 4
  %idxprom43 = sext i32 %38 to i64
  %arrayidx44 = getelementptr inbounds i32, i32* %37, i64 %idxprom43
  store i32 %36, i32* %arrayidx44, align 4
  %39 = load i32*, i32** %p_xhtbl_bits.addr, align 8
  %40 = load i32, i32* %l, align 4
  %idxprom45 = sext i32 %40 to i64
  %arrayidx46 = getelementptr inbounds i32, i32* %39, i64 %idxprom45
  %41 = load i32, i32* %arrayidx46, align 4
  %sub = sub nsw i32 %41, 1
  %42 = load i32, i32* %p, align 4
  %add = add nsw i32 %42, %sub
  store i32 %add, i32* %p, align 4
  %43 = load i32, i32* %p, align 4
  %idxprom47 = sext i32 %43 to i64
  %arrayidx48 = getelementptr inbounds [257 x i32], [257 x i32]* %huffcode, i64 0, i64 %idxprom47
  %44 = load i32, i32* %arrayidx48, align 4
  %45 = load i32*, i32** %p_dhtbl_maxcode.addr, align 8
  %46 = load i32, i32* %l, align 4
  %idxprom49 = sext i32 %46 to i64
  %arrayidx50 = getelementptr inbounds i32, i32* %45, i64 %idxprom49
  store i32 %44, i32* %arrayidx50, align 4
  %47 = load i32, i32* %l, align 4
  store i32 %47, i32* %p_dhtbl_ml.addr, align 4
  %48 = load i32, i32* %p, align 4
  %inc51 = add nsw i32 %48, 1
  store i32 %inc51, i32* %p, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.else, %if.then36
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %49 = load i32, i32* %l, align 4
  %inc54 = add nsw i32 %49, 1
  store i32 %inc54, i32* %l, align 4
  br label %for.cond30

for.end55:                                        ; preds = %for.cond30
  %50 = load i32*, i32** %p_dhtbl_maxcode.addr, align 8
  %51 = load i32, i32* %p_dhtbl_ml.addr, align 4
  %idxprom56 = sext i32 %51 to i64
  %arrayidx57 = getelementptr inbounds i32, i32* %50, i64 %idxprom56
  %52 = load i32, i32* %arrayidx57, align 4
  %inc58 = add nsw i32 %52, 1
  store i32 %inc58, i32* %arrayidx57, align 4
  %53 = load i32, i32* %p_dhtbl_ml.addr, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @DecodeHuffman(i32* %Xhuff_huffval, i32 %Dhuff_ml, i32* %Dhuff_maxcode, i32* %Dhuff_mincode, i32* %Dhuff_valptr) #0 {
entry:
  %Xhuff_huffval.addr = alloca i32*, align 8
  %Dhuff_ml.addr = alloca i32, align 4
  %Dhuff_maxcode.addr = alloca i32*, align 8
  %Dhuff_mincode.addr = alloca i32*, align 8
  %Dhuff_valptr.addr = alloca i32*, align 8
  %code = alloca i32, align 4
  %l = alloca i32, align 4
  %p = alloca i32, align 4
  store i32* %Xhuff_huffval, i32** %Xhuff_huffval.addr, align 8
  store i32 %Dhuff_ml, i32* %Dhuff_ml.addr, align 4
  store i32* %Dhuff_maxcode, i32** %Dhuff_maxcode.addr, align 8
  store i32* %Dhuff_mincode, i32** %Dhuff_mincode.addr, align 8
  store i32* %Dhuff_valptr, i32** %Dhuff_valptr.addr, align 8
  %call = call i32 @buf_getb()
  store i32 %call, i32* %code, align 4
  store i32 1, i32* %l, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %code, align 4
  %1 = load i32*, i32** %Dhuff_maxcode.addr, align 8
  %2 = load i32, i32* %l, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp sgt i32 %0, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %code, align 4
  %shl = shl i32 %4, 1
  %call1 = call i32 @buf_getb()
  %add = add nsw i32 %shl, %call1
  store i32 %add, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %l, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %l, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %code, align 4
  %7 = load i32*, i32** %Dhuff_maxcode.addr, align 8
  %8 = load i32, i32* %Dhuff_ml.addr, align 4
  %idxprom2 = sext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %7, i64 %idxprom2
  %9 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp slt i32 %6, %9
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %10 = load i32*, i32** %Dhuff_valptr.addr, align 8
  %11 = load i32, i32* %l, align 4
  %idxprom5 = sext i32 %11 to i64
  %arrayidx6 = getelementptr inbounds i32, i32* %10, i64 %idxprom5
  %12 = load i32, i32* %arrayidx6, align 4
  %13 = load i32, i32* %code, align 4
  %add7 = add nsw i32 %12, %13
  %14 = load i32*, i32** %Dhuff_mincode.addr, align 8
  %15 = load i32, i32* %l, align 4
  %idxprom8 = sext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i64 %idxprom8
  %16 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %add7, %16
  store i32 %sub, i32* %p, align 4
  %17 = load i32*, i32** %Xhuff_huffval.addr, align 8
  %18 = load i32, i32* %p, align 4
  %idxprom10 = sext i32 %18 to i64
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i64 %idxprom10
  %19 = load i32, i32* %arrayidx11, align 4
  ret i32 %19

if.else:                                          ; preds = %for.end
  %20 = load i32, i32* @main_result, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* @main_result, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0))
  call void @exit(i32 0) #3
  unreachable
}

; Function Attrs: noinline nounwind ssp uwtable
define void @jpeg_init_decompress() #0 {
entry:
  %tmp = alloca i32, align 4
  %0 = load i16, i16* @p_jinfo_image_height, align 2
  %conv = sext i16 %0 to i32
  %sub = sub nsw i32 %conv, 1
  %div = sdiv i32 %sub, 8
  %add = add nsw i32 %div, 1
  store i32 %add, i32* @p_jinfo_MCUHeight, align 4
  %1 = load i16, i16* @p_jinfo_image_width, align 2
  %conv1 = sext i16 %1 to i32
  %sub2 = sub nsw i32 %conv1, 1
  %div3 = sdiv i32 %sub2, 8
  %add4 = add nsw i32 %div3, 1
  store i32 %add4, i32* @p_jinfo_MCUWidth, align 4
  %2 = load i32, i32* @p_jinfo_MCUHeight, align 4
  %3 = load i32, i32* @p_jinfo_MCUWidth, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* @p_jinfo_NumMCU, align 4
  %4 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i64 0, i64 0), align 4
  %call = call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i64 0, i64 0, i64 0), i32 %4, i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i64 0, i64 0, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i64 0, i64 0, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i64 0, i64 0, i64 0))
  store i32 %call, i32* %tmp, align 4
  %5 = load i32, i32* %tmp, align 4
  store i32 %5, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i64 0, i64 0), align 4
  %6 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i64 0, i64 1), align 4
  %call5 = call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_xhuff_tbl_bits, i64 0, i64 1, i64 0), i32 %6, i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_maxcode, i64 0, i64 1, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_mincode, i64 0, i64 1, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_dc_dhuff_tbl_valptr, i64 0, i64 1, i64 0))
  store i32 %call5, i32* %tmp, align 4
  %7 = load i32, i32* %tmp, align 4
  store i32 %7, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_dc_dhuff_tbl_ml, i64 0, i64 1), align 4
  %8 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i64 0, i64 0), align 4
  %call6 = call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i64 0, i64 0, i64 0), i32 %8, i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i64 0, i64 0, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i64 0, i64 0, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i64 0, i64 0, i64 0))
  store i32 %call6, i32* %tmp, align 4
  %9 = load i32, i32* %tmp, align 4
  store i32 %9, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i64 0, i64 0), align 4
  %10 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i64 0, i64 1), align 4
  %call7 = call i32 @huff_make_dhuff_tb(i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_xhuff_tbl_bits, i64 0, i64 1, i64 0), i32 %10, i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_maxcode, i64 0, i64 1, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_mincode, i64 0, i64 1, i64 0), i32* getelementptr inbounds ([2 x [36 x i32]], [2 x [36 x i32]]* @p_jinfo_ac_dhuff_tbl_valptr, i64 0, i64 1, i64 0))
  store i32 %call7, i32* %tmp, align 4
  %11 = load i32, i32* %tmp, align 4
  store i32 %11, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @p_jinfo_ac_dhuff_tbl_ml, i64 0, i64 1), align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @jpeg_read(i8* %read_buf) #0 {
entry:
  %read_buf.addr = alloca i8*, align 8
  store i8* %read_buf, i8** %read_buf.addr, align 8
  %0 = load i8*, i8** %read_buf.addr, align 8
  call void @read_markers(i8* %0)
  call void @jpeg_init_decompress()
  call void @decode_start(i32* @OutData_image_width, i32* @OutData_image_height, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @OutData_comp_vpos, i64 0, i64 0), i32* getelementptr inbounds ([3 x i32], [3 x i32]* @OutData_comp_hpos, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @jpeg2bmp_main() #0 {
entry:
  %ci = alloca i32, align 4
  %c = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* getelementptr inbounds ([5310 x i8], [5310 x i8]* @JpegFileBuf, i32 0, i32 0), i8** %c, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 5207
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [5207 x i8], [5207 x i8]* @hana_jpg, i64 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  store i32 %conv, i32* %ci, align 4
  %3 = load i32, i32* %ci, align 4
  %conv1 = trunc i32 %3 to i8
  %4 = load i8*, i8** %c, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %c, align 8
  store i8 %conv1, i8* %4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @jpeg_read(i8* getelementptr inbounds ([5310 x i8], [5310 x i8]* @JpegFileBuf, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc26, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %6, 3
  br i1 %cmp3, label %for.body5, label %for.end28

for.body5:                                        ; preds = %for.cond2
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc23, %for.body5
  %7 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %7, 5310
  br i1 %cmp7, label %for.body9, label %for.end25

for.body9:                                        ; preds = %for.cond6
  %8 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [3 x [5310 x i8]], [3 x [5310 x i8]]* @OutData_comp_buf, i64 0, i64 %idxprom10
  %9 = load i32, i32* %j, align 4
  %idxprom12 = sext i32 %9 to i64
  %arrayidx13 = getelementptr inbounds [5310 x i8], [5310 x i8]* %arrayidx11, i64 0, i64 %idxprom12
  %10 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %11 to i64
  %arrayidx16 = getelementptr inbounds [3 x [5310 x i8]], [3 x [5310 x i8]]* @hana_bmp, i64 0, i64 %idxprom15
  %12 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %12 to i64
  %arrayidx18 = getelementptr inbounds [5310 x i8], [5310 x i8]* %arrayidx16, i64 0, i64 %idxprom17
  %13 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %13 to i32
  %cmp20 = icmp ne i32 %conv14, %conv19
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %for.body9
  %14 = load i32, i32* @main_result, align 4
  %inc22 = add nsw i32 %14, 1
  store i32 %inc22, i32* @main_result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body9
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %15 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %15, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond6

for.end25:                                        ; preds = %for.cond6
  br label %for.inc26

for.inc26:                                        ; preds = %for.end25
  %16 = load i32, i32* %i, align 4
  %inc27 = add nsw i32 %16, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond2

for.end28:                                        ; preds = %for.cond2
  %17 = load i32, i32* @OutData_image_width, align 4
  %18 = load i32, i32* @out_width, align 4
  %cmp29 = icmp ne i32 %17, %18
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %for.end28
  %19 = load i32, i32* @main_result, align 4
  %inc32 = add nsw i32 %19, 1
  store i32 %inc32, i32* @main_result, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %for.end28
  %20 = load i32, i32* @OutData_image_height, align 4
  %21 = load i32, i32* @out_length, align 4
  %cmp34 = icmp ne i32 %20, %21
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.end33
  %22 = load i32, i32* @main_result, align 4
  %inc37 = add nsw i32 %22, 1
  store i32 %inc37, i32* @main_result, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.end33
  ret i32 0
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @main_result, align 4
  %call = call i32 @jpeg2bmp_main()
  %0 = load i32, i32* @main_result, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @main_result, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @pgetc() #0 {
entry:
  %retval = alloca i32, align 4
  %temp = alloca i32, align 4
  %0 = load i8*, i8** @CurHuffReadBuf, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** @CurHuffReadBuf, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %temp, align 4
  %cmp = icmp eq i32 %conv, 255
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** @CurHuffReadBuf, align 8
  %incdec.ptr2 = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr2, i8** @CurHuffReadBuf, align 8
  %3 = load i8, i8* %2, align 1
  %conv3 = zext i8 %3 to i32
  store i32 %conv3, i32* %temp, align 4
  %tobool = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 255, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then4
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.else
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
