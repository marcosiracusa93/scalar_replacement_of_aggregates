; ModuleID = '/home/ferrandi/software/panda/github-private/private-PandA-bambu/examples/CHStone/blowfish/bf.c'
source_filename = "/home/ferrandi/software/panda/github-private/private-PandA-bambu/examples/CHStone/blowfish/bf.c"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-pc-linux-gnu"

@bf_init_P = internal constant [18 x i32] [i32 608135816, i32 -2052912941, i32 320440878, i32 57701188, i32 -1542899678, i32 698298832, i32 137296536, i32 -330404727, i32 1160258022, i32 953160567, i32 -1101764913, i32 887688300, i32 -1062458953, i32 -914599715, i32 1065670069, i32 -1253635817, i32 -1843997223, i32 -1988494565], align 4
@bf_init_S = internal constant [1024 x i32] [i32 -785314906, i32 -1730169428, i32 805139163, i32 -803545161, i32 -1193168915, i32 1780907670, i32 -1166241723, i32 -248741991, i32 614570311, i32 -1282315017, i32 134345442, i32 -2054226922, i32 1667834072, i32 1901547113, i32 -1537671517, i32 -191677058, i32 227898511, i32 1921955416, i32 1904987480, i32 -2112533778, i32 2069144605, i32 -1034266187, i32 -1674521287, i32 720527379, i32 -976113629, i32 677414384, i32 -901678824, i32 -1193592593, i32 -1904616272, i32 1614419982, i32 1822297739, i32 -1340175810, i32 -686458943, i32 -1120842969, i32 2024746970, i32 1432378464, i32 -430627341, i32 -1437226092, i32 1464375394, i32 1676153920, i32 1439316330, i32 715854006, i32 -1261675468, i32 289532110, i32 -1588296017, i32 2087905683, i32 -1276242927, i32 1668267050, i32 732546397, i32 1947742710, i32 -832815594, i32 -1685613794, i32 -1344882125, i32 1814351708, i32 2050118529, i32 680887927, i32 999245976, i32 1800124847, i32 -994056165, i32 1713906067, i32 1641548236, i32 -81679983, i32 1216130144, i32 1575780402, i32 -276538019, i32 -377129551, i32 -601480446, i32 -345695352, i32 596196993, i32 -745100091, i32 258830323, i32 -2081144263, i32 772490370, i32 -1534844924, i32 1774776394, i32 -1642095778, i32 566650946, i32 -152474470, i32 1728879713, i32 -1412200208, i32 1783734482, i32 -665571480, i32 -1777359064, i32 -1420741725, i32 1861159788, i32 326777828, i32 -1170476976, i32 2130389656, i32 -1578015459, i32 967770486, i32 1724537150, i32 -2109534584, i32 -1930525159, i32 1164943284, i32 2105845187, i32 998989502, i32 -529566248, i32 -2050940813, i32 1075463327, i32 1455516326, i32 1322494562, i32 910128902, i32 469688178, i32 1117454909, i32 936433444, i32 -804646328, i32 -619713837, i32 1240580251, i32 122909385, i32 -2137449605, i32 634681816, i32 -152510729, i32 -469872614, i32 -1233564613, i32 -1754472259, i32 79693498, i32 -1045868618, i32 1084186820, i32 1583128258, i32 426386531, i32 1761308591, i32 1047286709, i32 322548459, i32 995290223, i32 1845252383, i32 -1691314900, i32 -863943356, i32 -1352745719, i32 -1092366332, i32 -567063811, i32 1712269319, i32 422464435, i32 -1060394921, i32 1170764815, i32 -771006663, i32 -1177289765, i32 1434042557, i32 442511882, i32 -694091578, i32 1076654713, i32 1738483198, i32 -81812532, i32 -1901729288, i32 -617471240, i32 1014306527, i32 -43947243, i32 793779912, i32 -1392160085, i32 842905082, i32 -48003232, i32 1395751752, i32 1040244610, i32 -1638115397, i32 -898659168, i32 445077038, i32 -552113701, i32 -717051658, i32 679411651, i32 -1402522938, i32 -1940957837, i32 1767581616, i32 -1144366904, i32 -503340195, i32 -1192226400, i32 284835224, i32 -48135240, i32 1258075500, i32 768725851, i32 -1705778055, i32 -1225243291, i32 -762426948, i32 1274779536, i32 -505548070, i32 -1530167757, i32 1660621633, i32 -823867672, i32 -283063590, i32 913787905, i32 -797008130, i32 737222580, i32 -1780753843, i32 -1366257256, i32 -357724559, i32 1804850592, i32 -795946544, i32 -1345903136, i32 -1908647121, i32 -1904896841, i32 -1879645445, i32 -233690268, i32 -2004305902, i32 -1878134756, i32 1336762016, i32 1754252060, i32 -774901359, i32 -1280786003, i32 791618072, i32 -1106372745, i32 -361419266, i32 -1962795103, i32 -442446833, i32 -1250986776, i32 413987798, i32 -829824359, i32 -1264037920, i32 -49028937, i32 2093235073, i32 -760370983, i32 375366246, i32 -2137688315, i32 -1815317740, i32 555357303, i32 -424861595, i32 2008414854, i32 -950779147, i32 -73583153, i32 -338841844, i32 2067696032, i32 -700376109, i32 -1373733303, i32 2428461, i32 544322398, i32 577241275, i32 1471733935, i32 610547355, i32 -267798242, i32 1432588573, i32 1507829418, i32 2025931657, i32 -648391809, i32 545086370, i32 48609733, i32 -2094660746, i32 1653985193, i32 298326376, i32 1316178497, i32 -1287180854, i32 2064951626, i32 458293330, i32 -1705826027, i32 -703637697, i32 -1130641692, i32 727753846, i32 -2115603456, i32 146436021, i32 1461446943, i32 -224990101, i32 705550613, i32 -1235000031, i32 -407242314, i32 -13368018, i32 -981117340, i32 1404054877, i32 -1449160799, i32 146425753, i32 1854211946, i32 1266315497, i32 -1246549692, i32 -613086930, i32 -1004984797, i32 -1385257296, i32 1235738493, i32 -1662099272, i32 -1880247706, i32 -324367247, i32 1771706367, i32 1449415276, i32 -1028546847, i32 422970021, i32 1963543593, i32 -1604775104, i32 -468174274, i32 1062508698, i32 1531092325, i32 1804592342, i32 -1711849514, i32 -1580033017, i32 -269995787, i32 1294809318, i32 -265986623, i32 1289560198, i32 -2072974554, i32 1669523910, i32 35572830, i32 157838143, i32 1052438473, i32 1016535060, i32 1802137761, i32 1753167236, i32 1386275462, i32 -1214491899, i32 -1437595849, i32 1040679964, i32 2145300060, i32 -1904392980, i32 1461121720, i32 -1338320329, i32 -263189491, i32 -266592508, i32 33600511, i32 -1374882534, i32 1018524850, i32 629373528, i32 -603381315, i32 -779021319, i32 2091462646, i32 -1808644237, i32 586499841, i32 988145025, i32 935516892, i32 -927631820, i32 -1695294041, i32 -1455136442, i32 265290510, i32 -322386114, i32 -1535828415, i32 -499593831, i32 1005194799, i32 847297441, i32 406762289, i32 1314163512, i32 1332590856, i32 1866599683, i32 -167115585, i32 750260880, i32 613907577, i32 1450815602, i32 -1129346641, i32 -560302305, i32 -644675568, i32 -1282691566, i32 -590397650, i32 1427272223, i32 778793252, i32 1343938022, i32 -1618686585, i32 2052605720, i32 1946737175, i32 -1130390852, i32 -380928628, i32 -327488454, i32 -612033030, i32 1661551462, i32 -1000029230, i32 -283371449, i32 840292616, i32 -582796489, i32 616741398, i32 312560963, i32 711312465, i32 1351876610, i32 322626781, i32 1910503582, i32 271666773, i32 -2119403562, i32 1594956187, i32 70604529, i32 -677132437, i32 1007753275, i32 1495573769, i32 -225450259, i32 -1745748998, i32 -1631928532, i32 504708206, i32 -2031925904, i32 -353800271, i32 -2045878774, i32 1514023603, i32 1998579484, i32 1312622330, i32 694541497, i32 -1712906993, i32 -2143385130, i32 1382467621, i32 776784248, i32 -1676627094, i32 -971698502, i32 -1797068168, i32 -1510196141, i32 503983604, i32 -218673497, i32 907881277, i32 423175695, i32 432175456, i32 1378068232, i32 -149744970, i32 -340918674, i32 -356311194, i32 -474200683, i32 -1501837181, i32 -1317062703, i32 26017576, i32 -1020076561, i32 -1100195163, i32 1700274565, i32 1756076034, i32 -288447217, i32 -617638597, i32 720338349, i32 1533947780, i32 354530856, i32 688349552, i32 -321042571, i32 1637815568, i32 332179504, i32 -345916010, i32 53804574, i32 -1442618417, i32 -1250730864, i32 1282449977, i32 -711025141, i32 -877994476, i32 -288586052, i32 1617046695, i32 -1666491221, i32 -1292663698, i32 1686838959, i32 431878346, i32 -1608291911, i32 1700445008, i32 1080580658, i32 1009431731, i32 832498133, i32 -1071531785, i32 -1688990951, i32 -2023776103, i32 -1778935426, i32 1648197032, i32 -130578278, i32 -1746719369, i32 300782431, i32 375919233, i32 238389289, i32 -941219882, i32 -1763778655, i32 2019080857, i32 1475708069, i32 455242339, i32 -1685863425, i32 448939670, i32 -843904277, i32 1395535956, i32 -1881585436, i32 1841049896, i32 1491858159, i32 885456874, i32 -30872223, i32 -293847949, i32 1565136089, i32 -396052509, i32 1108368660, i32 540939232, i32 1173283510, i32 -1549095958, i32 -613658859, i32 -87339056, i32 -951913406, i32 -278217803, i32 1699691293, i32 1103962373, i32 -669091426, i32 -2038084153, i32 -464828566, i32 1031889488, i32 -815619598, i32 1535977030, i32 -58162272, i32 -1043876189, i32 2132092099, i32 1774941330, i32 1199868427, i32 1452454533, i32 157007616, i32 -1390851939, i32 342012276, i32 595725824, i32 1480756522, i32 206960106, i32 497939518, i32 591360097, i32 863170706, i32 -1919713727, i32 -698356495, i32 1814182875, i32 2094937945, i32 -873565088, i32 1082520231, i32 -831049106, i32 -1509457788, i32 435703966, i32 -386934699, i32 1641649973, i32 -1452693590, i32 -989067582, i32 1510255612, i32 -2146710820, i32 -1639679442, i32 -1018874748, i32 -36346107, i32 236887753, i32 -613164077, i32 274041037, i32 1734335097, i32 -479771840, i32 -976997275, i32 1899903192, i32 1026095262, i32 -244449504, i32 356393447, i32 -1884275382, i32 -421290197, i32 -612127241, i32 -381855128, i32 -1803468553, i32 -162781668, i32 -1805047500, i32 1091903735, i32 1979897079, i32 -1124832466, i32 -727580568, i32 -737663887, i32 857797738, i32 1136121015, i32 1342202287, i32 507115054, i32 -1759230650, i32 337727348, i32 -1081374656, i32 1301675037, i32 -1766485585, i32 1895095763, i32 1721773893, i32 -1078195732, i32 62756741, i32 2142006736, i32 835421444, i32 -1762973773, i32 1442658625, i32 -635090970, i32 -1412822374, i32 676362277, i32 1392781812, i32 170690266, i32 -373920261, i32 1759253602, i32 -683120384, i32 1745797284, i32 664899054, i32 1329594018, i32 -393761396, i32 -1249058810, i32 2062866102, i32 -1429332356, i32 -751345684, i32 -830954599, i32 1080764994, i32 553557557, i32 -638351943, i32 -298199125, i32 991055499, i32 499776247, i32 1265440854, i32 648242737, i32 -354183246, i32 980351604, i32 -581221582, i32 1749149687, i32 -898096901, i32 -83167922, i32 -654396521, i32 1161844396, i32 -1169648345, i32 1431517754, i32 545492359, i32 -26498633, i32 -795437749, i32 1437099964, i32 -1592419752, i32 -861329053, i32 -1713251533, i32 -1507177898, i32 1060185593, i32 1593081372, i32 -1876348548, i32 -34019326, i32 69676912, i32 -2135222948, i32 86519011, i32 -1782508216, i32 -456757982, i32 1220612927, i32 -955283748, i32 133810670, i32 1090789135, i32 1078426020, i32 1569222167, i32 845107691, i32 -711212847, i32 -222510705, i32 1091646820, i32 628848692, i32 1613405280, i32 -537335645, i32 526609435, i32 236106946, i32 48312990, i32 -1352249391, i32 -892239595, i32 1797494240, i32 859738849, i32 992217954, i32 -289490654, i32 -2051890674, i32 -424014439, i32 -562951028, i32 765654824, i32 -804095931, i32 -1783130883, i32 1685915746, i32 -405998096, i32 1414112111, i32 -2021832454, i32 -1013056217, i32 -214004450, i32 172450625, i32 -1724973196, i32 980381355, i32 -185008841, i32 -1475158944, i32 -1578377736, i32 -1726226100, i32 -613520627, i32 -964995824, i32 1835478071, i32 660984891, i32 -590288892, i32 -248967737, i32 -872349789, i32 -1254551662, i32 1762651403, i32 1719377915, i32 -824476260, i32 -1601057013, i32 -652910941, i32 -1156370552, i32 1364962596, i32 2073328063, i32 1983633131, i32 926494387, i32 -871278215, i32 -2144935273, i32 -198299347, i32 1749200295, i32 -966120645, i32 309677260, i32 2016342300, i32 1779581495, i32 -1215147545, i32 111262694, i32 1274766160, i32 443224088, i32 298511866, i32 1025883608, i32 -488520759, i32 1145181785, i32 168956806, i32 -653464466, i32 -710153686, i32 1689216846, i32 -628709281, i32 -1094719096, i32 1692713982, i32 -1648590761, i32 -252198778, i32 1618508792, i32 1610833997, i32 -771914938, i32 -164094032, i32 2001055236, i32 -684262196, i32 -2092799181, i32 -266425487, i32 -1333771897, i32 1006657119, i32 2006996926, i32 -1108824540, i32 1430667929, i32 -1084739999, i32 1314452623, i32 -220332638, i32 -193663176, i32 -2021016126, i32 1399257539, i32 -927756684, i32 -1267338667, i32 1190975929, i32 2062231137, i32 -1960976508, i32 -2073424263, i32 -1856006686, i32 1181637006, i32 548689776, i32 -1932175983, i32 -922558900, i32 -1190417183, i32 -1149106736, i32 296247880, i32 1970579870, i32 -1216407114, i32 -525738999, i32 1714227617, i32 -1003338189, i32 -396747006, i32 166772364, i32 1251581989, i32 493813264, i32 448347421, i32 195405023, i32 -1584991729, i32 677966185, i32 -591930749, i32 1463355134, i32 -1578971493, i32 1338867538, i32 1343315457, i32 -1492745222, i32 -1610435132, i32 233230375, i32 -1694987225, i32 2000651841, i32 -1017099258, i32 1638401717, i32 -266896856, i32 -1057650976, i32 6314154, i32 819756386, i32 300326615, i32 590932579, i32 1405279636, i32 -1027467724, i32 -1144263082, i32 -1866680610, i32 -335774303, i32 -833020554, i32 1862657033, i32 1266418056, i32 963775037, i32 2089974820, i32 -2031914401, i32 1917689273, i32 448879540, i32 -744572676, i32 -313240200, i32 150775221, i32 -667058989, i32 1303187396, i32 508620638, i32 -1318983944, i32 -1568336679, i32 1817252668, i32 1876281319, i32 1457606340, i32 908771278, i32 -574175177, i32 -677760460, i32 -1838972398, i32 1729034894, i32 1080033504, i32 976866871, i32 -738527793, i32 -1413318857, i32 1522871579, i32 1555064734, i32 1336096578, i32 -746444992, i32 -1715692610, i32 -720269667, i32 -1089506539, i32 -701686658, i32 -956251013, i32 -1215554709, i32 564236357, i32 -1301368386, i32 1781952180, i32 1464380207, i32 -1131123079, i32 -962365742, i32 1699332808, i32 1393555694, i32 1183702653, i32 -713881059, i32 1288719814, i32 691649499, i32 -1447410096, i32 -1399511320, i32 -1101077756, i32 -1577396752, i32 1781354906, i32 1676643554, i32 -1702433246, i32 -1064713544, i32 1126444790, i32 -1524759638, i32 -1661808476, i32 -2084544070, i32 -1679201715, i32 -1880812208, i32 -1167828010, i32 673620729, i32 -1489356063, i32 1269405062, i32 -279616791, i32 -953159725, i32 -145557542, i32 1057255273, i32 2012875353, i32 -2132498155, i32 -2018474495, i32 -1693849939, i32 993977747, i32 -376373926, i32 -1640704105, i32 753973209, i32 36408145, i32 -1764381638, i32 25011837, i32 -774947114, i32 2088578344, i32 530523599, i32 -1376601957, i32 1524020338, i32 1518925132, i32 -534139791, i32 -535190042, i32 1202760957, i32 -309069157, i32 -388774771, i32 674977740, i32 -120232407, i32 2031300136, i32 2019492241, i32 -311074731, i32 -141160892, i32 -472686964, i32 352677332, i32 -1997247046, i32 60907813, i32 90501309, i32 -1007968747, i32 1016092578, i32 -1759044884, i32 -1455814870, i32 457141659, i32 509813237, i32 -174299397, i32 652014361, i32 1966332200, i32 -1319764491, i32 55981186, i32 -1967506245, i32 676427537, i32 -1039476232, i32 -1412673177, i32 -861040033, i32 1307055953, i32 942726286, i32 933058658, i32 -1826555503, i32 -361066302, i32 -79791154, i32 1361170020, i32 2001714738, i32 -1464409218, i32 -1020707514, i32 1222529897, i32 1679025792, i32 -1565652976, i32 -580013532, i32 1770335741, i32 151462246, i32 -1281735158, i32 1682292957, i32 1483529935, i32 471910574, i32 1539241949, i32 458788160, i32 -858652289, i32 1807016891, i32 -576558466, i32 978976581, i32 1043663428, i32 -1129001515, i32 1927990952, i32 -94075717, i32 -1922690386, i32 -1086558393, i32 -761535389, i32 1412390302, i32 -1362987237, i32 -162634896, i32 1947078029, i32 -413461673, i32 -126740879, i32 -1353482915, i32 1077988104, i32 1320477388, i32 886195818, i32 18198404, i32 -508558296, i32 -1785185763, i32 112762804, i32 -831610808, i32 1866414978, i32 891333506, i32 18488651, i32 661792760, i32 1628790961, i32 -409780260, i32 -1153795797, i32 876946877, i32 -1601685023, i32 1372485963, i32 791857591, i32 -1608533303, i32 -534984578, i32 -1127755274, i32 -822013501, i32 -1578587449, i32 445679433, i32 -732971622, i32 -790962485, i32 -720709064, i32 54117162, i32 -963561881, i32 -1913048708, i32 -525259953, i32 -140617289, i32 1140177722, i32 -220915201, i32 668550556, i32 -1080614356, i32 367459370, i32 261225585, i32 -1684794075, i32 -85617823, i32 -826893077, i32 -1029151655, i32 314222801, i32 -1228863650, i32 -486184436, i32 282218597, i32 -888953790, i32 -521376242, i32 379116347, i32 1285071038, i32 846784868, i32 -1625320142, i32 -523005217, i32 -744475605, i32 -1989021154, i32 453669953, i32 1268987020, i32 -977374944, i32 -1015663912, i32 -550133875, i32 -1684459730, i32 -435458233, i32 266596637, i32 -447948204, i32 517658769, i32 -832407089, i32 -851542417, i32 370717030, i32 -47440635, i32 -2070949179, i32 -151313767, i32 -182193321, i32 -1506642397, i32 -1817692879, i32 1456262402, i32 -1393524382, i32 1517677493, i32 1846949527, i32 -1999473716, i32 -560569710, i32 -2118563376, i32 1280348187, i32 1908823572, i32 -423180355, i32 846861322, i32 1172426758, i32 -1007518822, i32 -911584259, i32 1655181056, i32 -1155153950, i32 901632758, i32 1897031941, i32 -1308360158, i32 -1228157060, i32 -847864789, i32 1393639104, i32 373351379, i32 950779232, i32 625454576, i32 -1170726756, i32 -146354570, i32 2007998917, i32 544563296, i32 -2050228658, i32 -1964470824, i32 2058025392, i32 1291430526, i32 424198748, i32 50039436, i32 29584100, i32 -689184263, i32 -1865090967, i32 -1503863136, i32 1057563949, i32 -1039604065, i32 -1219600078, i32 -831004069, i32 1469046755, i32 985887462], align 4
@key_P = internal global [18 x i32] zeroinitializer, align 4
@key_S = internal global [1024 x i32] zeroinitializer, align 4
@in_key = internal constant [5200 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworryKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthattsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefutureKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherest", align 1
@out_key = internal constant [5200 x i8] c"\05\8C\E517\F7\B3\16\EAt\C5ih\FA\1Ej\FD|)i\EF\FC\BD\EF\B6?\BB\8C\EF\FD\8E\D8\1A\89\AA\E14\F8\0D\ADM4\F9C\C2\F6\CF\05M\11\AA\18!H\FC\09\1C\07!\909}\FA\8F0W\CB\C1\CD\CB\CF\CA\D6\878\13L\FBdz\8D\87g\D2\ADOm\10\CC\9B\02\0C#z\F7B\D4\1E\B7\CF\8E\C9\FF1\E5\D18\D5\AB\E8\B5z>*K5\88\EA\03,\12\08\86\A0\C1\DE\5C\97]\EELC\BA\91\1D\B8\D6\AD\B21)\FB\80\B9\BF1p\DF\FCU\DB_Dh\D2\03\137\7FLJ\0C\B4\16|\FC.\AA7\007\CA\90\E8\B3\C8\C9\CE%\DB\C3bM\9A\9D\16'\A9BW\CC\96\19Q\D6\91\A3\9A\A6\DC\1A]*#\01\8F\B2\85\03\0B5\B8\08\8F\CF\E6+\BCG88\F1\E6~\B4e\86z\AB\D9\AD\DD8.\A6\F0\9F\1D\B5\E4w\F0\D0\0A\BC\A4\019J\0F\09\8AR\FB\95\F69\1CF\F3\A8\90\C2k\D5pg\BA\AF;\BB\FAZ\EFI\E6\85\AD\C3\5C\D3\8E\A3\E2\B8\EDs9\10\11+\BC\BA\85\A52\C3\13D$\99\B2\0F4U4{]}V$\8A5;\A1\A1\1A\B2\CB\E4\1B%\8CC\EC\07\B6XG\8B\E4\16\0F\93\DC\12\84o\0D\F9(\01o\05\8C&k\06\F9\E6\82G\B2Q'(\1C\D9\D8v\9F\E4\D0y\0A8i\0B\01\A7i@\D1,V\BF\ED\FEe\19~\A1%6\0CW\9C\96\9BE4p\EA\8F\95)\0F-\D3\A5\BD\A2\89\A6\BC\AF\80\E0 \99\80\BE\A9\82\7F\BF\EE\DF\92\9B\B1\8E\B0N\E54`\8Dw\DF$\0A\18\0F\F5\80\07\C4jd\1E ?\84X\85\FA\C3\89\22\5C\DB\14uQ\D8\B5t\F1N\83\B2\22\8A\CE\0A\903\D2lozt1\D5\98\E8\E4\14\F5z\D4\E1\AD\BE\98\15==\B3\ADGn&\07\C6\9D\99\CFW\11**\D7\12\D0Z\AC\9D\17.%\A6\DAA\19\88\ADU\95i6\14\DA\06A\B8\EF.&\9DD\F0\E4u\E0\13\99\03\22\E9/9gO\11\D0\DF\5C\1Eo\7F=\CD\D4\E8\05\CFk\9EQ\C0\87CK<vD3\1E\C8\B0\BB>\01d\AD?v\1Fl\8B\8A\F8\E9Q\F4$\F1\E7:\9A\C9n\09'V\E3I<=(P\C3\E0\BB7\9AHh\DA<\FD\F8\D8Z,\D5N\B1\94L\F49\AA\01\A6K\CE{\A6\CE\87\DD!\82\1A\94\94\E0u8K\972Z1\040\FF\93*\B7:L\83\10m\DEVU\86\FD\D1J\11\DC\EER\C8\8CY\D2u\AE\B4D\06\A3\09\F9\F93|\B65\06='\BE\0A(?\CF\5C\BD\1EE1\08\E9tyP\95\A9H\A4\CB\98G\C9\A9\90\CDS\0A\D6\D5\00\93 >[\A2\A4\A0\D3\C4\9F\A6\09I\DDOut\14gpP\93\E2\CD\19l\D2=\A3.9f\B9~\03\06\1Bv\8BqC>\04\F2X\98_\5C\8E\E9\8B\22\B1\F4\82\0C\04S\1D\A8\AB\0FFs\D8$\DAj\D5\5C\D7\D7+\9B\C8M\C6D%\FF\D7>\9A4\FB\C6\947\CFOc\F3\87+@\CC\B3j\90Nx^\E9\A0\C8\5C\BF2+\81\E5\A8\C20\83N\E4\A3\9D`\AF\CB\BD\CDQ\EER=TTo\D9\A3\07\12M\9C)\D1/\0A\FA:\EC\BB\F8\D4\83<4~\B4q\CF\87p\C0\BE\B1D\ABM\DB\FDi\0C\9D\DE \9F\5C\B9X\C0q'\12M\D7p\DFr\80f*\DB\0F\7F\17r\98}\FE\0C4N\F2J\82}\8A\12,\98\0C\ECu\C2S\C0\FFm\DF\ED\1F\CB\AA(\BCZ.\C4|\F3\99\7F\F7t\AEC\E9\C7\94oD<N\C4w\9F\DAUp\09\14F\A8M.\1A'\13\0A\AC\9F\87\0A~\19\85\CF\C1 \99}e3UNNL\91\BAf\F9N\B6\8A\E0\11\CF\15\CD2\8B\DF\05\C4N\FE\EFR\81\DE\16\92\F5\B2\CD\A9\A8\8A\93\18oE^q\BE\9DR\E9W\86\95\FD[\A1\80-\FEQKf\1A\9A\9FI\A3\C6\06\1BT\88\A5t\BE\EA\11\A0\00\EDx\96\FC{\AE\EE\88\1D\E2\D3\14Vhz\87\F1\11\E5\CFzB\89\A4\1A\01Zj\8F\B6E\A0\BA\0A\E79O\E2\D1\BA{R\E7\E4B\EF\D6h\C8a\01\E5f\80Mi6v:U$\EF\85#\04\D0\8D\13\B1\AClm\9E'CF0\AF\D4\B5K2\F8b^\A1|\F9\BB\9E\89N#\8EZ\82qy?%K]\AE\16tsi\D7\DD\93u(\8E&i+\9A\A9'P.6\06\99\8F\F8\C1n\E8M\8Ca\14z\FDRP\CD\F9\8C\A8\8E\02\DF\9B\80K\F8K\A8Fq\82\C4heo\B6&\FA7\18\9CI\AFN6\0A\02\8E\FD\CE\04\CB\B1\DF_\E7-\0C{y\ED\95\BF1]R\9DUU\96\22\F1\ECW\09\BC\AC\97_X\00`\E9\D7\82\F7\9D\0A\1E\99\F9\C6\9F\BC/P\AF\DB\AB7\AC\D6\E76X2WqT\0A#\AAz_\ACI\E0ab(\9A\87^\8Am3\BD\95\B04\9Dk\18\18\1D\A2S\14\E4\C5\A3\A3\EEn\A6\D5\84#\AA@\F2\9F,_\E0\F2\FEz\9E\B5\D6\D8\E0\03#t\E2\F6\13\F8\E7\9A\BDH!\1F\A9\22\CCcL\0A5~4\A8p\BB3\AD\0Af\AA\F7\12N\EA6\D3\A5pDUq\F8\A5Z_\14Iy(\EEs\1D\7F\DF\B3\FCMk)\E9w\EFK\D0=\BC\C9#\E6\D7\03\CB\8D|\D2\B4\FC\00\F4\94\BE`-\DA\EAx\8F\88\00?G\D7\09\E9\1B\E2\1D\FFp@\EC\A5A'j\22\22\FB\FC\BC \16\F8\96D\5C\09\073\CD\84\00\06\A3\93@`\A8\CF\EBm\8A\1D\0E\DEh\8Da\B7u\8E&\18\C06\CEh\02<\0EM\EA\B6)\10\C0\03\0B\D4h\E0/\1Bg\D5\A7\B7z>\82\B3z\EE!\DE]\CF\EEuiybgY?\84\A8 f\F4\F0\11\0B\A9N\A7\F7\FD\E2\AE\D5t}c\1Ah6&\FC\D0\87\B0]\0A\1Dc\D9\9B\C6)\F4*c\14\E9\D4\C1\AF\1B{x\BB\9B\A7\0EF\E1\CB\12\81;\B1\87\00\FD\04\7F\9F7W\D7\C2\D0\04\E9^-\82\D5\E7Z\CCcZ)\A6]\08\1A\10|\0E\1F\85\10\B8\80\D1\B2\F7\DF\D3\09~`\1AV+~\11z\0DZk\99\C1V&\13\D9uH\F1\B8\A4\8E\A4\A9\EC\E2r\A9\16\E6\A8q\80\03\A61^G-\A1 M\A4~\C5\E2\83\BC\B0r\7F\1F\A2\C8\A8k\83X>\F8H\83\E1q\92\BD\FCh\94\116<\BF\CE\A1qU\C9\1A\C9|\17\91\86\12\BB\8F#\F6Jt+%h\F7\FA/;\FB\93`\CD\CF\84\CAa\BC\A9\86\0F_\BA\1F\9C\B7\00\F1\83\86\00<\96\93;\11\9AI\F5\12<\B4\B5q\C7\8F`\A2\C5\F9@%\AE\D90\17}\8D\D5\E3\FA\8B\C2L\EA\16\B9\EErX\0B?\08X\DAQ1\1F\D6\D4='\BF\C7a?/^\FC\C5\02_\F32\97\FE5\F4\C49<0T\0EU\D2\A31\D6G\BF\9F\EF\A5B\9BU\F0\5CZ:x\12\CB\BCP&\BC\B1p\B0h\9F\D6\D31\5CzA\B08F \99E\0C\89\C7\9FF\F2\B4<t\EBdX\FAC\E1h\81I\9B\AAd{\F3/\11\0A\89\B8>\03\F34\F4\93v\B8\17\07\16D\CE)\A7\CB\A6\E2\D6\B3\F3\F9\16v\E0g88\06\F6/(k\C08\154\A6\DCg\DBT\D2\14\19V&\B1\9D\C0\A3C\AA`*w\CB\CD\8C\D8\EB\E4\8A*\B3}Ip\C7\B4&\9Fd\5C\90\9E\F0\B7\CE*\F0\CE\F6\B6@9If\A4\E5\8CY\DB\EAc\A9n|]\BB[\05\C5X)\01B\92\0E\82p\BE\1C\11y\D9q\1F\EB\CD\A4\C0e\F8\8219\EFW\06u\81v=\D5\DB0Eq\B72?\9A\E3g\81Cq\98\F7\B3Q\88\EA`\92]\8B\C3k\DA\96+\81\1FS9\AB\EA\0BZF\A8\00\D2\82=n\D7\FB\A1=\92s\9A\A1\AD\8AB\F6=\10PJvg\90\D8\DBp7\D50\F5\C9\F0M_\E7\D9\CC\CE4\E3\F7:\81e\E7'\B3\BBBrZ\C1E\CB\CA\FCb\82\92\A16I\AB\A9\C9\18}\11\E8\B9A\1B\D4\E1\8E`S\17\8D[\9A\A1R\FD\FA\9A2U\DD\1B\B5\A8s\F3\F9\18\E5\9A\88sn\16\D7\A6?\13\13\C9\BB;T\11\81p\92c\13\B0\CFw\0B\DD\D6\06\16\87\E1\91t=e\80V\DA\D2nb\13\C4u\F8\C6\0D\96m\1En4?\DC\AA\D6\E2b\97{\C4\E9\A5\C6\8EK\05\BC\F1\9F\228e==\D0\8C\B3\19\89\85~\B0\A6\18\CE\85=]\80\FF\D8a\073\FB0M\D0\8B\9E\BB\D8\D8\9F\0Ar\F3\1F\F8Q\A0w\BD\DFKO-\0D\87\C1\E5\F7\92\F1r?A\22g`\C5\05\0F\E4-\D0\C8\C9\95J.c\B6\C9\8F\B8,\9E;75\0A\F9w\08\EF\AE\F4\A8\0F\96A\B6\BA2\09\C5\B0\F0\F3\B1\B5R\FB\0C#\F4\17\9E>\98+\ED3\D3\1D\CFZ\9C\0BP\C7\C1t\E6\97\98\FD\F4V\9B\08\F6\B8c+@\C4][\A9\05\ED\02:\D0Y\E1\CE\1F\1C\91 J0\133\C6\B7\EF4\D8\BC\98]n\8C-\921\1F\ACu2\08D\CC\03\DBu(\C3\E8\B3\C8\BAx7\01b\A8xp\B6\DA\DEMq\FF\BD\00\91XH\C7W\CCi.\BCMM\B7\15V2\D9\C3\0A\D7\1D\AE\9B>\DBH\7F\B5P\B3\B1\AF8\D5A<c\B17\0D\CD\F6#\CAg\D7qm\B9W\B9Z\01JX\95\BB\E6Q\03\87\AAIFqv\B7\FA\D1\D0\F8\11\C4$\BC\80\B91\86\96m\C3\0E\C1\8E+\05u\94\0F,\92\91\A2|\CA\EF}\CD\82\BD\DD\FD\ABI$\7F#\0C\E6\99\9F%\E3R\BC\E2l\B6\82=m~\8E\FE\F3+X\AC\1E\C1x\98\90\FC(\1F\13\B5v\1BC\A7\FE\F2bW\C0\16\AD\AD\81\09pvZ\8E\AF)P\C6\17\11S\C5\A3\FC\04z\F9}G\1BWG\19\ED\83\90\BD\F4\8C\DE\0B_\88\A6pX\04\1B\FA\07\DD\9Fv\22\B5p\0B@\DE_G\7F\D2Y\0BI\7F\D9\D7\FA\87\DF\E0\9B\1C\D2\AA\7F-|\94\9B|\83?z\85\15/\93$\BD\B0\91I\08\1F\C5\8A+\A0\A3.H0\1A8\AB\8A4\16\B7\BF\EAk\E6\CAW\FFl\AC\84\A4\9A\88\C8U\83\04\BCj\01\D5*1\DDF\DEpcGi\CE\0Dg\DF%h$a\FD\95\DEQ\E8\E9\E4\DF\88{\C9\0A3\AFP\A8\C6\EE(\A1q\AA.\90\C2\DA\98P\02\E4\DDD\BF[Q\15\D8D\9Cu\91Xo\F1\C9!\9E#\F5E\8C\A2+l.wE\E0y\88M<v\DB\97\93O\A1\EA\C1.\D8\DF\F1\EB\0F\E3\1BG\EA\EB\A3\8F\82j\F4\CA\17\DE\B94m\96+QD\DA\A2\AFL\A5\85\E8\ACh\F0\E2\86\10\BA\CA<*[\D1\80\04\FF~\9C\8E\F0\8F\E0\F0\06c?\D7JG9\12\19E\93V\9C\FC\9D\E3\AB\9D\10aeMF\DA\D42D\97k\AD\8C\DD\BA\D9'&\17\D9K\FBI\B2\06\E2\09\BB\E4K\C6]\BF\B4\1A\1D=\D7\87\00\ECA,,\B2\18\02b\5C\97\FAD-\C4\B2\AE_9\D9Xm\A3\EDa\CA\92\E7'\C5\1B\F2o\BF\0B\D1\02\9D\04\1A5\93\FA\8EB\CDM\E6T\956=\14\D4@?\F1c\EC\BAx\1C.\D1{\FEVb\00\8A\BF\02\B6\FA\B3B\DF\C1\80\FF\0Fc\04\0A\B2\85\9D\0E \CB*\DD\A0\07\B2/L\8B\83l\FCX\90)\13\DB\A8\D1\F8\C1\81W\B2y8\84Q$_\1E^\F2M\E0s;\D0\8E\AFk\C7\C0f\94\1A$\A7\D5li\B9c\B4d\AC\A3\EF\F8\E86\A9\B6\FC\86TpB\1A\1AS\8F\A2\C6\D6\02\EE\89\C3\A5\11#\DD\08e <T\8A\8Ef\F1#\FE\A8\BEn>:0\E4i\DB:\9F\B0\A2\E2 U\DA}|\DD'\AF;\F7n\B6\82\1EJ\10\8D\E8q\CB\8D\EA*Z\FB8]\01\9B\FF\04=C\10-\E9\C3J\0E\94v\F7\E0\AA\8D\E2S\BE\D1Z4\E1x\C9\EEL\CD\0C8*Tz^\EC\18|\87\A2\D8\90\05\E7l\A0!\C4c\02\FD\AF9;\05\05\E5\16\F1&|\B8AR`\D3\91\0F\1C\7F\90\E7\ACo\B8\FBG\D6\90`x\8D\80VaT\8A|\AA\A3\13\0B\B6\B6m\FEw\E9Io\94\09L\B4v\14\1D\BA\03\EF\F5\B3{\83\0F\CB\D7@:g\8D\1D\01\CE\B6\A8\D3v\98\F6Ds\A0'\0F\22\89\AE\AA\8Bv\CD\12\A6\E4T\8EY\B1\C9\0D\A3D\B3\DC?\BAd\1A\CD\93\F1}\BCr\A6\A8\D6e\94@\FF \D5\02'36bI\BDq\0EiV\E0i\B125\89\AD\99q\D7\06p\81q\FEbJw\0F\F7r\ED\A5\86\F7\E3t\B5Y\BD,R\07\C5\8C\9A{\9De\939\A2\8F\F8\8F\82i\9A\F5\C6m&\8B\CE\FF\AA?!\84x\E1\D5\1D\BA\A8\CC|\EF\C4\87\18\06e\D6>*\EF-\1D\F9\BA\A8tT6\82b\AAt\80r\A3\13\D3\1C\8E\07i\98\BC\11)\09(\1F\89Ebc\D1P\1E\D2\1Fp\93\DFjAJf\10i \D1s\B7F.\FDO\BA\1B\115\919\10\12\F9\15\AA\09n\BFs\22Gw\BD\16\9A\E7\9A\F8\0B\E4G\C6\0F\1A\E0&\19\A9L\A42\AA\B9p\BA\83\D4\BF\01 \A8\5C\14\E7@\A7\C1\BF\B0>Y\B6\8E\17\03S\0FyJ\B1t\5CX\AF\ECE\FD\10\1D\DF\C5\8Ax\9A\B9\DD0\85~\1B\ED\80g\94\D2\83_k\17.8\A7\91\BEEV\BC\F7_\AD\BB#+\A3\B4\C9\D1\C0\D1\91R+\FCR\17\0D\B6\A5\D2\C2\5Ct\FAdC\9F\84\95d\89T\1C\CFi\0D=.}\09qk\C2\C0\91\D7\B4F\1B\19\E8\DC\8F\1D@\BC\D0\0B\05\D9\C3_\0B\E2c\E2\CAuk\8D7/n\B9\C6\D6\94\B1\D1\96s\13\C9\CD\AD\F0~\AE\8B\D5\D7\04\14](l\B8\FCdu6x\7FG\A4\FC\F8I\86+2\DFH\8B\92\B9q%\AD\A2\8C\D2$\C5\10\9Ft\92\D4a\81\F8\FC\89\94`\82l\CF){\CF\F7c\FD\AE\0D\AC\D6\BA\C2\CF\FF\A0\92\C5\FA\DAn\C1\13~LcXm2\85\BB\CEt\0F\D1|Q\BCX\1C\EF\F1DG\1E}\82\1E\A3m\9C\8Cp\EE](\D0\08\E4\A1\E3\FF\BD\AF\05\C4\ED\B5ewS\BA\89\D4q\831\9Bzs\9F6\0Fv\09V\C2\CD\8C!\03\02\08\D1\1F\A0\05\1A\1D\B3\FC\99\D2\5C\F2S\16`M={\E4vCO\02\18\E8\06\D42\D6\B8/\18K\DA\A0\BE\84*\BEU\B2\E6F\D1S(\96\B0\86|_@\EA\A3\D4`\C7N\C7\AD\1A#\1BvI\91\B8\8B+#L\93\B1\A2^\E5b\AB\0E.\D0\06pA\AE\E5\801\1D\C9K0\D7\89\BC\EC\0D\D4\15w\FD\BCNoy\B2\02Z\C9:\F7]\B7\10\8A\EE\CA.M(\1C\BA~\E5\D9\C6\BE\A6v4d\EB_\D7\98<\16{\EB\D00\C3\7F\D8\BDb\8A\AA\F4\DEy\CB\CC\A5\11i1[\B8y\9E3\95\9C\C7\1C\A0\A2\07\CB<{\F0\97\F72\E0\DE\86\CDsHl\01.\1B|\B2\AF\DE\13{A5MXR\C1\F1\0Ae\83\CFvnq1\11\AAv\01\0Fc\C3\D2\ED\B5\E64;\B1s;\EB\D19\80\C8\DE\08o\07M\F4\09m\FB\EC~\E1\13`[Yb'\E0\ADF\8FDi\B1\FD\0C\5COX\CE$\83d\BBS\DF\A2\ABT\1DE\E8o\F0%\04\8Eu1V\CC\D9$:$\0En\DD\10\19\BB\F3\1DE\13M+\0AQ#\E5\E58\F7C\81d\D2\94)\EF\E9G\8A\BF\03J\0F\9F\DF<\C9\D2\9FK\1E\D8\83\B1\AB?\F3\BD'\9C\FFs\B5\F0\09\D8\B8\E4\CB\87\F2ll\A7\122\AB\17\8B\95\E8)\B8&\D8\E8g2t\92\8D\BB\CC<\F9\8C\0D\0Di\8Cq\B8y\EA\C7 \AB\13\F6\C0c\C26\A0_\B1c\5C\B4\9DT\0A\7F\8D\FC>;\8BT\9BM\D4\0E[\B0\A3\D8\02\9C\E4\E9!\96\DF\B5\C2`2.M\A0\EE\A6#\00\B4\08~\0F^\08\0A&_U\85\A3\97\13\FD\22g*z\D6\DD-\8A\D5\A0\CF^v!\81\C0\16\A1\B7\D3\C0\8D\CE\C5\8D.\FE|K\E8\1A\AFM\B8\EE\1AY\8Dv\8BI\B5q\E1\F9\84l\08\09\CF\99L\E9\155\A9\D9e\86\E3\D7\C7\E5W\1F\EA'\11\88\C4Z\0EM\FD\D0\13\E5+\FE\02qSFL''G\87\01\B2\8F[\CD\1CfW\E2FK\AEK\A3~V>A\87\8B\84\86>\5C\BA\00\03W\FDm\A68\BA|\E01\AB \EF.\A3i\A8\F3\8Eod\CF\D0\08p^\91\1E\19q\E1E\E9\DF\F2!\C5\CC\03T3\BDX\99X=\87\16\E2\B1\DE\95F\A6\C7'g\AF\C6\12\B7w\5CU5\AAita\D3G\CF\05k\F5\9A\D4\03\86\CE+z\E0\C3\1A\BD\1A\D7\B3\C7\12\FC\B2e\B9\C2\A9\9B\B1\88\D3\B4\EAX\E0\17\DB\AF2#J\F1\93l\7Fn\D3\F1\9F\D0\E9\C2\A9\05t\9B\A0z\90b\C8\D71\09\83\8C|\9BR\DE\E7\E0\CBAs^\C8q\8C\C0}#\A7\83\98\9EA\C19Q\AC\E8-\B8A:\0C\D3j\E3\FDN\AFT\D0\F3qd@i'\F5\DFs\FCjO\C0\A6\19\95\8D\F0\D7\BD\B7\C1J\BFsPb\19\B6\01\A4\9C\0B\13Gm\D9m\FF\01\D8\F1\95qJZ+\0A\C8\E7(I\E7G\CE\7F\F3\9F\BA\AB9t\09Z\102\AA\07\05P<\80JD\B2b\F6p\BAH\E2\B7\C0\049\1E\DD1\CB\ED\03%\FD/\C7\CA(8e\B1\96\D3\97\A5g\EB\D3\D1\890\03.\06\C6$\A7\FB\BEI\D6\08\D0\F9\05\07\F5\A9\C3\E6tl\81\B47m\CB|\0B\B3-\A86\146\E6\FD\7F\C3z\EC\AF\A4\CD\F5M\C3r\0B\C3\8F\F5{\E8\F1\5C\D5\C7\1B\AA\E6 B\AF\7FZ\93\01\E9L\14\E5V~\A7\BF\D8uU\F8\BC\D6\E9\8BU\C2\08\D6\9D\EB\A8\B2#\C0\B1|\8CF\D4vtz\ED\14i\E5\0E\B1\E7\C9c\8Cah\1A\E2C\E9\19\B04P\88\DC\90\CC\C0h\00\98S\AF\FF{(t\14\BFOD=\E0\D4L\D6\BE\EAWB\E03\BBf(0\9Bj\D8i\D4m\E9rx\E1\9D\82\0D:,o\DF\D3ElA\11\D5\BCK\C5\F2(J!b\09\12\CC\C1zd\CE\CC\BD\F3\ADGn\E6\F3g\A5c\12W\D1\B7\22\C3\02\C7\C1\B6\97\92k\CA\A6\DEO\C4\8DY\C5\FE\B8\104\03\D8\095M\1D\DE\80\94+u+\A6;\99\CF\99Z\D3x\FFn[b\82\AB\95\5C+\B3+\1A\B9\0F\07\10]oU\A2 \8F\0E\00\AD\01F\C5\D8\AA\E7\8E\AE\EE\D1 \16\E4\D0'b\0F2\0DE\DC\A9\D0D@e\D1u\AF]\D4\FDIK\F9\015\B4^{R\A8 A\8A\88\FCZB\C1\B9<\F8\AC\A1\E4\80\82nv\5C\C693SR\F0At\94\DF\CE\94|m6\CA\1C\A9\CAd\1B\EB\ED12\BCHX\BAa(\12Q\9Dxm\C1.\03P5\B6\1F\D6\A5 \97^\04qN\DC\CD$\85\ED\97\012\A0?\D2AT\94X!\0E\D0\5C\AEu\A4\B5\C5\9B\EE\90\F6\1A\0C\D0<:_yi\85\1D@\18)\DD\B8'M\A9q\8B\A0%\E8dS\B8\D1\0450\EB>g\F7\158<m\9AL\06]^E\13K\CCA\09\DFt\FB\F5r\15\F4\F7.\98=\D7i\F7-=\0Bs\A3\117\CE6\0F\ADs\7F\0C\02>\E3\A0\03*\FD7\A5\95\02\E7\86yBO\19{\D9\8B\ADW\E8\E8^\94\A9\A6 $\9E\CB\8D\91\1A|\B2T\EF\17\CCh\C6\BA\90\97Q\97\EC\82\F9HUgm\B7x\95->Z\EE\91\22m\D1~\81\CF\81L\5C\B8:yk1'J\A0\D2#", align 1

; Function Attrs: nounwind
define internal void @local_memcpy(i32*, i32*, i32) #0 {
  br label %4

; <label>:4:                                      ; preds = %10, %3
  %5 = phi i32 [ %2, %3 ], [ %8, %10 ]
  %6 = phi i32* [ %0, %3 ], [ %12, %10 ]
  %7 = phi i32* [ %1, %3 ], [ %13, %10 ]
  %8 = add i32 %5, -1
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %4
  %11 = load i32, i32* %7, align 4, !tbaa !2
  store i32 %11, i32* %6, align 4, !tbaa !2
  %12 = getelementptr i32, i32* %6, i32 1
  %13 = getelementptr i32, i32* %7, i32 1
  br label %4

; <label>:14:                                     ; preds = %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind
define internal void @BF_set_key(i32, i8*) #0 {
  %3 = alloca [2 x i32], align 4
  %4 = bitcast [2 x i32]* %3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #2
  call void @local_memcpy(i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), i32* getelementptr inbounds ([18 x i32], [18 x i32]* @bf_init_P, i32 0, i32 0), i32 18)
  call void @local_memcpy(i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bf_init_S, i32 0, i32 0), i32 1024)
  %5 = icmp sgt i32 %0, 72
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  br label %7

; <label>:7:                                      ; preds = %6, %2
  %8 = phi i32 [ 72, %6 ], [ %0, %2 ]
  %9 = getelementptr i8, i8* %1, i32 %8
  br label %10

; <label>:10:                                     ; preds = %47, %7
  %11 = phi i32 [ 0, %7 ], [ %52, %47 ]
  %12 = phi i8* [ %1, %7 ], [ %48, %47 ]
  %13 = icmp slt i32 %11, 18
  br i1 %13, label %14, label %53

; <label>:14:                                     ; preds = %10
  %15 = getelementptr i8, i8* %12, i32 1
  %16 = load i8, i8* %12, align 1, !tbaa !6
  %17 = zext i8 %16 to i32
  %18 = icmp uge i8* %15, %9
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %14
  br label %20

; <label>:20:                                     ; preds = %19, %14
  %21 = phi i8* [ %1, %19 ], [ %15, %14 ]
  %22 = shl i32 %17, 8
  %23 = getelementptr i8, i8* %21, i32 1
  %24 = load i8, i8* %21, align 1, !tbaa !6
  %25 = zext i8 %24 to i32
  %26 = or i32 %22, %25
  %27 = icmp uge i8* %23, %9
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %20
  br label %29

; <label>:29:                                     ; preds = %28, %20
  %30 = phi i8* [ %1, %28 ], [ %23, %20 ]
  %31 = shl i32 %26, 8
  %32 = getelementptr i8, i8* %30, i32 1
  %33 = load i8, i8* %30, align 1, !tbaa !6
  %34 = zext i8 %33 to i32
  %35 = or i32 %31, %34
  %36 = icmp uge i8* %32, %9
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %29
  br label %38

; <label>:38:                                     ; preds = %37, %29
  %39 = phi i8* [ %1, %37 ], [ %32, %29 ]
  %40 = shl i32 %35, 8
  %41 = getelementptr i8, i8* %39, i32 1
  %42 = load i8, i8* %39, align 1, !tbaa !6
  %43 = zext i8 %42 to i32
  %44 = or i32 %40, %43
  %45 = icmp uge i8* %41, %9
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %38
  br label %47

; <label>:47:                                     ; preds = %46, %38
  %48 = phi i8* [ %1, %46 ], [ %41, %38 ]
  %49 = getelementptr i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), i32 %11
  %50 = load i32, i32* %49, align 4, !tbaa !2
  %51 = xor i32 %50, %44
  store i32 %51, i32* %49, align 4, !tbaa !2
  %52 = add i32 %11, 1
  br label %10

; <label>:53:                                     ; preds = %10
  %54 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 0
  store i32 0, i32* %54, align 4, !tbaa !2
  %55 = getelementptr [2 x i32], [2 x i32]* %3, i32 0, i32 1
  store i32 0, i32* %55, align 4, !tbaa !2
  br label %56

; <label>:56:                                     ; preds = %59, %53
  %57 = phi i32 [ 0, %53 ], [ %65, %59 ]
  %58 = icmp slt i32 %57, 18
  br i1 %58, label %59, label %66

; <label>:59:                                     ; preds = %56
  call void @BF_encrypt(i32* %54, i32 1)
  %60 = load i32, i32* %54, align 4, !tbaa !2
  %61 = getelementptr i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), i32 %57
  store i32 %60, i32* %61, align 4, !tbaa !2
  %62 = load i32, i32* %55, align 4, !tbaa !2
  %63 = add i32 %57, 1
  %64 = getelementptr i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), i32 %63
  store i32 %62, i32* %64, align 4, !tbaa !2
  %65 = add i32 %57, 2
  br label %56

; <label>:66:                                     ; preds = %56
  br label %67

; <label>:67:                                     ; preds = %70, %66
  %68 = phi i32 [ 0, %66 ], [ %76, %70 ]
  %69 = icmp slt i32 %68, 1024
  br i1 %69, label %70, label %77

; <label>:70:                                     ; preds = %67
  call void @BF_encrypt(i32* %54, i32 1)
  %71 = load i32, i32* %54, align 4, !tbaa !2
  %72 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %68
  store i32 %71, i32* %72, align 4, !tbaa !2
  %73 = load i32, i32* %55, align 4, !tbaa !2
  %74 = add i32 %68, 1
  %75 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %74
  store i32 %73, i32* %75, align 4, !tbaa !2
  %76 = add i32 %68, 2
  br label %67

; <label>:77:                                     ; preds = %67
  call void @llvm.lifetime.end(i64 8, i8* %4) #2
  ret void
}

; Function Attrs: nounwind
define internal void @BF_encrypt(i32*, i32) #0 {
  %3 = load i32, i32* %0, align 4, !tbaa !2
  %4 = getelementptr i32, i32* %0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !2
  %6 = icmp ne i32 %1, 0
  br i1 %6, label %7, label %380

; <label>:7:                                      ; preds = %2
  %8 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !2
  %9 = xor i32 %3, %8
  %10 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !2
  %11 = xor i32 %5, %10
  %12 = lshr i32 %9, 24
  %13 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %12
  %14 = load i32, i32* %13, align 4, !tbaa !2
  %15 = lshr i32 %9, 16
  %16 = and i32 %15, 255
  %17 = add i32 256, %16
  %18 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %17
  %19 = load i32, i32* %18, align 4, !tbaa !2
  %20 = add i32 %14, %19
  %21 = lshr i32 %9, 8
  %22 = and i32 %21, 255
  %23 = add i32 512, %22
  %24 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %23
  %25 = load i32, i32* %24, align 4, !tbaa !2
  %26 = xor i32 %20, %25
  %27 = and i32 %9, 255
  %28 = add i32 768, %27
  %29 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %28
  %30 = load i32, i32* %29, align 4, !tbaa !2
  %31 = add i32 %26, %30
  %32 = xor i32 %11, %31
  %33 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !2
  %34 = xor i32 %9, %33
  %35 = lshr i32 %32, 24
  %36 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %35
  %37 = load i32, i32* %36, align 4, !tbaa !2
  %38 = lshr i32 %32, 16
  %39 = and i32 %38, 255
  %40 = add i32 256, %39
  %41 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %40
  %42 = load i32, i32* %41, align 4, !tbaa !2
  %43 = add i32 %37, %42
  %44 = lshr i32 %32, 8
  %45 = and i32 %44, 255
  %46 = add i32 512, %45
  %47 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %46
  %48 = load i32, i32* %47, align 4, !tbaa !2
  %49 = xor i32 %43, %48
  %50 = and i32 %32, 255
  %51 = add i32 768, %50
  %52 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %51
  %53 = load i32, i32* %52, align 4, !tbaa !2
  %54 = add i32 %49, %53
  %55 = xor i32 %34, %54
  %56 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !2
  %57 = xor i32 %32, %56
  %58 = lshr i32 %55, 24
  %59 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %58
  %60 = load i32, i32* %59, align 4, !tbaa !2
  %61 = lshr i32 %55, 16
  %62 = and i32 %61, 255
  %63 = add i32 256, %62
  %64 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %63
  %65 = load i32, i32* %64, align 4, !tbaa !2
  %66 = add i32 %60, %65
  %67 = lshr i32 %55, 8
  %68 = and i32 %67, 255
  %69 = add i32 512, %68
  %70 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %69
  %71 = load i32, i32* %70, align 4, !tbaa !2
  %72 = xor i32 %66, %71
  %73 = and i32 %55, 255
  %74 = add i32 768, %73
  %75 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %74
  %76 = load i32, i32* %75, align 4, !tbaa !2
  %77 = add i32 %72, %76
  %78 = xor i32 %57, %77
  %79 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !2
  %80 = xor i32 %55, %79
  %81 = lshr i32 %78, 24
  %82 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %81
  %83 = load i32, i32* %82, align 4, !tbaa !2
  %84 = lshr i32 %78, 16
  %85 = and i32 %84, 255
  %86 = add i32 256, %85
  %87 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %86
  %88 = load i32, i32* %87, align 4, !tbaa !2
  %89 = add i32 %83, %88
  %90 = lshr i32 %78, 8
  %91 = and i32 %90, 255
  %92 = add i32 512, %91
  %93 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %92
  %94 = load i32, i32* %93, align 4, !tbaa !2
  %95 = xor i32 %89, %94
  %96 = and i32 %78, 255
  %97 = add i32 768, %96
  %98 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %97
  %99 = load i32, i32* %98, align 4, !tbaa !2
  %100 = add i32 %95, %99
  %101 = xor i32 %80, %100
  %102 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !2
  %103 = xor i32 %78, %102
  %104 = lshr i32 %101, 24
  %105 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %104
  %106 = load i32, i32* %105, align 4, !tbaa !2
  %107 = lshr i32 %101, 16
  %108 = and i32 %107, 255
  %109 = add i32 256, %108
  %110 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %109
  %111 = load i32, i32* %110, align 4, !tbaa !2
  %112 = add i32 %106, %111
  %113 = lshr i32 %101, 8
  %114 = and i32 %113, 255
  %115 = add i32 512, %114
  %116 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %115
  %117 = load i32, i32* %116, align 4, !tbaa !2
  %118 = xor i32 %112, %117
  %119 = and i32 %101, 255
  %120 = add i32 768, %119
  %121 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %120
  %122 = load i32, i32* %121, align 4, !tbaa !2
  %123 = add i32 %118, %122
  %124 = xor i32 %103, %123
  %125 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !2
  %126 = xor i32 %101, %125
  %127 = lshr i32 %124, 24
  %128 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %127
  %129 = load i32, i32* %128, align 4, !tbaa !2
  %130 = lshr i32 %124, 16
  %131 = and i32 %130, 255
  %132 = add i32 256, %131
  %133 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %132
  %134 = load i32, i32* %133, align 4, !tbaa !2
  %135 = add i32 %129, %134
  %136 = lshr i32 %124, 8
  %137 = and i32 %136, 255
  %138 = add i32 512, %137
  %139 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %138
  %140 = load i32, i32* %139, align 4, !tbaa !2
  %141 = xor i32 %135, %140
  %142 = and i32 %124, 255
  %143 = add i32 768, %142
  %144 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %143
  %145 = load i32, i32* %144, align 4, !tbaa !2
  %146 = add i32 %141, %145
  %147 = xor i32 %126, %146
  %148 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !2
  %149 = xor i32 %124, %148
  %150 = lshr i32 %147, 24
  %151 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %150
  %152 = load i32, i32* %151, align 4, !tbaa !2
  %153 = lshr i32 %147, 16
  %154 = and i32 %153, 255
  %155 = add i32 256, %154
  %156 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %155
  %157 = load i32, i32* %156, align 4, !tbaa !2
  %158 = add i32 %152, %157
  %159 = lshr i32 %147, 8
  %160 = and i32 %159, 255
  %161 = add i32 512, %160
  %162 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %161
  %163 = load i32, i32* %162, align 4, !tbaa !2
  %164 = xor i32 %158, %163
  %165 = and i32 %147, 255
  %166 = add i32 768, %165
  %167 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %166
  %168 = load i32, i32* %167, align 4, !tbaa !2
  %169 = add i32 %164, %168
  %170 = xor i32 %149, %169
  %171 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !2
  %172 = xor i32 %147, %171
  %173 = lshr i32 %170, 24
  %174 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %173
  %175 = load i32, i32* %174, align 4, !tbaa !2
  %176 = lshr i32 %170, 16
  %177 = and i32 %176, 255
  %178 = add i32 256, %177
  %179 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %178
  %180 = load i32, i32* %179, align 4, !tbaa !2
  %181 = add i32 %175, %180
  %182 = lshr i32 %170, 8
  %183 = and i32 %182, 255
  %184 = add i32 512, %183
  %185 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %184
  %186 = load i32, i32* %185, align 4, !tbaa !2
  %187 = xor i32 %181, %186
  %188 = and i32 %170, 255
  %189 = add i32 768, %188
  %190 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %189
  %191 = load i32, i32* %190, align 4, !tbaa !2
  %192 = add i32 %187, %191
  %193 = xor i32 %172, %192
  %194 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !2
  %195 = xor i32 %170, %194
  %196 = lshr i32 %193, 24
  %197 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %196
  %198 = load i32, i32* %197, align 4, !tbaa !2
  %199 = lshr i32 %193, 16
  %200 = and i32 %199, 255
  %201 = add i32 256, %200
  %202 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %201
  %203 = load i32, i32* %202, align 4, !tbaa !2
  %204 = add i32 %198, %203
  %205 = lshr i32 %193, 8
  %206 = and i32 %205, 255
  %207 = add i32 512, %206
  %208 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %207
  %209 = load i32, i32* %208, align 4, !tbaa !2
  %210 = xor i32 %204, %209
  %211 = and i32 %193, 255
  %212 = add i32 768, %211
  %213 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %212
  %214 = load i32, i32* %213, align 4, !tbaa !2
  %215 = add i32 %210, %214
  %216 = xor i32 %195, %215
  %217 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !2
  %218 = xor i32 %193, %217
  %219 = lshr i32 %216, 24
  %220 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %219
  %221 = load i32, i32* %220, align 4, !tbaa !2
  %222 = lshr i32 %216, 16
  %223 = and i32 %222, 255
  %224 = add i32 256, %223
  %225 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %224
  %226 = load i32, i32* %225, align 4, !tbaa !2
  %227 = add i32 %221, %226
  %228 = lshr i32 %216, 8
  %229 = and i32 %228, 255
  %230 = add i32 512, %229
  %231 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %230
  %232 = load i32, i32* %231, align 4, !tbaa !2
  %233 = xor i32 %227, %232
  %234 = and i32 %216, 255
  %235 = add i32 768, %234
  %236 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %235
  %237 = load i32, i32* %236, align 4, !tbaa !2
  %238 = add i32 %233, %237
  %239 = xor i32 %218, %238
  %240 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !2
  %241 = xor i32 %216, %240
  %242 = lshr i32 %239, 24
  %243 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %242
  %244 = load i32, i32* %243, align 4, !tbaa !2
  %245 = lshr i32 %239, 16
  %246 = and i32 %245, 255
  %247 = add i32 256, %246
  %248 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %247
  %249 = load i32, i32* %248, align 4, !tbaa !2
  %250 = add i32 %244, %249
  %251 = lshr i32 %239, 8
  %252 = and i32 %251, 255
  %253 = add i32 512, %252
  %254 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %253
  %255 = load i32, i32* %254, align 4, !tbaa !2
  %256 = xor i32 %250, %255
  %257 = and i32 %239, 255
  %258 = add i32 768, %257
  %259 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %258
  %260 = load i32, i32* %259, align 4, !tbaa !2
  %261 = add i32 %256, %260
  %262 = xor i32 %241, %261
  %263 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !2
  %264 = xor i32 %239, %263
  %265 = lshr i32 %262, 24
  %266 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %265
  %267 = load i32, i32* %266, align 4, !tbaa !2
  %268 = lshr i32 %262, 16
  %269 = and i32 %268, 255
  %270 = add i32 256, %269
  %271 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %270
  %272 = load i32, i32* %271, align 4, !tbaa !2
  %273 = add i32 %267, %272
  %274 = lshr i32 %262, 8
  %275 = and i32 %274, 255
  %276 = add i32 512, %275
  %277 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %276
  %278 = load i32, i32* %277, align 4, !tbaa !2
  %279 = xor i32 %273, %278
  %280 = and i32 %262, 255
  %281 = add i32 768, %280
  %282 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %281
  %283 = load i32, i32* %282, align 4, !tbaa !2
  %284 = add i32 %279, %283
  %285 = xor i32 %264, %284
  %286 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !2
  %287 = xor i32 %262, %286
  %288 = lshr i32 %285, 24
  %289 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %288
  %290 = load i32, i32* %289, align 4, !tbaa !2
  %291 = lshr i32 %285, 16
  %292 = and i32 %291, 255
  %293 = add i32 256, %292
  %294 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %293
  %295 = load i32, i32* %294, align 4, !tbaa !2
  %296 = add i32 %290, %295
  %297 = lshr i32 %285, 8
  %298 = and i32 %297, 255
  %299 = add i32 512, %298
  %300 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %299
  %301 = load i32, i32* %300, align 4, !tbaa !2
  %302 = xor i32 %296, %301
  %303 = and i32 %285, 255
  %304 = add i32 768, %303
  %305 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %304
  %306 = load i32, i32* %305, align 4, !tbaa !2
  %307 = add i32 %302, %306
  %308 = xor i32 %287, %307
  %309 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !2
  %310 = xor i32 %285, %309
  %311 = lshr i32 %308, 24
  %312 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %311
  %313 = load i32, i32* %312, align 4, !tbaa !2
  %314 = lshr i32 %308, 16
  %315 = and i32 %314, 255
  %316 = add i32 256, %315
  %317 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %316
  %318 = load i32, i32* %317, align 4, !tbaa !2
  %319 = add i32 %313, %318
  %320 = lshr i32 %308, 8
  %321 = and i32 %320, 255
  %322 = add i32 512, %321
  %323 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %322
  %324 = load i32, i32* %323, align 4, !tbaa !2
  %325 = xor i32 %319, %324
  %326 = and i32 %308, 255
  %327 = add i32 768, %326
  %328 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %327
  %329 = load i32, i32* %328, align 4, !tbaa !2
  %330 = add i32 %325, %329
  %331 = xor i32 %310, %330
  %332 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !2
  %333 = xor i32 %308, %332
  %334 = lshr i32 %331, 24
  %335 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %334
  %336 = load i32, i32* %335, align 4, !tbaa !2
  %337 = lshr i32 %331, 16
  %338 = and i32 %337, 255
  %339 = add i32 256, %338
  %340 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %339
  %341 = load i32, i32* %340, align 4, !tbaa !2
  %342 = add i32 %336, %341
  %343 = lshr i32 %331, 8
  %344 = and i32 %343, 255
  %345 = add i32 512, %344
  %346 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %345
  %347 = load i32, i32* %346, align 4, !tbaa !2
  %348 = xor i32 %342, %347
  %349 = and i32 %331, 255
  %350 = add i32 768, %349
  %351 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %350
  %352 = load i32, i32* %351, align 4, !tbaa !2
  %353 = add i32 %348, %352
  %354 = xor i32 %333, %353
  %355 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !2
  %356 = xor i32 %331, %355
  %357 = lshr i32 %354, 24
  %358 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %357
  %359 = load i32, i32* %358, align 4, !tbaa !2
  %360 = lshr i32 %354, 16
  %361 = and i32 %360, 255
  %362 = add i32 256, %361
  %363 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %362
  %364 = load i32, i32* %363, align 4, !tbaa !2
  %365 = add i32 %359, %364
  %366 = lshr i32 %354, 8
  %367 = and i32 %366, 255
  %368 = add i32 512, %367
  %369 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %368
  %370 = load i32, i32* %369, align 4, !tbaa !2
  %371 = xor i32 %365, %370
  %372 = and i32 %354, 255
  %373 = add i32 768, %372
  %374 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %373
  %375 = load i32, i32* %374, align 4, !tbaa !2
  %376 = add i32 %371, %375
  %377 = xor i32 %356, %376
  %378 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !2
  %379 = xor i32 %354, %378
  br label %753

; <label>:380:                                    ; preds = %2
  %381 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 17), align 4, !tbaa !2
  %382 = xor i32 %3, %381
  %383 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 16), align 4, !tbaa !2
  %384 = xor i32 %5, %383
  %385 = lshr i32 %382, 24
  %386 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %385
  %387 = load i32, i32* %386, align 4, !tbaa !2
  %388 = lshr i32 %382, 16
  %389 = and i32 %388, 255
  %390 = add i32 256, %389
  %391 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %390
  %392 = load i32, i32* %391, align 4, !tbaa !2
  %393 = add i32 %387, %392
  %394 = lshr i32 %382, 8
  %395 = and i32 %394, 255
  %396 = add i32 512, %395
  %397 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %396
  %398 = load i32, i32* %397, align 4, !tbaa !2
  %399 = xor i32 %393, %398
  %400 = and i32 %382, 255
  %401 = add i32 768, %400
  %402 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %401
  %403 = load i32, i32* %402, align 4, !tbaa !2
  %404 = add i32 %399, %403
  %405 = xor i32 %384, %404
  %406 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 15), align 4, !tbaa !2
  %407 = xor i32 %382, %406
  %408 = lshr i32 %405, 24
  %409 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %408
  %410 = load i32, i32* %409, align 4, !tbaa !2
  %411 = lshr i32 %405, 16
  %412 = and i32 %411, 255
  %413 = add i32 256, %412
  %414 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %413
  %415 = load i32, i32* %414, align 4, !tbaa !2
  %416 = add i32 %410, %415
  %417 = lshr i32 %405, 8
  %418 = and i32 %417, 255
  %419 = add i32 512, %418
  %420 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %419
  %421 = load i32, i32* %420, align 4, !tbaa !2
  %422 = xor i32 %416, %421
  %423 = and i32 %405, 255
  %424 = add i32 768, %423
  %425 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %424
  %426 = load i32, i32* %425, align 4, !tbaa !2
  %427 = add i32 %422, %426
  %428 = xor i32 %407, %427
  %429 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 14), align 4, !tbaa !2
  %430 = xor i32 %405, %429
  %431 = lshr i32 %428, 24
  %432 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %431
  %433 = load i32, i32* %432, align 4, !tbaa !2
  %434 = lshr i32 %428, 16
  %435 = and i32 %434, 255
  %436 = add i32 256, %435
  %437 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %436
  %438 = load i32, i32* %437, align 4, !tbaa !2
  %439 = add i32 %433, %438
  %440 = lshr i32 %428, 8
  %441 = and i32 %440, 255
  %442 = add i32 512, %441
  %443 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %442
  %444 = load i32, i32* %443, align 4, !tbaa !2
  %445 = xor i32 %439, %444
  %446 = and i32 %428, 255
  %447 = add i32 768, %446
  %448 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %447
  %449 = load i32, i32* %448, align 4, !tbaa !2
  %450 = add i32 %445, %449
  %451 = xor i32 %430, %450
  %452 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 13), align 4, !tbaa !2
  %453 = xor i32 %428, %452
  %454 = lshr i32 %451, 24
  %455 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %454
  %456 = load i32, i32* %455, align 4, !tbaa !2
  %457 = lshr i32 %451, 16
  %458 = and i32 %457, 255
  %459 = add i32 256, %458
  %460 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %459
  %461 = load i32, i32* %460, align 4, !tbaa !2
  %462 = add i32 %456, %461
  %463 = lshr i32 %451, 8
  %464 = and i32 %463, 255
  %465 = add i32 512, %464
  %466 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %465
  %467 = load i32, i32* %466, align 4, !tbaa !2
  %468 = xor i32 %462, %467
  %469 = and i32 %451, 255
  %470 = add i32 768, %469
  %471 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %470
  %472 = load i32, i32* %471, align 4, !tbaa !2
  %473 = add i32 %468, %472
  %474 = xor i32 %453, %473
  %475 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 12), align 4, !tbaa !2
  %476 = xor i32 %451, %475
  %477 = lshr i32 %474, 24
  %478 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %477
  %479 = load i32, i32* %478, align 4, !tbaa !2
  %480 = lshr i32 %474, 16
  %481 = and i32 %480, 255
  %482 = add i32 256, %481
  %483 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %482
  %484 = load i32, i32* %483, align 4, !tbaa !2
  %485 = add i32 %479, %484
  %486 = lshr i32 %474, 8
  %487 = and i32 %486, 255
  %488 = add i32 512, %487
  %489 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %488
  %490 = load i32, i32* %489, align 4, !tbaa !2
  %491 = xor i32 %485, %490
  %492 = and i32 %474, 255
  %493 = add i32 768, %492
  %494 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %493
  %495 = load i32, i32* %494, align 4, !tbaa !2
  %496 = add i32 %491, %495
  %497 = xor i32 %476, %496
  %498 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 11), align 4, !tbaa !2
  %499 = xor i32 %474, %498
  %500 = lshr i32 %497, 24
  %501 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %500
  %502 = load i32, i32* %501, align 4, !tbaa !2
  %503 = lshr i32 %497, 16
  %504 = and i32 %503, 255
  %505 = add i32 256, %504
  %506 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %505
  %507 = load i32, i32* %506, align 4, !tbaa !2
  %508 = add i32 %502, %507
  %509 = lshr i32 %497, 8
  %510 = and i32 %509, 255
  %511 = add i32 512, %510
  %512 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %511
  %513 = load i32, i32* %512, align 4, !tbaa !2
  %514 = xor i32 %508, %513
  %515 = and i32 %497, 255
  %516 = add i32 768, %515
  %517 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %516
  %518 = load i32, i32* %517, align 4, !tbaa !2
  %519 = add i32 %514, %518
  %520 = xor i32 %499, %519
  %521 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 10), align 4, !tbaa !2
  %522 = xor i32 %497, %521
  %523 = lshr i32 %520, 24
  %524 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %523
  %525 = load i32, i32* %524, align 4, !tbaa !2
  %526 = lshr i32 %520, 16
  %527 = and i32 %526, 255
  %528 = add i32 256, %527
  %529 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %528
  %530 = load i32, i32* %529, align 4, !tbaa !2
  %531 = add i32 %525, %530
  %532 = lshr i32 %520, 8
  %533 = and i32 %532, 255
  %534 = add i32 512, %533
  %535 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %534
  %536 = load i32, i32* %535, align 4, !tbaa !2
  %537 = xor i32 %531, %536
  %538 = and i32 %520, 255
  %539 = add i32 768, %538
  %540 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %539
  %541 = load i32, i32* %540, align 4, !tbaa !2
  %542 = add i32 %537, %541
  %543 = xor i32 %522, %542
  %544 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 9), align 4, !tbaa !2
  %545 = xor i32 %520, %544
  %546 = lshr i32 %543, 24
  %547 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %546
  %548 = load i32, i32* %547, align 4, !tbaa !2
  %549 = lshr i32 %543, 16
  %550 = and i32 %549, 255
  %551 = add i32 256, %550
  %552 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %551
  %553 = load i32, i32* %552, align 4, !tbaa !2
  %554 = add i32 %548, %553
  %555 = lshr i32 %543, 8
  %556 = and i32 %555, 255
  %557 = add i32 512, %556
  %558 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %557
  %559 = load i32, i32* %558, align 4, !tbaa !2
  %560 = xor i32 %554, %559
  %561 = and i32 %543, 255
  %562 = add i32 768, %561
  %563 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %562
  %564 = load i32, i32* %563, align 4, !tbaa !2
  %565 = add i32 %560, %564
  %566 = xor i32 %545, %565
  %567 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 8), align 4, !tbaa !2
  %568 = xor i32 %543, %567
  %569 = lshr i32 %566, 24
  %570 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %569
  %571 = load i32, i32* %570, align 4, !tbaa !2
  %572 = lshr i32 %566, 16
  %573 = and i32 %572, 255
  %574 = add i32 256, %573
  %575 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %574
  %576 = load i32, i32* %575, align 4, !tbaa !2
  %577 = add i32 %571, %576
  %578 = lshr i32 %566, 8
  %579 = and i32 %578, 255
  %580 = add i32 512, %579
  %581 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %580
  %582 = load i32, i32* %581, align 4, !tbaa !2
  %583 = xor i32 %577, %582
  %584 = and i32 %566, 255
  %585 = add i32 768, %584
  %586 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %585
  %587 = load i32, i32* %586, align 4, !tbaa !2
  %588 = add i32 %583, %587
  %589 = xor i32 %568, %588
  %590 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 7), align 4, !tbaa !2
  %591 = xor i32 %566, %590
  %592 = lshr i32 %589, 24
  %593 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %592
  %594 = load i32, i32* %593, align 4, !tbaa !2
  %595 = lshr i32 %589, 16
  %596 = and i32 %595, 255
  %597 = add i32 256, %596
  %598 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %597
  %599 = load i32, i32* %598, align 4, !tbaa !2
  %600 = add i32 %594, %599
  %601 = lshr i32 %589, 8
  %602 = and i32 %601, 255
  %603 = add i32 512, %602
  %604 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %603
  %605 = load i32, i32* %604, align 4, !tbaa !2
  %606 = xor i32 %600, %605
  %607 = and i32 %589, 255
  %608 = add i32 768, %607
  %609 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %608
  %610 = load i32, i32* %609, align 4, !tbaa !2
  %611 = add i32 %606, %610
  %612 = xor i32 %591, %611
  %613 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 6), align 4, !tbaa !2
  %614 = xor i32 %589, %613
  %615 = lshr i32 %612, 24
  %616 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %615
  %617 = load i32, i32* %616, align 4, !tbaa !2
  %618 = lshr i32 %612, 16
  %619 = and i32 %618, 255
  %620 = add i32 256, %619
  %621 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %620
  %622 = load i32, i32* %621, align 4, !tbaa !2
  %623 = add i32 %617, %622
  %624 = lshr i32 %612, 8
  %625 = and i32 %624, 255
  %626 = add i32 512, %625
  %627 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %626
  %628 = load i32, i32* %627, align 4, !tbaa !2
  %629 = xor i32 %623, %628
  %630 = and i32 %612, 255
  %631 = add i32 768, %630
  %632 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %631
  %633 = load i32, i32* %632, align 4, !tbaa !2
  %634 = add i32 %629, %633
  %635 = xor i32 %614, %634
  %636 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 5), align 4, !tbaa !2
  %637 = xor i32 %612, %636
  %638 = lshr i32 %635, 24
  %639 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %638
  %640 = load i32, i32* %639, align 4, !tbaa !2
  %641 = lshr i32 %635, 16
  %642 = and i32 %641, 255
  %643 = add i32 256, %642
  %644 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %643
  %645 = load i32, i32* %644, align 4, !tbaa !2
  %646 = add i32 %640, %645
  %647 = lshr i32 %635, 8
  %648 = and i32 %647, 255
  %649 = add i32 512, %648
  %650 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %649
  %651 = load i32, i32* %650, align 4, !tbaa !2
  %652 = xor i32 %646, %651
  %653 = and i32 %635, 255
  %654 = add i32 768, %653
  %655 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %654
  %656 = load i32, i32* %655, align 4, !tbaa !2
  %657 = add i32 %652, %656
  %658 = xor i32 %637, %657
  %659 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 4), align 4, !tbaa !2
  %660 = xor i32 %635, %659
  %661 = lshr i32 %658, 24
  %662 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %661
  %663 = load i32, i32* %662, align 4, !tbaa !2
  %664 = lshr i32 %658, 16
  %665 = and i32 %664, 255
  %666 = add i32 256, %665
  %667 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %666
  %668 = load i32, i32* %667, align 4, !tbaa !2
  %669 = add i32 %663, %668
  %670 = lshr i32 %658, 8
  %671 = and i32 %670, 255
  %672 = add i32 512, %671
  %673 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %672
  %674 = load i32, i32* %673, align 4, !tbaa !2
  %675 = xor i32 %669, %674
  %676 = and i32 %658, 255
  %677 = add i32 768, %676
  %678 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %677
  %679 = load i32, i32* %678, align 4, !tbaa !2
  %680 = add i32 %675, %679
  %681 = xor i32 %660, %680
  %682 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 3), align 4, !tbaa !2
  %683 = xor i32 %658, %682
  %684 = lshr i32 %681, 24
  %685 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %684
  %686 = load i32, i32* %685, align 4, !tbaa !2
  %687 = lshr i32 %681, 16
  %688 = and i32 %687, 255
  %689 = add i32 256, %688
  %690 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %689
  %691 = load i32, i32* %690, align 4, !tbaa !2
  %692 = add i32 %686, %691
  %693 = lshr i32 %681, 8
  %694 = and i32 %693, 255
  %695 = add i32 512, %694
  %696 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %695
  %697 = load i32, i32* %696, align 4, !tbaa !2
  %698 = xor i32 %692, %697
  %699 = and i32 %681, 255
  %700 = add i32 768, %699
  %701 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %700
  %702 = load i32, i32* %701, align 4, !tbaa !2
  %703 = add i32 %698, %702
  %704 = xor i32 %683, %703
  %705 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 2), align 4, !tbaa !2
  %706 = xor i32 %681, %705
  %707 = lshr i32 %704, 24
  %708 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %707
  %709 = load i32, i32* %708, align 4, !tbaa !2
  %710 = lshr i32 %704, 16
  %711 = and i32 %710, 255
  %712 = add i32 256, %711
  %713 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %712
  %714 = load i32, i32* %713, align 4, !tbaa !2
  %715 = add i32 %709, %714
  %716 = lshr i32 %704, 8
  %717 = and i32 %716, 255
  %718 = add i32 512, %717
  %719 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %718
  %720 = load i32, i32* %719, align 4, !tbaa !2
  %721 = xor i32 %715, %720
  %722 = and i32 %704, 255
  %723 = add i32 768, %722
  %724 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %723
  %725 = load i32, i32* %724, align 4, !tbaa !2
  %726 = add i32 %721, %725
  %727 = xor i32 %706, %726
  %728 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 1), align 4, !tbaa !2
  %729 = xor i32 %704, %728
  %730 = lshr i32 %727, 24
  %731 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %730
  %732 = load i32, i32* %731, align 4, !tbaa !2
  %733 = lshr i32 %727, 16
  %734 = and i32 %733, 255
  %735 = add i32 256, %734
  %736 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %735
  %737 = load i32, i32* %736, align 4, !tbaa !2
  %738 = add i32 %732, %737
  %739 = lshr i32 %727, 8
  %740 = and i32 %739, 255
  %741 = add i32 512, %740
  %742 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %741
  %743 = load i32, i32* %742, align 4, !tbaa !2
  %744 = xor i32 %738, %743
  %745 = and i32 %727, 255
  %746 = add i32 768, %745
  %747 = getelementptr i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @key_S, i32 0, i32 0), i32 %746
  %748 = load i32, i32* %747, align 4, !tbaa !2
  %749 = add i32 %744, %748
  %750 = xor i32 %729, %749
  %751 = load i32, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @key_P, i32 0, i32 0), align 4, !tbaa !2
  %752 = xor i32 %727, %751
  br label %753

; <label>:753:                                    ; preds = %380, %7
  %754 = phi i32 [ %379, %7 ], [ %752, %380 ]
  %755 = phi i32 [ %377, %7 ], [ %750, %380 ]
  store i32 %755, i32* %4, align 4, !tbaa !2
  store i32 %754, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind
define internal void @BF_cfb64_encrypt(i8*, i8*, i32, i8*, i32*, i32) #0 {
  %7 = alloca [2 x i32], align 4
  %8 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #2
  %9 = load i32, i32* %4, align 4, !tbaa !7
  %10 = icmp ne i32 %5, 0
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %6
  br label %105

; <label>:12:                                     ; preds = %6
  br label %13

; <label>:13:                                     ; preds = %12, %92
  %14 = phi i8* [ %102, %92 ], [ %1, %12 ]
  %15 = phi i8* [ %94, %92 ], [ %0, %12 ]
  %16 = phi i32 [ %104, %92 ], [ %9, %12 ]
  %17 = phi i32 [ %19, %92 ], [ %2, %12 ]
  %18 = phi i8* [ %93, %92 ], [ %3, %12 ]
  %19 = add i32 %17, -1
  %20 = icmp ne i32 %17, 0
  br i1 %20, label %21, label %197

; <label>:21:                                     ; preds = %13
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %23, label %92

; <label>:23:                                     ; preds = %21
  %24 = getelementptr i8, i8* %18, i32 1
  %25 = load i8, i8* %18, align 1, !tbaa !6
  %26 = zext i8 %25 to i32
  %27 = shl i32 %26, 24
  %28 = getelementptr i8, i8* %24, i32 1
  %29 = load i8, i8* %24, align 1, !tbaa !6
  %30 = zext i8 %29 to i32
  %31 = shl i32 %30, 16
  %32 = or i32 %27, %31
  %33 = getelementptr i8, i8* %28, i32 1
  %34 = load i8, i8* %28, align 1, !tbaa !6
  %35 = zext i8 %34 to i32
  %36 = shl i32 %35, 8
  %37 = or i32 %32, %36
  %38 = getelementptr i8, i8* %33, i32 1
  %39 = load i8, i8* %33, align 1, !tbaa !6
  %40 = zext i8 %39 to i32
  %41 = or i32 %37, %40
  %42 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
  store i32 %41, i32* %42, align 4, !tbaa !2
  %43 = getelementptr i8, i8* %38, i32 1
  %44 = load i8, i8* %38, align 1, !tbaa !6
  %45 = zext i8 %44 to i32
  %46 = shl i32 %45, 24
  %47 = getelementptr i8, i8* %43, i32 1
  %48 = load i8, i8* %43, align 1, !tbaa !6
  %49 = zext i8 %48 to i32
  %50 = shl i32 %49, 16
  %51 = or i32 %46, %50
  %52 = getelementptr i8, i8* %47, i32 1
  %53 = load i8, i8* %47, align 1, !tbaa !6
  %54 = zext i8 %53 to i32
  %55 = shl i32 %54, 8
  %56 = or i32 %51, %55
  %57 = load i8, i8* %52, align 1, !tbaa !6
  %58 = zext i8 %57 to i32
  %59 = or i32 %56, %58
  %60 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  store i32 %59, i32* %60, align 4, !tbaa !2
  call void @BF_encrypt(i32* %42, i32 1)
  %61 = load i32, i32* %42, align 4, !tbaa !2
  %62 = lshr i32 %61, 24
  %63 = and i32 %62, 255
  %64 = trunc i32 %63 to i8
  %65 = getelementptr i8, i8* %3, i32 1
  store i8 %64, i8* %3, align 1, !tbaa !6
  %66 = lshr i32 %61, 16
  %67 = and i32 %66, 255
  %68 = trunc i32 %67 to i8
  %69 = getelementptr i8, i8* %65, i32 1
  store i8 %68, i8* %65, align 1, !tbaa !6
  %70 = lshr i32 %61, 8
  %71 = and i32 %70, 255
  %72 = trunc i32 %71 to i8
  %73 = getelementptr i8, i8* %69, i32 1
  store i8 %72, i8* %69, align 1, !tbaa !6
  %74 = and i32 %61, 255
  %75 = trunc i32 %74 to i8
  %76 = getelementptr i8, i8* %73, i32 1
  store i8 %75, i8* %73, align 1, !tbaa !6
  %77 = load i32, i32* %60, align 4, !tbaa !2
  %78 = lshr i32 %77, 24
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  %81 = getelementptr i8, i8* %76, i32 1
  store i8 %80, i8* %76, align 1, !tbaa !6
  %82 = lshr i32 %77, 16
  %83 = and i32 %82, 255
  %84 = trunc i32 %83 to i8
  %85 = getelementptr i8, i8* %81, i32 1
  store i8 %84, i8* %81, align 1, !tbaa !6
  %86 = lshr i32 %77, 8
  %87 = and i32 %86, 255
  %88 = trunc i32 %87 to i8
  %89 = getelementptr i8, i8* %85, i32 1
  store i8 %88, i8* %85, align 1, !tbaa !6
  %90 = and i32 %77, 255
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %89, align 1, !tbaa !6
  br label %92

; <label>:92:                                     ; preds = %23, %21
  %93 = phi i8* [ %3, %23 ], [ %18, %21 ]
  %94 = getelementptr i8, i8* %15, i32 1
  %95 = load i8, i8* %15, align 1, !tbaa !6
  %96 = zext i8 %95 to i32
  %97 = getelementptr i8, i8* %93, i32 %16
  %98 = load i8, i8* %97, align 1, !tbaa !6
  %99 = zext i8 %98 to i32
  %100 = xor i32 %96, %99
  %101 = trunc i32 %100 to i8
  %102 = getelementptr i8, i8* %14, i32 1
  store i8 %101, i8* %14, align 1, !tbaa !6
  store i8 %101, i8* %97, align 1, !tbaa !6
  %103 = add i32 %16, 1
  %104 = and i32 %103, 7
  br label %13

; <label>:105:                                    ; preds = %11, %184
  %106 = phi i8* [ %194, %184 ], [ %1, %11 ]
  %107 = phi i8* [ %186, %184 ], [ %0, %11 ]
  %108 = phi i32 [ %196, %184 ], [ %9, %11 ]
  %109 = phi i32 [ %111, %184 ], [ %2, %11 ]
  %110 = phi i8* [ %185, %184 ], [ %3, %11 ]
  %111 = add i32 %109, -1
  %112 = icmp ne i32 %109, 0
  br i1 %112, label %113, label %199

; <label>:113:                                    ; preds = %105
  %114 = icmp eq i32 %108, 0
  br i1 %114, label %115, label %184

; <label>:115:                                    ; preds = %113
  %116 = getelementptr i8, i8* %110, i32 1
  %117 = load i8, i8* %110, align 1, !tbaa !6
  %118 = zext i8 %117 to i32
  %119 = shl i32 %118, 24
  %120 = getelementptr i8, i8* %116, i32 1
  %121 = load i8, i8* %116, align 1, !tbaa !6
  %122 = zext i8 %121 to i32
  %123 = shl i32 %122, 16
  %124 = or i32 %119, %123
  %125 = getelementptr i8, i8* %120, i32 1
  %126 = load i8, i8* %120, align 1, !tbaa !6
  %127 = zext i8 %126 to i32
  %128 = shl i32 %127, 8
  %129 = or i32 %124, %128
  %130 = getelementptr i8, i8* %125, i32 1
  %131 = load i8, i8* %125, align 1, !tbaa !6
  %132 = zext i8 %131 to i32
  %133 = or i32 %129, %132
  %134 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
  store i32 %133, i32* %134, align 4, !tbaa !2
  %135 = getelementptr i8, i8* %130, i32 1
  %136 = load i8, i8* %130, align 1, !tbaa !6
  %137 = zext i8 %136 to i32
  %138 = shl i32 %137, 24
  %139 = getelementptr i8, i8* %135, i32 1
  %140 = load i8, i8* %135, align 1, !tbaa !6
  %141 = zext i8 %140 to i32
  %142 = shl i32 %141, 16
  %143 = or i32 %138, %142
  %144 = getelementptr i8, i8* %139, i32 1
  %145 = load i8, i8* %139, align 1, !tbaa !6
  %146 = zext i8 %145 to i32
  %147 = shl i32 %146, 8
  %148 = or i32 %143, %147
  %149 = load i8, i8* %144, align 1, !tbaa !6
  %150 = zext i8 %149 to i32
  %151 = or i32 %148, %150
  %152 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  store i32 %151, i32* %152, align 4, !tbaa !2
  call void @BF_encrypt(i32* %134, i32 1)
  %153 = load i32, i32* %134, align 4, !tbaa !2
  %154 = lshr i32 %153, 24
  %155 = and i32 %154, 255
  %156 = trunc i32 %155 to i8
  %157 = getelementptr i8, i8* %3, i32 1
  store i8 %156, i8* %3, align 1, !tbaa !6
  %158 = lshr i32 %153, 16
  %159 = and i32 %158, 255
  %160 = trunc i32 %159 to i8
  %161 = getelementptr i8, i8* %157, i32 1
  store i8 %160, i8* %157, align 1, !tbaa !6
  %162 = lshr i32 %153, 8
  %163 = and i32 %162, 255
  %164 = trunc i32 %163 to i8
  %165 = getelementptr i8, i8* %161, i32 1
  store i8 %164, i8* %161, align 1, !tbaa !6
  %166 = and i32 %153, 255
  %167 = trunc i32 %166 to i8
  %168 = getelementptr i8, i8* %165, i32 1
  store i8 %167, i8* %165, align 1, !tbaa !6
  %169 = load i32, i32* %152, align 4, !tbaa !2
  %170 = lshr i32 %169, 24
  %171 = and i32 %170, 255
  %172 = trunc i32 %171 to i8
  %173 = getelementptr i8, i8* %168, i32 1
  store i8 %172, i8* %168, align 1, !tbaa !6
  %174 = lshr i32 %169, 16
  %175 = and i32 %174, 255
  %176 = trunc i32 %175 to i8
  %177 = getelementptr i8, i8* %173, i32 1
  store i8 %176, i8* %173, align 1, !tbaa !6
  %178 = lshr i32 %169, 8
  %179 = and i32 %178, 255
  %180 = trunc i32 %179 to i8
  %181 = getelementptr i8, i8* %177, i32 1
  store i8 %180, i8* %177, align 1, !tbaa !6
  %182 = and i32 %169, 255
  %183 = trunc i32 %182 to i8
  store i8 %183, i8* %181, align 1, !tbaa !6
  br label %184

; <label>:184:                                    ; preds = %115, %113
  %185 = phi i8* [ %3, %115 ], [ %110, %113 ]
  %186 = getelementptr i8, i8* %107, i32 1
  %187 = load i8, i8* %107, align 1, !tbaa !6
  %188 = getelementptr i8, i8* %185, i32 %108
  %189 = load i8, i8* %188, align 1, !tbaa !6
  store i8 %187, i8* %188, align 1, !tbaa !6
  %190 = zext i8 %189 to i32
  %191 = zext i8 %187 to i32
  %192 = xor i32 %190, %191
  %193 = trunc i32 %192 to i8
  %194 = getelementptr i8, i8* %106, i32 1
  store i8 %193, i8* %106, align 1, !tbaa !6
  %195 = add i32 %108, 1
  %196 = and i32 %195, 7
  br label %105

; <label>:197:                                    ; preds = %13
  %198 = phi i32 [ %16, %13 ]
  br label %201

; <label>:199:                                    ; preds = %105
  %200 = phi i32 [ %108, %105 ]
  br label %201

; <label>:201:                                    ; preds = %199, %197
  %202 = phi i32 [ %198, %197 ], [ %200, %199 ]
  %203 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 1
  store i32 0, i32* %203, align 4, !tbaa !2
  %204 = getelementptr [2 x i32], [2 x i32]* %7, i32 0, i32 0
  store i32 0, i32* %204, align 4, !tbaa !2
  store i32 %202, i32* %4, align 4, !tbaa !7
  call void @llvm.lifetime.end(i64 8, i8* %8) #2
  ret void
}

; Function Attrs: nounwind
define internal i32 @blowfish_main() #0 {
  %1 = alloca [8 x i8], align 1
  %2 = alloca [40 x i8], align 1
  %3 = alloca [40 x i8], align 1
  %4 = alloca [8 x i8], align 1
  %5 = alloca i32, align 4
  %6 = bitcast [8 x i8]* %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #2
  %7 = bitcast [40 x i8]* %2 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %7) #2
  %8 = bitcast [40 x i8]* %3 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %8) #2
  %9 = bitcast [8 x i8]* %4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #2
  %10 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #2
  store i32 0, i32* %5, align 4, !tbaa !7
  br label %11

; <label>:11:                                     ; preds = %14, %0
  %12 = phi i32 [ 0, %0 ], [ %17, %14 ]
  %13 = icmp slt i32 %12, 8
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %11
  %15 = getelementptr [8 x i8], [8 x i8]* %1, i32 0, i32 %12
  store i8 0, i8* %15, align 1, !tbaa !6
  %16 = getelementptr [8 x i8], [8 x i8]* %4, i32 0, i32 %12
  store i8 0, i8* %16, align 1, !tbaa !6
  %17 = add i32 %12, 1
  br label %11

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %1, i32 0, i32 0
  call void @BF_set_key(i32 8, i8* %19)
  br label %20

; <label>:20:                                     ; preds = %61, %18
  %21 = phi i32 [ 0, %18 ], [ %39, %61 ]
  %22 = phi i32 [ 0, %18 ], [ %62, %61 ]
  %23 = phi i32 [ 0, %18 ], [ %63, %61 ]
  %24 = icmp slt i32 %21, 5200
  br i1 %24, label %25, label %64

; <label>:25:                                     ; preds = %20
  br label %26

; <label>:26:                                     ; preds = %25, %32
  %27 = phi i32 [ %33, %32 ], [ %21, %25 ]
  %28 = phi i32 [ %36, %32 ], [ 0, %25 ]
  %29 = icmp slt i32 %27, 5200
  %30 = icmp slt i32 %28, 40
  %31 = select i1 %29, i1 %30, i1 false
  br i1 %31, label %32, label %38

; <label>:32:                                     ; preds = %26
  %33 = add i32 %27, 1
  %34 = getelementptr [5200 x i8], [5200 x i8]* @in_key, i32 0, i32 %27
  %35 = load i8, i8* %34, align 1, !tbaa !6
  %36 = add i32 %28, 1
  %37 = getelementptr [40 x i8], [40 x i8]* %2, i32 0, i32 %28
  store i8 %35, i8* %37, align 1, !tbaa !6
  br label %26

; <label>:38:                                     ; preds = %26
  %39 = phi i32 [ %27, %26 ]
  %40 = phi i32 [ %28, %26 ]
  %41 = getelementptr inbounds [40 x i8], [40 x i8]* %2, i32 0, i32 0
  %42 = getelementptr inbounds [40 x i8], [40 x i8]* %3, i32 0, i32 0
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i32 0, i32 0
  call void @BF_cfb64_encrypt(i8* %41, i8* %42, i32 %40, i8* %43, i32* %5, i32 1)
  br label %44

; <label>:44:                                     ; preds = %49, %38
  %45 = phi i32 [ 0, %38 ], [ %60, %49 ]
  %46 = phi i32 [ %22, %38 ], [ %53, %49 ]
  %47 = phi i32 [ %23, %38 ], [ %59, %49 ]
  %48 = icmp slt i32 %45, %40
  br i1 %48, label %49, label %61

; <label>:49:                                     ; preds = %44
  %50 = getelementptr [40 x i8], [40 x i8]* %3, i32 0, i32 %45
  %51 = load i8, i8* %50, align 1, !tbaa !6
  %52 = zext i8 %51 to i32
  %53 = add i32 %46, 1
  %54 = getelementptr [5200 x i8], [5200 x i8]* @out_key, i32 0, i32 %46
  %55 = load i8, i8* %54, align 1, !tbaa !6
  %56 = zext i8 %55 to i32
  %57 = icmp ne i32 %52, %56
  %58 = zext i1 %57 to i32
  %59 = add i32 %47, %58
  %60 = add i32 %45, 1
  br label %44

; <label>:61:                                     ; preds = %44
  %62 = phi i32 [ %46, %44 ]
  %63 = phi i32 [ %47, %44 ]
  br label %20

; <label>:64:                                     ; preds = %20
  %65 = phi i32 [ %23, %20 ]
  call void @llvm.lifetime.end(i64 4, i8* %10) #2
  call void @llvm.lifetime.end(i64 8, i8* %9) #2
  call void @llvm.lifetime.end(i64 40, i8* %8) #2
  call void @llvm.lifetime.end(i64 40, i8* %7) #2
  call void @llvm.lifetime.end(i64 8, i8* %6) #2
  ret i32 %65
}

; Function Attrs: nounwind
define i32 @main() #0 {
  %1 = call i32 @blowfish_main()
  ret i32 %1
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+x87,-aes,-avx,-avx2,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vl,-f16c,-fma,-fma4,-pclmul,-sha,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"NumRegisterParameters", i32 0}
!1 = !{!"clang version 4.0.1-10 (tags/RELEASE_401/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"long", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!4, !4, i64 0}
!7 = !{!8, !8, i64 0}
!8 = !{!"int", !4, i64 0}
